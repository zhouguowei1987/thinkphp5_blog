/*
Navicat MySQL Data Transfer

Source Server         : 127.0.0.1
Source Server Version : 50553
Source Host           : 127.0.0.1:3306
Source Database       : myblog

Target Server Type    : MYSQL
Target Server Version : 50553
File Encoding         : 65001

Date: 2018-11-28 13:59:55
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `zgw_admin`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_admin`;
CREATE TABLE `zgw_admin` (
  `admin_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT COMMENT '管理员ID',
  `role_id` int(11) NOT NULL DEFAULT '0' COMMENT '角色id',
  `admin_account` varchar(32) NOT NULL COMMENT '管理员账号',
  `admin_truename` varchar(20) NOT NULL COMMENT '真实姓名',
  `admin_mobile_phone` char(11) NOT NULL COMMENT '管理员手机号码',
  `admin_mail` varchar(32) NOT NULL COMMENT '管理员邮箱',
  `password` char(32) NOT NULL COMMENT '管理员密码',
  `salt` char(6) NOT NULL COMMENT '生成密码所需要的6位随机码',
  `login_ip` bigint(20) NOT NULL COMMENT '上次登陆ip',
  `login_time` int(11) NOT NULL COMMENT '最后登录时间',
  `login_count` mediumint(8) NOT NULL COMMENT '登录次数',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '账户状态，禁用为0 启用为1',
  `create_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建的时间',
  `update_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新的时间',
  PRIMARY KEY (`admin_id`),
  KEY `admin_id` (`admin_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='管理员表';

-- ----------------------------
-- Records of zgw_admin
-- ----------------------------
INSERT INTO `zgw_admin` VALUES ('1', '1', 'Function', '周国伟', '15238369929', '729044963@qq.com', '6637dc0ddde9a4bcc521f99cf4a77047', '8O8CZG', '2130706433', '1543366941', '83', '1', '1541987880', '1542944480');
INSERT INTO `zgw_admin` VALUES ('2', '2', 'guowei.zhou@xinlixiangdao.com', 'guowei.zhou', '15803889687', 'guowei.zhou@xinlixiangdao.com', '937ecae9c3399d7070f3b9a5d9ca26f6', 'UE3ECK', '2130706433', '1542251417', '2', '1', '1542248310', '1542944347');
INSERT INTO `zgw_admin` VALUES ('3', '4', 'zhangsan', '张三', '15823654785', 'zhangsan@xinlixiangdao.com', '80d3ea2b2a649010dfbbe6d55ed52854', 'ZLHBBY', '2130706433', '1542704229', '1', '0', '1542251598', '1542879099');
INSERT INTO `zgw_admin` VALUES ('4', '2', 'lisi@xinlixiangdao.com', 'lisi', '15896547852', 'lisi@xinlixiangdao.com', '7b32db825ff0a496b36ab5695f795dc2', 'UNF3RY', '2130706433', '1542362416', '20', '0', '1542272330', '1542879101');
INSERT INTO `zgw_admin` VALUES ('5', '2', 'wanggang@xinlixiangdao.com', '王刚', '15896547222', 'wanggang@xinlixiangdao.com', '6cb2ea001219c4796ffabe1f3bbf45e9', '7U9IPT', '0', '0', '0', '0', '1542856397', '1542879103');

-- ----------------------------
-- Table structure for `zgw_admin_action_log`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_admin_action_log`;
CREATE TABLE `zgw_admin_action_log` (
  `log_id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `admin_id` int(10) NOT NULL DEFAULT '0' COMMENT '执行用户id',
  `log_note` longtext NOT NULL COMMENT '日志备注',
  `log_url` varchar(255) NOT NULL COMMENT '执行的URL',
  `log_data` text NOT NULL COMMENT '提交的数据日志',
  `log_action_ip` bigint(20) NOT NULL COMMENT '执行行为者ip',
  `log_create_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '执行行为的时间',
  PRIMARY KEY (`log_id`),
  KEY `log_id` (`log_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=175 DEFAULT CHARSET=utf8 COMMENT='行为日志表';

-- ----------------------------
-- Records of zgw_admin_action_log
-- ----------------------------
INSERT INTO `zgw_admin_action_log` VALUES ('1', '1', '登录管理后台', '/common/login.html', '', '2130706433', '1542850156');
INSERT INTO `zgw_admin_action_log` VALUES ('2', '1', '角色分配权限-超级管理员', '/role/roleAuthAccess.html', 'a:13:{i:0;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"3\";}i:2;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"4\";}i:3;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"6\";}i:4;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"15\";}i:5;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"7\";}i:6;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"8\";}i:7;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"9\";}i:8;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"10\";}i:9;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"11\";}i:10;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"12\";}i:11;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"13\";}i:12;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"14\";}}', '2130706433', '1542854234');
INSERT INTO `zgw_admin_action_log` VALUES ('3', '1', '编辑权限节点-权限节点', '/rule/ajaxSaveRule.html', 'a:10:{s:5:\"level\";i:2;s:9:\"rule_name\";s:12:\"权限节点\";s:3:\"pid\";i:2;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:4:\"rule\";s:6:\"action\";s:9:\"ruleindex\";s:6:\"status\";i:1;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542854258;}', '2130706433', '1542854258');
INSERT INTO `zgw_admin_action_log` VALUES ('4', '1', '停用角色-产品编辑', '/role/ajaxUpdateRoleStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1542854294;}', '2130706433', '1542854294');
INSERT INTO `zgw_admin_action_log` VALUES ('5', '1', '编辑管理员-Function', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542855812;}', '2130706433', '1542855812');
INSERT INTO `zgw_admin_action_log` VALUES ('6', '1', '编辑管理员-Function', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542855895;}', '2130706433', '1542855895');
INSERT INTO `zgw_admin_action_log` VALUES ('7', '1', '编辑管理员-Function', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542855896;}', '2130706433', '1542855896');
INSERT INTO `zgw_admin_action_log` VALUES ('8', '1', '编辑管理员-Function', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542855897;}', '2130706433', '1542855897');
INSERT INTO `zgw_admin_action_log` VALUES ('9', '1', '编辑管理员-lisi@xinlixiangdao.com', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:22:\"lisi@xinlixiangdao.com\";s:14:\"admin_truename\";s:4:\"lisi\";s:18:\"admin_mobile_phone\";s:11:\"15896547852\";s:10:\"admin_mail\";s:22:\"lisi@xinlixiangdao.com\";s:7:\"role_id\";N;s:6:\"status\";i:1;s:11:\"update_time\";i:1542855902;}', '2130706433', '1542855902');
INSERT INTO `zgw_admin_action_log` VALUES ('10', '1', '编辑管理员-Function', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542856305;}', '2130706433', '1542856305');
INSERT INTO `zgw_admin_action_log` VALUES ('11', '1', '编辑管理员-Function', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542856310;}', '2130706433', '1542856310');
INSERT INTO `zgw_admin_action_log` VALUES ('12', '1', '添加管理员-wanggang@xinlixiangdao.com', '/admin/ajaxSaveAdmin.html', 'a:10:{s:13:\"admin_account\";s:26:\"wanggang@xinlixiangdao.com\";s:14:\"admin_truename\";s:6:\"王刚\";s:18:\"admin_mobile_phone\";s:11:\"15896547222\";s:10:\"admin_mail\";s:26:\"wanggang@xinlixiangdao.com\";s:7:\"role_id\";i:2;s:6:\"status\";i:1;s:11:\"update_time\";i:1542856397;s:8:\"password\";s:32:\"6cb2ea001219c4796ffabe1f3bbf45e9\";s:4:\"salt\";s:6:\"7U9IPT\";s:11:\"create_time\";i:1542856397;}', '2130706433', '1542856397');
INSERT INTO `zgw_admin_action_log` VALUES ('13', '1', '编辑管理员-lisi@xinlixiangdao.com', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:22:\"lisi@xinlixiangdao.com\";s:14:\"admin_truename\";s:4:\"lisi\";s:18:\"admin_mobile_phone\";s:11:\"15896547852\";s:10:\"admin_mail\";s:22:\"lisi@xinlixiangdao.com\";s:7:\"role_id\";i:2;s:6:\"status\";i:1;s:11:\"update_time\";i:1542856418;}', '2130706433', '1542856418');
INSERT INTO `zgw_admin_action_log` VALUES ('14', '1', '编辑管理员-Function', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542856546;}', '2130706433', '1542856546');
INSERT INTO `zgw_admin_action_log` VALUES ('15', '1', '编辑角色-超级管理员', '/role/ajaxSaveRole.html', 'a:4:{s:9:\"role_name\";s:15:\"超级管理员\";s:6:\"remark\";s:27:\"拥有至高无上的权限\";s:6:\"status\";i:1;s:11:\"update_time\";i:1542857124;}', '2130706433', '1542857124');
INSERT INTO `zgw_admin_action_log` VALUES ('16', '1', '角色分配权限-超级管理员', '/role/roleAuthAccess.html', 'a:13:{i:0;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"3\";}i:2;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"4\";}i:3;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"6\";}i:4;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"15\";}i:5;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"7\";}i:6;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"8\";}i:7;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"9\";}i:8;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"10\";}i:9;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"11\";}i:10;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"12\";}i:11;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"13\";}i:12;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"14\";}}', '2130706433', '1542857203');
INSERT INTO `zgw_admin_action_log` VALUES ('17', '1', '角色分配权限-产品编辑', '/role/roleAuthAccess.html', 'a:2:{i:0;a:2:{s:7:\"role_id\";i:4;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:4;s:7:\"rule_id\";s:1:\"3\";}}', '2130706433', '1542857458');
INSERT INTO `zgw_admin_action_log` VALUES ('18', '1', '角色分配权限-产品编辑', '/role/roleAuthAccess.html', 'a:2:{i:0;a:2:{s:7:\"role_id\";i:4;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:4;s:7:\"rule_id\";s:1:\"3\";}}', '2130706433', '1542857463');
INSERT INTO `zgw_admin_action_log` VALUES ('19', '1', '添加角色-研发小编', '/role/ajaxSaveRole.html', 'a:5:{s:9:\"role_name\";s:12:\"研发小编\";s:6:\"remark\";s:27:\"拥有产品研发的权限\";s:6:\"status\";i:1;s:11:\"update_time\";i:1542857510;s:11:\"create_time\";i:1542857510;}', '2130706433', '1542857510');
INSERT INTO `zgw_admin_action_log` VALUES ('20', '1', '角色分配权限-研发小编', '/role/roleAuthAccess.html', 'a:4:{i:0;a:2:{s:7:\"role_id\";i:5;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:5;s:7:\"rule_id\";s:2:\"12\";}i:2;a:2:{s:7:\"role_id\";i:5;s:7:\"rule_id\";s:2:\"13\";}i:3;a:2:{s:7:\"role_id\";i:5;s:7:\"rule_id\";s:2:\"14\";}}', '2130706433', '1542857521');
INSERT INTO `zgw_admin_action_log` VALUES ('21', '1', '编辑权限节点-管理员列表', '/rule/ajaxSaveRule.html', 'a:10:{s:5:\"level\";i:2;s:9:\"rule_name\";s:15:\"管理员列表\";s:3:\"pid\";i:2;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:5:\"admin\";s:6:\"action\";s:10:\"adminindex\";s:6:\"status\";i:1;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:1;s:11:\"update_time\";i:1542858101;}', '2130706433', '1542858101');
INSERT INTO `zgw_admin_action_log` VALUES ('22', '1', '更改个人信息', '/common/personalProfile.html', 'a:5:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:11:\"update_time\";i:1542858441;}', '2130706433', '1542858441');
INSERT INTO `zgw_admin_action_log` VALUES ('23', '1', '更改密码', '/common/changePassword.html', 'a:3:{s:8:\"password\";s:32:\"ab1acab5bcb20cde965de3e20ff380bf\";s:4:\"salt\";s:6:\"PE1147\";s:11:\"update_time\";i:1542858509;}', '2130706433', '1542858509');
INSERT INTO `zgw_admin_action_log` VALUES ('24', '1', '登录管理后台', '/common/login.html', '', '2130706433', '1542858533');
INSERT INTO `zgw_admin_action_log` VALUES ('25', '1', '更改密码', '/common/changePassword.html', 'a:3:{s:8:\"password\";s:32:\"6637dc0ddde9a4bcc521f99cf4a77047\";s:4:\"salt\";s:6:\"8O8CZG\";s:11:\"update_time\";i:1542858546;}', '2130706433', '1542858546');
INSERT INTO `zgw_admin_action_log` VALUES ('26', '1', '登录管理后台', '/common/login.html', '', '2130706433', '1542858550');
INSERT INTO `zgw_admin_action_log` VALUES ('27', '1', '角色分配权限-财务总监', '/role/roleAuthAccess.html', 'a:9:{i:0;a:2:{s:7:\"role_id\";i:3;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:3;s:7:\"rule_id\";s:1:\"7\";}i:2;a:2:{s:7:\"role_id\";i:3;s:7:\"rule_id\";s:1:\"8\";}i:3;a:2:{s:7:\"role_id\";i:3;s:7:\"rule_id\";s:1:\"9\";}i:4;a:2:{s:7:\"role_id\";i:3;s:7:\"rule_id\";s:2:\"10\";}i:5;a:2:{s:7:\"role_id\";i:3;s:7:\"rule_id\";s:2:\"11\";}i:6;a:2:{s:7:\"role_id\";i:3;s:7:\"rule_id\";s:2:\"12\";}i:7;a:2:{s:7:\"role_id\";i:3;s:7:\"rule_id\";s:2:\"13\";}i:8;a:2:{s:7:\"role_id\";i:3;s:7:\"rule_id\";s:2:\"14\";}}', '2130706433', '1542858672');
INSERT INTO `zgw_admin_action_log` VALUES ('28', '1', '启用角色-产品编辑', '/role/ajaxUpdateRoleStatus.html', 'a:2:{s:6:\"status\";i:1;s:11:\"update_time\";i:1542858758;}', '2130706433', '1542858758');
INSERT INTO `zgw_admin_action_log` VALUES ('29', '1', '编辑管理员-Function', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542859140;}', '2130706433', '1542859140');
INSERT INTO `zgw_admin_action_log` VALUES ('30', '1', '编辑管理员-Function', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542859157;}', '2130706433', '1542859157');
INSERT INTO `zgw_admin_action_log` VALUES ('31', '1', '编辑管理员-Function', '/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542859219;}', '2130706433', '1542859219');
INSERT INTO `zgw_admin_action_log` VALUES ('32', '1', '编辑角色-超级管理员', '/role/ajaxSaveRole.html', 'a:4:{s:9:\"role_name\";s:15:\"超级管理员\";s:6:\"remark\";s:27:\"拥有至高无上的权限\";s:6:\"status\";i:1;s:11:\"update_time\";i:1542859256;}', '2130706433', '1542859256');
INSERT INTO `zgw_admin_action_log` VALUES ('33', '1', '登录管理后台', '/common/login.html', '', '2130706433', '1542864302');
INSERT INTO `zgw_admin_action_log` VALUES ('34', '1', '编辑权限节点-添加管理员', '/rule/ajaxSaveRule.html', 'a:10:{s:5:\"level\";i:3;s:9:\"rule_name\";s:15:\"添加管理员\";s:3:\"pid\";i:3;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:5:\"admin\";s:6:\"action\";s:8:\"adminadd\";s:6:\"status\";i:0;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:2;s:11:\"update_time\";i:1542871094;}', '2130706433', '1542871094');
INSERT INTO `zgw_admin_action_log` VALUES ('35', '1', '登录管理后台', '/admin/common/login.html', '', '2130706433', '1542872725');
INSERT INTO `zgw_admin_action_log` VALUES ('36', '1', '编辑管理员-Function', '/admin/admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542872760;}', '2130706433', '1542872760');
INSERT INTO `zgw_admin_action_log` VALUES ('37', '1', '编辑权限节点-管理员列表', '/admin/rule/ajaxSaveRule.html', 'a:10:{s:5:\"level\";i:2;s:9:\"rule_name\";s:15:\"管理员列表\";s:3:\"pid\";i:2;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:5:\"admin\";s:6:\"action\";s:10:\"adminindex\";s:6:\"status\";i:1;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:1;s:11:\"update_time\";i:1542873760;}', '2130706433', '1542873760');
INSERT INTO `zgw_admin_action_log` VALUES ('38', '1', '退出管理后台', '/admin/common/logout.html', '', '2130706433', '1542874361');
INSERT INTO `zgw_admin_action_log` VALUES ('39', '1', '登录管理后台', '/admin/common/login.html', '', '2130706433', '1542874381');
INSERT INTO `zgw_admin_action_log` VALUES ('40', '1', '退出管理后台', '/admin/common/logout.html', '', '2130706433', '1542876234');
INSERT INTO `zgw_admin_action_log` VALUES ('41', '1', '登录管理后台', '/admin/common/login.html', '', '2130706433', '1542876252');
INSERT INTO `zgw_admin_action_log` VALUES ('42', '1', '登录管理后台', '/admin/common/login.html', '', '2130706433', '1542876254');
INSERT INTO `zgw_admin_action_log` VALUES ('43', '1', '登录管理后台', '/index.php/admin/common/login.html', '', '1700194452', '1542876435');
INSERT INTO `zgw_admin_action_log` VALUES ('44', '1', '退出管理后台', '/index.php/admin/common/logout.html', '', '1700194452', '1542876772');
INSERT INTO `zgw_admin_action_log` VALUES ('45', '1', '登录管理后台', '/index.php/admin/common/login.html', '', '1700194452', '1542876775');
INSERT INTO `zgw_admin_action_log` VALUES ('46', '1', '退出管理后台', '/admin/common/logout.html', '', '2130706433', '1542876994');
INSERT INTO `zgw_admin_action_log` VALUES ('47', '1', '登录管理后台', '/admin/common/login.html', '', '2130706433', '1542877004');
INSERT INTO `zgw_admin_action_log` VALUES ('48', '1', '角色分配权限-系统管理员', '/admin/role/roleAuthAccess.html', 'a:0:{}', '1700194452', '1542878746');
INSERT INTO `zgw_admin_action_log` VALUES ('49', '1', '角色分配权限-财务总监', '/admin/role/roleAuthAccess.html', 'a:0:{}', '1700194452', '1542878752');
INSERT INTO `zgw_admin_action_log` VALUES ('50', '1', '角色分配权限-产品编辑', '/admin/role/roleAuthAccess.html', 'a:0:{}', '1700194452', '1542878760');
INSERT INTO `zgw_admin_action_log` VALUES ('51', '1', '角色分配权限-研发小编', '/admin/role/roleAuthAccess.html', 'a:0:{}', '1700194452', '1542878766');
INSERT INTO `zgw_admin_action_log` VALUES ('52', '1', '停用角色-系统管理员', '/admin/role/ajaxUpdateRoleStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1542878776;}', '1700194452', '1542878776');
INSERT INTO `zgw_admin_action_log` VALUES ('53', '1', '停用角色-财务总监', '/admin/role/ajaxUpdateRoleStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1542878779;}', '1700194452', '1542878779');
INSERT INTO `zgw_admin_action_log` VALUES ('54', '1', '停用角色-产品编辑', '/admin/role/ajaxUpdateRoleStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1542878782;}', '1700194452', '1542878782');
INSERT INTO `zgw_admin_action_log` VALUES ('55', '1', '停用角色-研发小编', '/admin/role/ajaxUpdateRoleStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1542878785;}', '1700194452', '1542878785');
INSERT INTO `zgw_admin_action_log` VALUES ('56', '1', '停用管理员-guowei.zhou@xinlixiangdao.com', '/admin/admin/ajaxUpdateAdminStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1542879097;}', '1700194452', '1542879097');
INSERT INTO `zgw_admin_action_log` VALUES ('57', '1', '停用管理员-zhangsan', '/admin/admin/ajaxUpdateAdminStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1542879099;}', '1700194452', '1542879099');
INSERT INTO `zgw_admin_action_log` VALUES ('58', '1', '停用管理员-lisi@xinlixiangdao.com', '/admin/admin/ajaxUpdateAdminStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1542879101;}', '1700194452', '1542879101');
INSERT INTO `zgw_admin_action_log` VALUES ('59', '1', '停用管理员-wanggang@xinlixiangdao.com', '/admin/admin/ajaxUpdateAdminStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1542879103;}', '1700194452', '1542879103');
INSERT INTO `zgw_admin_action_log` VALUES ('60', '1', '登录管理后台', '/admin/common/login.html', '', '1961476542', '1542935052');
INSERT INTO `zgw_admin_action_log` VALUES ('61', '1', '登录管理后台', '/admin/common/login.html', '', '2130706433', '1542941907');
INSERT INTO `zgw_admin_action_log` VALUES ('62', '1', '添加权限节点-系统设置', '/admin/rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:1;s:9:\"rule_name\";s:12:\"系统设置\";s:3:\"pid\";i:0;s:6:\"module\";s:0:\"\";s:10:\"controller\";s:0:\"\";s:6:\"action\";s:0:\"\";s:6:\"status\";i:1;s:4:\"icon\";s:8:\"&#xe614;\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542942194;s:11:\"create_time\";i:1542942194;}', '2130706433', '1542942194');
INSERT INTO `zgw_admin_action_log` VALUES ('63', '1', '角色分配权限-超级管理员', '/admin/role/roleAuthAccess.html', 'a:14:{i:0;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"3\";}i:2;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"4\";}i:3;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"6\";}i:4;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"15\";}i:5;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"7\";}i:6;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"8\";}i:7;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"9\";}i:8;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"10\";}i:9;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"11\";}i:10;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"12\";}i:11;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"13\";}i:12;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"14\";}i:13;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"16\";}}', '2130706433', '1542942214');
INSERT INTO `zgw_admin_action_log` VALUES ('64', '1', '添加权限节点-博客设置', '/admin/rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:2;s:9:\"rule_name\";s:12:\"博客设置\";s:3:\"pid\";i:16;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:6:\"system\";s:6:\"action\";s:4:\"blog\";s:6:\"status\";i:1;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542942294;s:11:\"create_time\";i:1542942294;}', '2130706433', '1542942294');
INSERT INTO `zgw_admin_action_log` VALUES ('65', '1', '角色分配权限-超级管理员', '/admin/role/roleAuthAccess.html', 'a:15:{i:0;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"3\";}i:2;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"4\";}i:3;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"6\";}i:4;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"15\";}i:5;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"7\";}i:6;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"8\";}i:7;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"9\";}i:8;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"10\";}i:9;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"11\";}i:10;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"12\";}i:11;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"13\";}i:12;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"14\";}i:13;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"16\";}i:14;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"17\";}}', '2130706433', '1542942309');
INSERT INTO `zgw_admin_action_log` VALUES ('66', '1', '编辑管理员-Function', '/admin/admin_admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542944342;}', '2130706433', '1542944343');
INSERT INTO `zgw_admin_action_log` VALUES ('67', '1', '启用管理员-guowei.zhou@xinlixiangdao.com', '/admin/admin_admin/ajaxUpdateAdminStatus.html', 'a:2:{s:6:\"status\";i:1;s:11:\"update_time\";i:1542944347;}', '2130706433', '1542944347');
INSERT INTO `zgw_admin_action_log` VALUES ('68', '1', '编辑管理员-Function', '/admin/admin_admin/ajaxSaveAdmin.html', 'a:7:{s:13:\"admin_account\";s:8:\"Function\";s:14:\"admin_truename\";s:9:\"周国伟\";s:18:\"admin_mobile_phone\";s:11:\"15238369929\";s:10:\"admin_mail\";s:16:\"729044963@qq.com\";s:7:\"role_id\";i:1;s:6:\"status\";i:1;s:11:\"update_time\";i:1542944480;}', '2130706433', '1542944480');
INSERT INTO `zgw_admin_action_log` VALUES ('69', '1', '启用角色-系统管理员', '/admin/admin_role/ajaxUpdateRoleStatus.html', 'a:2:{s:6:\"status\";i:1;s:11:\"update_time\";i:1542944551;}', '2130706433', '1542944551');
INSERT INTO `zgw_admin_action_log` VALUES ('70', '1', '编辑角色-系统管理员', '/admin/admin_role/ajaxSaveRole.html', 'a:4:{s:9:\"role_name\";s:15:\"系统管理员\";s:6:\"remark\";s:24:\"拥有系统配置权限\";s:6:\"status\";i:1;s:11:\"update_time\";i:1542944555;}', '2130706433', '1542944555');
INSERT INTO `zgw_admin_action_log` VALUES ('71', '1', '角色分配权限-系统管理员', '/admin/admin_role/roleAuthAccess.html', 'a:13:{i:0;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:1:\"3\";}i:2;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:1:\"4\";}i:3;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:1:\"6\";}i:4;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:2:\"15\";}i:5;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:1:\"7\";}i:6;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:1:\"8\";}i:7;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:1:\"9\";}i:8;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:2:\"10\";}i:9;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:2:\"11\";}i:10;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:2:\"12\";}i:11;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:2:\"13\";}i:12;a:2:{s:7:\"role_id\";i:2;s:7:\"rule_id\";s:2:\"14\";}}', '2130706433', '1542944562');
INSERT INTO `zgw_admin_action_log` VALUES ('72', '1', '权限节点左侧不显示-管理员管理', '/admin/admin_rule/ajaxUpdateRuleStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1542944666;}', '2130706433', '1542944667');
INSERT INTO `zgw_admin_action_log` VALUES ('73', '1', '权限节点左侧显示-管理员管理', '/admin/admin_rule/ajaxUpdateRuleStatus.html', 'a:2:{s:6:\"status\";i:1;s:11:\"update_time\";i:1542944669;}', '2130706433', '1542944669');
INSERT INTO `zgw_admin_action_log` VALUES ('74', '1', '编辑权限节点-管理员管理', '/admin/admin_rule/ajaxSaveRule.html', 'a:10:{s:5:\"level\";i:1;s:9:\"rule_name\";s:15:\"管理员管理\";s:3:\"pid\";i:0;s:6:\"module\";s:0:\"\";s:10:\"controller\";s:0:\"\";s:6:\"action\";s:0:\"\";s:6:\"status\";i:1;s:4:\"icon\";s:8:\"&#xe6b8;\";s:10:\"list_order\";i:1;s:11:\"update_time\";i:1542944672;}', '2130706433', '1542944672');
INSERT INTO `zgw_admin_action_log` VALUES ('75', '1', '编辑权限节点-博客设置', '/admin/admin_rule/ajaxSaveRule.html', 'a:10:{s:5:\"level\";i:2;s:9:\"rule_name\";s:12:\"博客设置\";s:3:\"pid\";i:16;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:11:\"blog_system\";s:6:\"action\";s:4:\"info\";s:6:\"status\";i:1;s:4:\"icon\";s:8:\"&#xe614;\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542944906;}', '2130706433', '1542944906');
INSERT INTO `zgw_admin_action_log` VALUES ('76', '1', '编辑权限节点-系统设置', '/admin/admin_rule/ajaxSaveRule.html', 'a:10:{s:5:\"level\";i:1;s:9:\"rule_name\";s:12:\"系统设置\";s:3:\"pid\";i:0;s:6:\"module\";s:0:\"\";s:10:\"controller\";s:0:\"\";s:6:\"action\";s:0:\"\";s:6:\"status\";i:1;s:4:\"icon\";s:8:\"&#xe614;\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542944987;}', '2130706433', '1542944987');
INSERT INTO `zgw_admin_action_log` VALUES ('77', '1', '编辑权限节点-系统设置', '/admin/admin_rule/ajaxSaveRule.html', 'a:10:{s:5:\"level\";i:1;s:9:\"rule_name\";s:12:\"系统设置\";s:3:\"pid\";i:0;s:6:\"module\";s:0:\"\";s:10:\"controller\";s:0:\"\";s:6:\"action\";s:0:\"\";s:6:\"status\";i:1;s:4:\"icon\";s:8:\"&#xe614;\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542945042;}', '2130706433', '1542945043');
INSERT INTO `zgw_admin_action_log` VALUES ('78', '1', '编辑权限节点-系统设置', '/admin/admin_rule/ajaxSaveRule.html', 'a:10:{s:5:\"level\";i:1;s:9:\"rule_name\";s:12:\"系统设置\";s:3:\"pid\";i:0;s:6:\"module\";s:0:\"\";s:10:\"controller\";s:0:\"\";s:6:\"action\";s:0:\"\";s:6:\"status\";i:1;s:4:\"icon\";s:8:\"&#xe614;\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542945064;}', '2130706433', '1542945064');
INSERT INTO `zgw_admin_action_log` VALUES ('79', '1', '编辑权限节点-系统设置', '/admin/admin_rule/ajaxSaveRule.html', 'a:10:{s:5:\"level\";i:1;s:9:\"rule_name\";s:12:\"系统设置\";s:3:\"pid\";i:0;s:6:\"module\";s:0:\"\";s:10:\"controller\";s:0:\"\";s:6:\"action\";s:0:\"\";s:6:\"status\";i:1;s:4:\"icon\";s:8:\"&#xe617;\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542945107;}', '2130706433', '1542945107');
INSERT INTO `zgw_admin_action_log` VALUES ('80', '1', '编辑博客配置', '/admin/blog_system/info.html', 'a:3:{s:9:\"blog_name\";s:76:\"周国伟博客,技术博客,个人博客模板,php博客系统,设计模式\";s:13:\"blog_keywords\";s:107:\"个人博客模板,博客模板,博客系统,技术博客,个人博客,设计模式,laravel博客,php博客\";s:16:\"blog_description\";s:0:\"\";}', '2130706433', '1542961163');
INSERT INTO `zgw_admin_action_log` VALUES ('81', '1', '编辑博客配置', '/admin/blog_system/info.html', 'a:3:{s:9:\"blog_name\";s:76:\"周国伟博客,技术博客,个人博客模板,php博客系统,设计模式\";s:13:\"blog_keywords\";s:107:\"个人博客模板,博客模板,博客系统,技术博客,个人博客,设计模式,laravel博客,php博客\";s:16:\"blog_description\";s:189:\"周国伟的php博客,个人技术博客,分享免费个人博客模板,开源一些thinkphp,laravel相关的博客系统项目,bjy,blog和bjy,admin官网,写一些技术文章设计模式.\";}', '2130706433', '1542961251');
INSERT INTO `zgw_admin_action_log` VALUES ('82', '1', '添加权限节点-SEO配置', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:2;s:9:\"rule_name\";s:9:\"SEO配置\";s:3:\"pid\";i:17;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:11:\"blog_system\";s:6:\"action\";s:3:\"seo\";s:6:\"status\";i:1;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542961739;s:11:\"create_time\";i:1542961739;}', '2130706433', '1542961739');
INSERT INTO `zgw_admin_action_log` VALUES ('83', '1', '角色分配权限-超级管理员', '/admin/admin_role/roleAuthAccess.html', 'a:15:{i:0;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"3\";}i:2;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"4\";}i:3;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"6\";}i:4;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"15\";}i:5;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"7\";}i:6;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"8\";}i:7;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"9\";}i:8;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"10\";}i:9;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"11\";}i:10;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"12\";}i:11;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"13\";}i:12;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"14\";}i:13;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"17\";}i:14;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"18\";}}', '2130706433', '1542961747');
INSERT INTO `zgw_admin_action_log` VALUES ('84', '1', '编辑博客配置', '/admin/blog_system/seo.html', 'a:3:{s:9:\"blog_name\";s:76:\"周国伟博客,技术博客,个人博客模板,php博客系统,设计模式\";s:13:\"blog_keywords\";s:107:\"个人博客模板,博客模板,博客系统,技术博客,个人博客,设计模式,laravel博客,php博客\";s:16:\"blog_description\";s:189:\"周国伟的php博客,个人技术博客,分享免费个人博客模板,开源一些thinkphp,laravel相关的博客系统项目,bjy,blog和bjy,admin官网,写一些技术文章设计模式.\";}', '2130706433', '1542962148');
INSERT INTO `zgw_admin_action_log` VALUES ('85', '1', '编辑博客配置', '/admin/blog_system/seo.html', 'a:3:{s:9:\"blog_name\";s:76:\"周国伟博客,技术博客,个人博客模板,php博客系统,设计模式\";s:13:\"blog_keywords\";s:107:\"个人博客模板,博客模板,博客系统,技术博客,个人博客,设计模式,laravel博客,php博客\";s:16:\"blog_description\";s:189:\"周国伟的php博客,个人技术博客,分享免费个人博客模板,开源一些thinkphp,laravel相关的博客系统项目,bjy,blog和bjy,admin官网,写一些技术文章设计模式.\";}', '2130706433', '1542962157');
INSERT INTO `zgw_admin_action_log` VALUES ('86', '1', '编辑博客配置', '/admin/blog_system/seo.html', 'a:3:{s:9:\"blog_name\";s:76:\"周国伟博客,技术博客,个人博客模板,php博客系统,设计模式\";s:13:\"blog_keywords\";s:107:\"个人博客模板,博客模板,博客系统,技术博客,个人博客,设计模式,laravel博客,php博客\";s:16:\"blog_description\";s:189:\"周国伟的php博客,个人技术博客,分享免费个人博客模板,开源一些thinkphp,laravel相关的博客系统项目,bjy,blog和bjy,admin官网,写一些技术文章设计模式.\";}', '2130706433', '1542962173');
INSERT INTO `zgw_admin_action_log` VALUES ('87', '1', '编辑博客配置', '/admin/blog_system/info.html', 'a:3:{s:9:\"blog_name\";s:76:\"周国伟博客,技术博客,个人博客模板,php博客系统,设计模式\";s:13:\"blog_keywords\";s:107:\"个人博客模板,博客模板,博客系统,技术博客,个人博客,设计模式,laravel博客,php博客\";s:16:\"blog_description\";s:189:\"周国伟的php博客,个人技术博客,分享免费个人博客模板,开源一些thinkphp,laravel相关的博客系统项目,bjy,blog和bjy,admin官网,写一些技术文章设计模式.\";}', '2130706433', '1542962234');
INSERT INTO `zgw_admin_action_log` VALUES ('88', '1', '添加权限节点-博客导航', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:2;s:9:\"rule_name\";s:12:\"博客导航\";s:3:\"pid\";i:17;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:8:\"blog_nav\";s:6:\"action\";s:8:\"navindex\";s:6:\"status\";i:1;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542963609;s:11:\"create_time\";i:1542963609;}', '2130706433', '1542963609');
INSERT INTO `zgw_admin_action_log` VALUES ('89', '1', '添加权限节点-添加导航', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:3;s:9:\"rule_name\";s:12:\"添加导航\";s:3:\"pid\";i:19;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:8:\"blog_nav\";s:6:\"action\";s:6:\"navadd\";s:6:\"status\";i:0;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542963644;s:11:\"create_time\";i:1542963644;}', '2130706433', '1542963644');
INSERT INTO `zgw_admin_action_log` VALUES ('90', '1', '添加权限节点-编辑导航', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:3;s:9:\"rule_name\";s:12:\"编辑导航\";s:3:\"pid\";i:19;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:8:\"blog_nav\";s:6:\"action\";s:7:\"navedit\";s:6:\"status\";i:0;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542963672;s:11:\"create_time\";i:1542963672;}', '2130706433', '1542963672');
INSERT INTO `zgw_admin_action_log` VALUES ('91', '1', '添加权限节点-删除节点', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:3;s:9:\"rule_name\";s:12:\"删除节点\";s:3:\"pid\";i:12;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:10:\"admin_rule\";s:6:\"action\";s:14:\"ajaxdeleterule\";s:6:\"status\";i:0;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542963776;s:11:\"create_time\";i:1542963776;}', '2130706433', '1542963776');
INSERT INTO `zgw_admin_action_log` VALUES ('92', '1', '添加权限节点-删除导航', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:3;s:9:\"rule_name\";s:12:\"删除导航\";s:3:\"pid\";i:19;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:8:\"blog_nav\";s:6:\"action\";s:13:\"ajaxdeletenav\";s:6:\"status\";i:0;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542963818;s:11:\"create_time\";i:1542963818;}', '2130706433', '1542963818');
INSERT INTO `zgw_admin_action_log` VALUES ('93', '1', '角色分配权限-超级管理员', '/admin/admin_role/roleAuthAccess.html', 'a:19:{i:0;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"3\";}i:2;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"4\";}i:3;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"6\";}i:4;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"15\";}i:5;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"7\";}i:6;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"8\";}i:7;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"9\";}i:8;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"10\";}i:9;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"11\";}i:10;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"12\";}i:11;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"13\";}i:12;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"14\";}i:13;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"17\";}i:14;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"18\";}i:15;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"19\";}i:16;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"20\";}i:17;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"21\";}i:18;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"23\";}}', '2130706433', '1542963839');
INSERT INTO `zgw_admin_action_log` VALUES ('94', '1', '角色分配权限-超级管理员', '/admin/admin_role/roleAuthAccess.html', 'a:20:{i:0;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"3\";}i:2;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"4\";}i:3;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"6\";}i:4;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"15\";}i:5;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"7\";}i:6;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"8\";}i:7;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"9\";}i:8;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"10\";}i:9;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"11\";}i:10;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"12\";}i:11;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"13\";}i:12;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"14\";}i:13;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"22\";}i:14;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"17\";}i:15;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"18\";}i:16;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"19\";}i:17;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"20\";}i:18;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"21\";}i:19;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"23\";}}', '2130706433', '1542963845');
INSERT INTO `zgw_admin_action_log` VALUES ('95', '1', '添加博客导航-网站首页', '/admin/blog_nav/ajaxSaveNav.html', 'a:8:{s:5:\"level\";i:1;s:8:\"nav_name\";s:12:\"网站首页\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/index.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542965009;s:11:\"create_time\";i:1542965009;}', '2130706433', '1542965009');
INSERT INTO `zgw_admin_action_log` VALUES ('96', '1', '编辑博客导航-网站首页', '/admin/blog_nav/ajaxSaveNav.html', 'a:7:{s:5:\"level\";i:1;s:8:\"nav_name\";s:12:\"网站首页\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/index.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542965411;}', '2130706433', '1542965411');
INSERT INTO `zgw_admin_action_log` VALUES ('97', '1', '添加博客导航-关于我', '/admin/blog_nav/ajaxSaveNav.html', 'a:8:{s:5:\"level\";i:1;s:8:\"nav_name\";s:9:\"关于我\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/about.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542965482;s:11:\"create_time\";i:1542965482;}', '2130706433', '1542965483');
INSERT INTO `zgw_admin_action_log` VALUES ('98', '1', '添加博客导航-模板分享', '/admin/blog_nav/ajaxSaveNav.html', 'a:8:{s:5:\"level\";i:1;s:8:\"nav_name\";s:12:\"模板分享\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/share.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542965503;s:11:\"create_time\";i:1542965503;}', '2130706433', '1542965503');
INSERT INTO `zgw_admin_action_log` VALUES ('99', '1', '添加博客导航-博客日志', '/admin/blog_nav/ajaxSaveNav.html', 'a:8:{s:5:\"level\";i:1;s:8:\"nav_name\";s:12:\"博客日志\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/lists.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542965528;s:11:\"create_time\";i:1542965528;}', '2130706433', '1542965528');
INSERT INTO `zgw_admin_action_log` VALUES ('100', '1', '添加博客导航-学无止境', '/admin/blog_nav/ajaxSaveNav.html', 'a:8:{s:5:\"level\";i:1;s:8:\"nav_name\";s:12:\"学无止境\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:47:\"http://www.myblog.com/blog/index/knowledge.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542965550;s:11:\"create_time\";i:1542965550;}', '2130706433', '1542965550');
INSERT INTO `zgw_admin_action_log` VALUES ('101', '1', '添加博客导航-慢生活', '/admin/blog_nav/ajaxSaveNav.html', 'a:8:{s:5:\"level\";i:2;s:8:\"nav_name\";s:9:\"慢生活\";s:3:\"pid\";i:5;s:7:\"nav_url\";s:47:\"http://www.myblog.com/blog/index/knowledge.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542965570;s:11:\"create_time\";i:1542965570;}', '2130706433', '1542965570');
INSERT INTO `zgw_admin_action_log` VALUES ('102', '1', '添加博客导航-美文欣赏', '/admin/blog_nav/ajaxSaveNav.html', 'a:8:{s:5:\"level\";i:3;s:8:\"nav_name\";s:12:\"美文欣赏\";s:3:\"pid\";i:6;s:7:\"nav_url\";s:47:\"http://www.myblog.com/blog/index/knowledge.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542965586;s:11:\"create_time\";i:1542965586;}', '2130706433', '1542965586');
INSERT INTO `zgw_admin_action_log` VALUES ('103', '1', '编辑博客导航-慢生活', '/admin/blog_nav/ajaxSaveNav.html', 'a:7:{s:5:\"level\";i:2;s:8:\"nav_name\";s:9:\"慢生活\";s:3:\"pid\";i:5;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/infos.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542965646;}', '2130706433', '1542965646');
INSERT INTO `zgw_admin_action_log` VALUES ('104', '1', '添加博客导航-时间轴', '/admin/blog_nav/ajaxSaveNav.html', 'a:8:{s:5:\"level\";i:1;s:8:\"nav_name\";s:9:\"时间轴\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/times.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542965663;s:11:\"create_time\";i:1542965663;}', '2130706433', '1542965663');
INSERT INTO `zgw_admin_action_log` VALUES ('105', '1', '编辑博客导航-网站首页', '/admin/blog_nav/ajaxSaveNav.html', 'a:7:{s:5:\"level\";i:1;s:8:\"nav_name\";s:12:\"网站首页\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/index.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542965686;}', '2130706433', '1542965686');
INSERT INTO `zgw_admin_action_log` VALUES ('106', '1', '博客导航左侧不显示-时间轴', '/admin/blog_nav/ajaxUpdateNavStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1542965977;}', '2130706433', '1542965977');
INSERT INTO `zgw_admin_action_log` VALUES ('107', '1', '删除博客导航-时间轴', '/admin/blog_nav/ajaxDeleteNav.html', 'a:1:{s:6:\"nav_id\";i:8;}', '2130706433', '1542966031');
INSERT INTO `zgw_admin_action_log` VALUES ('108', '1', '添加博客导航-时间轴', '/admin/blog_nav/ajaxSaveNav.html', 'a:8:{s:5:\"level\";i:1;s:8:\"nav_name\";s:9:\"时间轴\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/times.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1542966049;s:11:\"create_time\";i:1542966049;}', '2130706433', '1542966049');
INSERT INTO `zgw_admin_action_log` VALUES ('109', '1', '编辑博客导航-网站首页', '/admin/blog_nav/ajaxSaveNav.html', 'a:7:{s:5:\"level\";i:1;s:8:\"nav_name\";s:12:\"网站首页\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/index.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:1;s:11:\"update_time\";i:1542966765;}', '2130706433', '1542966765');
INSERT INTO `zgw_admin_action_log` VALUES ('110', '1', '编辑博客导航-关于我', '/admin/blog_nav/ajaxSaveNav.html', 'a:7:{s:5:\"level\";i:1;s:8:\"nav_name\";s:9:\"关于我\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/about.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:2;s:11:\"update_time\";i:1542966773;}', '2130706433', '1542966773');
INSERT INTO `zgw_admin_action_log` VALUES ('111', '1', '编辑博客导航-模板分享', '/admin/blog_nav/ajaxSaveNav.html', 'a:7:{s:5:\"level\";i:1;s:8:\"nav_name\";s:12:\"模板分享\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/share.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:3;s:11:\"update_time\";i:1542966785;}', '2130706433', '1542966785');
INSERT INTO `zgw_admin_action_log` VALUES ('112', '1', '编辑博客导航-博客日志', '/admin/blog_nav/ajaxSaveNav.html', 'a:7:{s:5:\"level\";i:1;s:8:\"nav_name\";s:12:\"博客日志\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/lists.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:4;s:11:\"update_time\";i:1542966791;}', '2130706433', '1542966791');
INSERT INTO `zgw_admin_action_log` VALUES ('113', '1', '编辑博客导航-学无止境', '/admin/blog_nav/ajaxSaveNav.html', 'a:7:{s:5:\"level\";i:1;s:8:\"nav_name\";s:12:\"学无止境\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:47:\"http://www.myblog.com/blog/index/knowledge.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:5;s:11:\"update_time\";i:1542966797;}', '2130706433', '1542966797');
INSERT INTO `zgw_admin_action_log` VALUES ('114', '1', '编辑博客导航-时间轴', '/admin/blog_nav/ajaxSaveNav.html', 'a:7:{s:5:\"level\";i:1;s:8:\"nav_name\";s:9:\"时间轴\";s:3:\"pid\";i:0;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/times.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:6;s:11:\"update_time\";i:1542966806;}', '2130706433', '1542966806');
INSERT INTO `zgw_admin_action_log` VALUES ('115', '1', '编辑博客导航-慢生活', '/admin/blog_nav/ajaxSaveNav.html', 'a:7:{s:5:\"level\";i:2;s:8:\"nav_name\";s:9:\"慢生活\";s:3:\"pid\";i:5;s:7:\"nav_url\";s:43:\"http://www.myblog.com/blog/index/infos.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:1;s:11:\"update_time\";i:1542966815;}', '2130706433', '1542966815');
INSERT INTO `zgw_admin_action_log` VALUES ('116', '1', '编辑博客导航-美文欣赏', '/admin/blog_nav/ajaxSaveNav.html', 'a:7:{s:5:\"level\";i:2;s:8:\"nav_name\";s:12:\"美文欣赏\";s:3:\"pid\";i:5;s:7:\"nav_url\";s:47:\"http://www.myblog.com/blog/index/knowledge.html\";s:6:\"status\";i:1;s:10:\"list_order\";i:2;s:11:\"update_time\";i:1542966821;}', '2130706433', '1542966821');
INSERT INTO `zgw_admin_action_log` VALUES ('117', '1', '登录管理后台', '/admin/common/login.html', '', '2130706433', '1543194296');
INSERT INTO `zgw_admin_action_log` VALUES ('118', '1', '添加权限节点-博客分类', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:2;s:9:\"rule_name\";s:12:\"博客分类\";s:3:\"pid\";i:17;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:13:\"blog_category\";s:6:\"action\";s:13:\"categoryindex\";s:6:\"status\";i:1;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543194631;s:11:\"create_time\";i:1543194631;}', '2130706433', '1543194631');
INSERT INTO `zgw_admin_action_log` VALUES ('119', '1', '添加权限节点-编辑分类', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:3;s:9:\"rule_name\";s:12:\"编辑分类\";s:3:\"pid\";i:24;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:13:\"blog_category\";s:6:\"action\";s:12:\"categoryedit\";s:6:\"status\";i:0;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543194740;s:11:\"create_time\";i:1543194740;}', '2130706433', '1543194740');
INSERT INTO `zgw_admin_action_log` VALUES ('120', '1', '添加权限节点-删除分类', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:3;s:9:\"rule_name\";s:12:\"删除分类\";s:3:\"pid\";i:24;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:13:\"blog_category\";s:6:\"action\";s:18:\"ajaxdeletecategory\";s:6:\"status\";i:0;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543194788;s:11:\"create_time\";i:1543194788;}', '2130706433', '1543194788');
INSERT INTO `zgw_admin_action_log` VALUES ('121', '1', '角色分配权限-超级管理员', '/admin/admin_role/roleAuthAccess.html', 'a:24:{i:0;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"3\";}i:2;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"4\";}i:3;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"6\";}i:4;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"15\";}i:5;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"7\";}i:6;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"8\";}i:7;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"9\";}i:8;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"10\";}i:9;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"11\";}i:10;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"12\";}i:11;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"13\";}i:12;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"14\";}i:13;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"22\";}i:14;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"17\";}i:15;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"18\";}i:16;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"19\";}i:17;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"20\";}i:18;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"21\";}i:19;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"23\";}i:20;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"24\";}i:21;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"25\";}i:22;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"26\";}i:23;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"27\";}}', '2130706433', '1543194796');
INSERT INTO `zgw_admin_action_log` VALUES ('122', '1', '添加博客分类-PHP', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:1;s:13:\"category_name\";s:3:\"PHP\";s:3:\"pid\";i:0;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196155;s:11:\"create_time\";i:1543196155;}', '2130706433', '1543196155');
INSERT INTO `zgw_admin_action_log` VALUES ('123', '1', '添加博客分类-前端', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:1;s:13:\"category_name\";s:6:\"前端\";s:3:\"pid\";i:0;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196230;s:11:\"create_time\";i:1543196230;}', '2130706433', '1543196230');
INSERT INTO `zgw_admin_action_log` VALUES ('124', '1', '添加博客分类-Html5+CSS3', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:2;s:13:\"category_name\";s:10:\"Html5+CSS3\";s:3:\"pid\";i:2;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196249;s:11:\"create_time\";i:1543196249;}', '2130706433', '1543196249');
INSERT INTO `zgw_admin_action_log` VALUES ('125', '1', '添加博客分类-jquery+javascript', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:2;s:13:\"category_name\";s:17:\"jquery+javascript\";s:3:\"pid\";i:2;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196261;s:11:\"create_time\";i:1543196261;}', '2130706433', '1543196261');
INSERT INTO `zgw_admin_action_log` VALUES ('126', '1', '添加博客分类-Web', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:2;s:13:\"category_name\";s:3:\"Web\";s:3:\"pid\";i:2;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196277;s:11:\"create_time\";i:1543196277;}', '2130706433', '1543196277');
INSERT INTO `zgw_admin_action_log` VALUES ('127', '1', '添加博客分类-服务器', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:1;s:13:\"category_name\";s:9:\"服务器\";s:3:\"pid\";i:0;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196290;s:11:\"create_time\";i:1543196290;}', '2130706433', '1543196290');
INSERT INTO `zgw_admin_action_log` VALUES ('128', '1', '添加博客分类-Shell', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:2;s:13:\"category_name\";s:5:\"Shell\";s:3:\"pid\";i:6;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196305;s:11:\"create_time\";i:1543196305;}', '2130706433', '1543196305');
INSERT INTO `zgw_admin_action_log` VALUES ('129', '1', '添加博客分类-Linux', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:2;s:13:\"category_name\";s:5:\"Linux\";s:3:\"pid\";i:6;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196317;s:11:\"create_time\";i:1543196317;}', '2130706433', '1543196317');
INSERT INTO `zgw_admin_action_log` VALUES ('130', '1', '添加博客分类-数据库', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:1;s:13:\"category_name\";s:9:\"数据库\";s:3:\"pid\";i:0;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196333;s:11:\"create_time\";i:1543196333;}', '2130706433', '1543196333');
INSERT INTO `zgw_admin_action_log` VALUES ('131', '1', '添加博客分类-MySQL', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:2;s:13:\"category_name\";s:5:\"MySQL\";s:3:\"pid\";i:9;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196347;s:11:\"create_time\";i:1543196347;}', '2130706433', '1543196347');
INSERT INTO `zgw_admin_action_log` VALUES ('132', '1', '添加博客分类-Nginx', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:2;s:13:\"category_name\";s:5:\"Nginx\";s:3:\"pid\";i:6;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196391;s:11:\"create_time\";i:1543196391;}', '2130706433', '1543196391');
INSERT INTO `zgw_admin_action_log` VALUES ('133', '1', '添加博客分类-Apache', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:2;s:13:\"category_name\";s:6:\"Apache\";s:3:\"pid\";i:6;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196399;s:11:\"create_time\";i:1543196399;}', '2130706433', '1543196399');
INSERT INTO `zgw_admin_action_log` VALUES ('134', '1', '添加博客分类-NoSql', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:2;s:13:\"category_name\";s:5:\"NoSql\";s:3:\"pid\";i:9;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196409;s:11:\"create_time\";i:1543196409;}', '2130706433', '1543196409');
INSERT INTO `zgw_admin_action_log` VALUES ('135', '1', '编辑博客分类-PHP', '/admin/blog_category/ajaxSaveCategory.html', 'a:6:{s:5:\"level\";i:1;s:13:\"category_name\";s:3:\"PHP\";s:3:\"pid\";i:0;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196518;}', '2130706433', '1543196519');
INSERT INTO `zgw_admin_action_log` VALUES ('136', '1', '删除博客分类-NoSql', '/admin/blog_category/ajaxDeleteCategory.html', 'a:1:{s:11:\"category_id\";i:13;}', '2130706433', '1543196946');
INSERT INTO `zgw_admin_action_log` VALUES ('137', '1', '添加博客分类-NoSql', '/admin/blog_category/ajaxSaveCategory.html', 'a:7:{s:5:\"level\";i:2;s:13:\"category_name\";s:5:\"NoSql\";s:3:\"pid\";i:9;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543196958;s:11:\"create_time\";i:1543196958;}', '2130706433', '1543196958');
INSERT INTO `zgw_admin_action_log` VALUES ('138', '1', '添加权限节点-博文管理', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:2;s:9:\"rule_name\";s:12:\"博文管理\";s:3:\"pid\";i:17;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:9:\"blog_blog\";s:6:\"action\";s:9:\"blogindex\";s:6:\"status\";i:1;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543198845;s:11:\"create_time\";i:1543198845;}', '2130706433', '1543198845');
INSERT INTO `zgw_admin_action_log` VALUES ('139', '1', '添加权限节点-添加博文', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:3;s:9:\"rule_name\";s:12:\"添加博文\";s:3:\"pid\";i:28;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:9:\"blog_blog\";s:6:\"action\";s:7:\"blogadd\";s:6:\"status\";i:0;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543198874;s:11:\"create_time\";i:1543198874;}', '2130706433', '1543198874');
INSERT INTO `zgw_admin_action_log` VALUES ('140', '1', '添加权限节点-编辑博文', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:3;s:9:\"rule_name\";s:12:\"编辑博文\";s:3:\"pid\";i:28;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:9:\"blog_blog\";s:6:\"action\";s:8:\"blogedit\";s:6:\"status\";i:0;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543198898;s:11:\"create_time\";i:1543198898;}', '2130706433', '1543198898');
INSERT INTO `zgw_admin_action_log` VALUES ('141', '1', '添加权限节点-禁用博文', '/admin/admin_rule/ajaxSaveRule.html', 'a:11:{s:5:\"level\";i:3;s:9:\"rule_name\";s:12:\"禁用博文\";s:3:\"pid\";i:28;s:6:\"module\";s:5:\"admin\";s:10:\"controller\";s:9:\"blog_blog\";s:6:\"action\";s:20:\"ajaxupdateblogstatus\";s:6:\"status\";i:0;s:4:\"icon\";s:0:\"\";s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543198954;s:11:\"create_time\";i:1543198954;}', '2130706433', '1543198954');
INSERT INTO `zgw_admin_action_log` VALUES ('142', '1', '角色分配权限-超级管理员', '/admin/admin_role/roleAuthAccess.html', 'a:28:{i:0;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"2\";}i:1;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"3\";}i:2;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"4\";}i:3;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"6\";}i:4;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"15\";}i:5;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"7\";}i:6;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"8\";}i:7;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:1:\"9\";}i:8;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"10\";}i:9;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"11\";}i:10;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"12\";}i:11;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"13\";}i:12;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"14\";}i:13;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"22\";}i:14;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"17\";}i:15;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"18\";}i:16;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"19\";}i:17;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"20\";}i:18;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"21\";}i:19;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"23\";}i:20;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"24\";}i:21;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"25\";}i:22;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"26\";}i:23;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"27\";}i:24;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"28\";}i:25;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"29\";}i:26;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"30\";}i:27;a:2:{s:7:\"role_id\";i:1;s:7:\"rule_id\";s:2:\"31\";}}', '2130706433', '1543198964');
INSERT INTO `zgw_admin_action_log` VALUES ('143', '1', '角色分配权限-系统管理员', '/admin/admin_role/roleAuthAccess.html', 'a:0:{}', '2130706433', '1543217400');
INSERT INTO `zgw_admin_action_log` VALUES ('144', '1', '停用角色-系统管理员', '/admin/admin_role/ajaxUpdateRoleStatus.html', 'a:2:{s:6:\"status\";i:0;s:11:\"update_time\";i:1543217405;}', '2130706433', '1543217405');
INSERT INTO `zgw_admin_action_log` VALUES ('145', '1', '添加博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:16:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:0:\"\";s:16:\"blog_description\";s:0:\"\";s:10:\"blog_thumb\";s:0:\"\";s:11:\"blog_detail\";s:0:\"\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:0;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:0;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543222188;s:11:\"create_time\";i:1543222188;}', '2130706433', '1543222188');
INSERT INTO `zgw_admin_action_log` VALUES ('146', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:0:\"\";s:16:\"blog_description\";s:0:\"\";s:10:\"blog_thumb\";s:0:\"\";s:11:\"blog_detail\";s:0:\"\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:0:\"\";s:8:\"is_index\";i:0;s:10:\"index_sort\";i:0;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:0;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543222661;}', '2130706433', '1543222661');
INSERT INTO `zgw_admin_action_log` VALUES ('147', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:0:\"\";s:16:\"blog_description\";s:0:\"\";s:10:\"blog_thumb\";s:0:\"\";s:11:\"blog_detail\";s:0:\"\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:0:\"\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543222809;}', '2130706433', '1543222809');
INSERT INTO `zgw_admin_action_log` VALUES ('148', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:0:\"\";s:16:\"blog_description\";s:0:\"\";s:10:\"blog_thumb\";s:0:\"\";s:11:\"blog_detail\";s:0:\"\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543222972;}', '2130706433', '1543222972');
INSERT INTO `zgw_admin_action_log` VALUES ('149', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:0:\"\";s:16:\"blog_description\";s:0:\"\";s:10:\"blog_thumb\";s:0:\"\";s:11:\"blog_detail\";s:0:\"\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543222983;}', '2130706433', '1543222983');
INSERT INTO `zgw_admin_action_log` VALUES ('150', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:0:\"\";s:10:\"blog_thumb\";s:0:\"\";s:11:\"blog_detail\";s:0:\"\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543223093;}', '2130706433', '1543223093');
INSERT INTO `zgw_admin_action_log` VALUES ('151', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:0:\"\";s:11:\"blog_detail\";s:0:\"\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543223146;}', '2130706433', '1543223146');
INSERT INTO `zgw_admin_action_log` VALUES ('152', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:0:\"\";s:11:\"blog_detail\";s:0:\"\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543223157;}', '2130706433', '1543223157');
INSERT INTO `zgw_admin_action_log` VALUES ('153', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg\";s:11:\"blog_detail\";s:0:\"\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543223176;}', '2130706433', '1543223176');
INSERT INTO `zgw_admin_action_log` VALUES ('154', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg\";s:11:\"blog_detail\";s:0:\"\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543223190;}', '2130706433', '1543223190');
INSERT INTO `zgw_admin_action_log` VALUES ('155', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg\";s:11:\"blog_detail\";s:0:\"\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543223242;}', '2130706433', '1543223242');
INSERT INTO `zgw_admin_action_log` VALUES ('156', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg\";s:11:\"blog_detail\";s:2899:\"<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	本来是在写设计模式文章的；<br />\n想着把3中工厂模式一起写了；<br />\n结果眼瞅着又到凌晨了；<br />\n现在都该保温杯+枸杞养生了；<br />\n还是别熬夜太晚了；<br />\n但是如果不把我定的每周一篇文章的任务完成；<br />\n还怎么实现我1个亿的小目标；<br />\n于是赶紧凑了篇linux的小技巧；\n</p>\n<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	使用云主机的时候默认的主机名都比较长；<br />\n阿里的尤为长；<br />\n作为一个有强迫症的人来说；<br />\nbash 这么长的地方都被这乱七八糟的字符占着很难受；<br />\n<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"></a>\n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" />\n	<div class=\"fluidbox__ghost\">\n	</div>\n</a>\n</div>\n<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	所以这篇文章就是来修改主机名的；<br />\n之前是要修改 /etc/sysconfig/network 的；<br />\n现在可以直接一条命令搞定；<br />\n我这是是要把主机名修改为 bjy ;\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n<pre class=\"line-numbers language-bash\">hostnamectl set-hostname bjy<span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span>\n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a>\n		</div>\n	</div>\n</div>\n<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	记得退出 ssh 重新登录后生效哈；<br />\n相当方便；<br />\n<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"></a>\n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" />\n	<div class=\"fluidbox__ghost\">\n	</div>\n</a>\n</div>\n<br />\n瞬间清爽了吧；\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543223455;}', '2130706433', '1543223455');
INSERT INTO `zgw_admin_action_log` VALUES ('157', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg\";s:11:\"blog_detail\";s:2924:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	本来是在写设计模式文章的；<br />\n想着把3中工厂模式一起写了；<br />\n结果眼瞅着又到凌晨了；<br />\n现在都该保温杯+枸杞养生了；<br />\n还是别熬夜太晚了；<br />\n但是如果不把我定的每周一篇文章的任务完成；<br />\n还怎么实现我1个亿的小目标；<br />\n于是赶紧凑了篇linux的小技巧；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	使用云主机的时候默认的主机名都比较长；<br />\n阿里的尤为长；<br />\n作为一个有强迫症的人来说；<br />\nbash 这么长的地方都被这乱七八糟的字符占着很难受；<br />\n<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"></a> \n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n	<div class=\"fluidbox__ghost\">\n	</div>\n</a> \n</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	所以这篇文章就是来修改主机名的；<br />\n之前是要修改 /etc/sysconfig/network 的；<br />\n现在可以直接一条命令搞定；<br />\n我这是是要把主机名修改为 bjy ;\n	</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">hostnamectl set-hostname bjy<span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a> \n		</div>\n	</div>\n		</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	记得退出 ssh 重新登录后生效哈；<br />\n相当方便；<br />\n<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"></a> \n			</p>\n			<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n				<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n				<div class=\"fluidbox__ghost\">\n				</div>\n</a> \n			</div>\n<br />\n瞬间清爽了吧；\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543223473;}', '2130706433', '1543223473');
INSERT INTO `zgw_admin_action_log` VALUES ('158', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg\";s:11:\"blog_detail\";s:2924:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	本来是在写设计模式文章的；<br />\n想着把3中工厂模式一起写了；<br />\n结果眼瞅着又到凌晨了；<br />\n现在都该保温杯+枸杞养生了；<br />\n还是别熬夜太晚了；<br />\n但是如果不把我定的每周一篇文章的任务完成；<br />\n还怎么实现我1个亿的小目标；<br />\n于是赶紧凑了篇linux的小技巧；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	使用云主机的时候默认的主机名都比较长；<br />\n阿里的尤为长；<br />\n作为一个有强迫症的人来说；<br />\nbash 这么长的地方都被这乱七八糟的字符占着很难受；<br />\n<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"></a> \n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n	<div class=\"fluidbox__ghost\">\n	</div>\n</a> \n</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	所以这篇文章就是来修改主机名的；<br />\n之前是要修改 /etc/sysconfig/network 的；<br />\n现在可以直接一条命令搞定；<br />\n我这是是要把主机名修改为 bjy ;\n	</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">hostnamectl set-hostname bjy<span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a> \n		</div>\n	</div>\n		</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	记得退出 ssh 重新登录后生效哈；<br />\n相当方便；<br />\n<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"></a> \n			</p>\n			<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n				<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n				<div class=\"fluidbox__ghost\">\n				</div>\n</a> \n			</div>\n<br />\n瞬间清爽了吧；\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543223752;}', '2130706433', '1543223752');
INSERT INTO `zgw_admin_action_log` VALUES ('159', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg\";s:11:\"blog_detail\";s:2924:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	本来是在写设计模式文章的；<br />\n想着把3中工厂模式一起写了；<br />\n结果眼瞅着又到凌晨了；<br />\n现在都该保温杯+枸杞养生了；<br />\n还是别熬夜太晚了；<br />\n但是如果不把我定的每周一篇文章的任务完成；<br />\n还怎么实现我1个亿的小目标；<br />\n于是赶紧凑了篇linux的小技巧；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	使用云主机的时候默认的主机名都比较长；<br />\n阿里的尤为长；<br />\n作为一个有强迫症的人来说；<br />\nbash 这么长的地方都被这乱七八糟的字符占着很难受；<br />\n<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"></a> \n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n	<div class=\"fluidbox__ghost\">\n	</div>\n</a> \n</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	所以这篇文章就是来修改主机名的；<br />\n之前是要修改 /etc/sysconfig/network 的；<br />\n现在可以直接一条命令搞定；<br />\n我这是是要把主机名修改为 bjy ;\n	</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">hostnamectl set-hostname bjy<span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a> \n		</div>\n	</div>\n		</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	记得退出 ssh 重新登录后生效哈；<br />\n相当方便；<br />\n<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"></a> \n			</p>\n			<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n				<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n				<div class=\"fluidbox__ghost\">\n				</div>\n</a> \n			</div>\n<br />\n瞬间清爽了吧；\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543224006;}', '2130706433', '1543224006');
INSERT INTO `zgw_admin_action_log` VALUES ('160', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg\";s:11:\"blog_detail\";s:2924:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	本来是在写设计模式文章的；<br />\n想着把3中工厂模式一起写了；<br />\n结果眼瞅着又到凌晨了；<br />\n现在都该保温杯+枸杞养生了；<br />\n还是别熬夜太晚了；<br />\n但是如果不把我定的每周一篇文章的任务完成；<br />\n还怎么实现我1个亿的小目标；<br />\n于是赶紧凑了篇linux的小技巧；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	使用云主机的时候默认的主机名都比较长；<br />\n阿里的尤为长；<br />\n作为一个有强迫症的人来说；<br />\nbash 这么长的地方都被这乱七八糟的字符占着很难受；<br />\n<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"></a> \n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n	<div class=\"fluidbox__ghost\">\n	</div>\n</a> \n</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	所以这篇文章就是来修改主机名的；<br />\n之前是要修改 /etc/sysconfig/network 的；<br />\n现在可以直接一条命令搞定；<br />\n我这是是要把主机名修改为 bjy ;\n	</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">hostnamectl set-hostname bjy<span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a> \n		</div>\n	</div>\n		</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	记得退出 ssh 重新登录后生效哈；<br />\n相当方便；<br />\n<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"></a> \n			</p>\n			<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n				<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n				<div class=\"fluidbox__ghost\">\n				</div>\n</a> \n			</div>\n<br />\n瞬间清爽了吧；\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543224712;}', '2130706433', '1543224712');
INSERT INTO `zgw_admin_action_log` VALUES ('161', '1', '添加博文-linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录', '/admin/blog_blog/ajaxSaveBlog.html', 'a:16:{s:11:\"category_id\";i:7;s:10:\"blog_title\";s:73:\"linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录\";s:13:\"blog_keywords\";s:28:\"linux查看,配置项,目录\";s:16:\"blog_description\";s:372:\"很多时候会登录一台陌生的服务器；当需要调整环境的时候；那真是起步啥都没有；装备全靠打；两眼一抹黑到处找配置项；还好我这记的有一份笔记；可以先总结下；大都是先用 which 获取目录；然后再获取配置项位置；```bashwhich  mysql/usr/bin/mysql/usr/bin/mysql help | grep A1 &#039;Default ...\";s:10:\"blog_thumb\";s:0:\"\";s:11:\"blog_detail\";s:8869:\"<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	很多时候会登录一台陌生的服务器；<br />\n当需要调整环境的时候；<br />\n那真是起步啥都没有；装备全靠打；<br />\n两眼一抹黑到处找配置项；<br />\n还好我这记的有一份笔记；\n</p>\n<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	可以先总结下；<br />\n大都是先用 which 获取目录；<br />\n然后再获取配置项位置；\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> mysql\n/usr/bin/mysql\n/usr/bin/mysql --help <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> -A1 <span class=\"token string\" style=\"color:#A6E22E;\">\'Default options\'</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span>\n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a>\n		</div>\n	</div>\n</div>\n<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"></a>\n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" />\n	<div class=\"fluidbox__ghost\">\n	</div>\n</a>\n</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> php\n/usr/local/apache2/php/bin/php\n/usr/local/apache2/php/bin/php -i <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\"Loaded Configuration File\"</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span>\n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a>\n		</div>\n	</div>\n</div>\n<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"></a>\n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" />\n	<div class=\"fluidbox__ghost\">\n	</div>\n</a>\n</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'http\'</span> /usr/local/apache2/bin/httpd -V <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'SERVER_CONFIG_FILE\'</span><span class=\"line-numbers-rows\"><span></span><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span>\n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a>\n		</div>\n	</div>\n</div>\n<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	拼起来就是： /usr/local/apache2/conf/httpd.conf<br />\n<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"></a>\n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" />\n	<div class=\"fluidbox__ghost\">\n	</div>\n</a>\n</div>\n<br />\n<a class=\"js-fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\">\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<img src=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" />\n	<div class=\"fluidbox__ghost\">\n	</div>\n</div>\n</a>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'nginx\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span>\n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a>\n		</div>\n	</div>\n</div>\n<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	<a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"></a>\n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" />\n	<div class=\"fluidbox__ghost\">\n	</div>\n</a>\n</div>\n<br />\n如果没有 那就根据上图中的nginx位置执行\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n<pre class=\"line-numbers language-bash\">/www/server/nginx/sbin/nginx -t<span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span>\n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a>\n		</div>\n	</div>\n</div>\n<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	nginx和配置项的目录全有了；\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'php-fpm\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span>\n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a>\n		</div>\n	</div>\n</div>\n<p style=\"color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">\n	<a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"></a>\n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" />\n	<div class=\"fluidbox__ghost\">\n	</div>\n</a>\n</div>\n<br />\n配置项文件路径一眼就看到了；\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:0:\"\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:0;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:0;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543224791;s:11:\"create_time\";i:1543224791;}', '2130706433', '1543224791');
INSERT INTO `zgw_admin_action_log` VALUES ('162', '1', '编辑博文-linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:7;s:10:\"blog_title\";s:73:\"linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录\";s:13:\"blog_keywords\";s:28:\"linux查看,配置项,目录\";s:16:\"blog_description\";s:367:\"很多时候会登录一台陌生的服务器；当需要调整环境的时候；那真是起步啥都没有；装备全靠打；两眼一抹黑到处找配置项；还好我这记的有一份笔记；可以先总结下；大都是先用 which 获取目录；然后再获取配置项位置；```bashwhich  mysql/usr/bin/mysql/usr/bin/mysql help | grep A1 \'Default ...\";s:10:\"blog_thumb\";s:0:\"\";s:11:\"blog_detail\";s:9341:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	很多时候会登录一台陌生的服务器；<br />\n当需要调整环境的时候；<br />\n那真是起步啥都没有；装备全靠打；<br />\n两眼一抹黑到处找配置项；<br />\n还好我这记的有一份笔记；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	可以先总结下；<br />\n大都是先用 which 获取目录；<br />\n然后再获取配置项位置；\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> mysql\n/usr/bin/mysql\n/usr/bin/mysql --help <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> -A1 <span class=\"token string\" style=\"color:#A6E22E;\">\'Default options\'</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n<div class=\"toolbar\">\n	<div class=\"toolbar-item\">\n		<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n	</div>\n	<div class=\"toolbar-item\">\n		<a>Copy</a> \n	</div>\n</div>\n	</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"></a> \n		</p>\n		<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n			<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n			<div class=\"fluidbox__ghost\">\n			</div>\n</a> \n		</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> php\n/usr/local/apache2/php/bin/php\n/usr/local/apache2/php/bin/php -i <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\"Loaded Configuration File\"</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n		<div class=\"toolbar\">\n			<div class=\"toolbar-item\">\n				<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n			</div>\n			<div class=\"toolbar-item\">\n				<a>Copy</a> \n			</div>\n		</div>\n			</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"></a> \n				</p>\n				<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n					<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n					<div class=\"fluidbox__ghost\">\n					</div>\n</a> \n				</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'http\'</span> /usr/local/apache2/bin/httpd -V <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'SERVER_CONFIG_FILE\'</span><span class=\"line-numbers-rows\"><span></span><span></span></span></pre>\n				<div class=\"toolbar\">\n					<div class=\"toolbar-item\">\n						<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n					</div>\n					<div class=\"toolbar-item\">\n						<a>Copy</a> \n					</div>\n				</div>\n					</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	拼起来就是： /usr/local/apache2/conf/httpd.conf<br />\n<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"></a> \n						</p>\n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n</a> \n						</div>\n<br />\n<a class=\"js-fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\"> \n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<img src=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n						</div>\n</a> <div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'nginx\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n						<div class=\"toolbar\">\n							<div class=\"toolbar-item\">\n								<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n							</div>\n							<div class=\"toolbar-item\">\n								<a>Copy</a> \n							</div>\n						</div>\n							</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"></a> \n								</p>\n								<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n									<a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n									<div class=\"fluidbox__ghost\">\n									</div>\n</a> \n								</div>\n<br />\n如果没有 那就根据上图中的nginx位置执行\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">/www/server/nginx/sbin/nginx -t<span class=\"line-numbers-rows\"><span></span></span></pre>\n								<div class=\"toolbar\">\n									<div class=\"toolbar-item\">\n										<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n									</div>\n									<div class=\"toolbar-item\">\n										<a>Copy</a> \n									</div>\n								</div>\n									</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	nginx和配置项的目录全有了；\n										</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'php-fpm\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n										<div class=\"toolbar\">\n											<div class=\"toolbar-item\">\n												<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n											</div>\n											<div class=\"toolbar-item\">\n												<a>Copy</a> \n											</div>\n										</div>\n											</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"></a> \n												</p>\n												<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n													<a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n													<div class=\"fluidbox__ghost\">\n													</div>\n</a> \n												</div>\n<br />\n配置项文件路径一眼就看到了；\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:0:\"\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:0;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:0;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543224852;}', '2130706433', '1543224853');
INSERT INTO `zgw_admin_action_log` VALUES ('163', '1', '编辑博文-linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:7;s:10:\"blog_title\";s:73:\"linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录\";s:13:\"blog_keywords\";s:28:\"linux查看,配置项,目录\";s:16:\"blog_description\";s:367:\"很多时候会登录一台陌生的服务器；当需要调整环境的时候；那真是起步啥都没有；装备全靠打；两眼一抹黑到处找配置项；还好我这记的有一份笔记；可以先总结下；大都是先用 which 获取目录；然后再获取配置项位置；```bashwhich  mysql/usr/bin/mysql/usr/bin/mysql help | grep A1 \'Default ...\";s:10:\"blog_thumb\";s:0:\"\";s:11:\"blog_detail\";s:9341:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	很多时候会登录一台陌生的服务器；<br />\n当需要调整环境的时候；<br />\n那真是起步啥都没有；装备全靠打；<br />\n两眼一抹黑到处找配置项；<br />\n还好我这记的有一份笔记；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	可以先总结下；<br />\n大都是先用 which 获取目录；<br />\n然后再获取配置项位置；\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> mysql\n/usr/bin/mysql\n/usr/bin/mysql --help <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> -A1 <span class=\"token string\" style=\"color:#A6E22E;\">\'Default options\'</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n<div class=\"toolbar\">\n	<div class=\"toolbar-item\">\n		<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n	</div>\n	<div class=\"toolbar-item\">\n		<a>Copy</a> \n	</div>\n</div>\n	</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"></a> \n		</p>\n		<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n			<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n			<div class=\"fluidbox__ghost\">\n			</div>\n</a> \n		</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> php\n/usr/local/apache2/php/bin/php\n/usr/local/apache2/php/bin/php -i <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\"Loaded Configuration File\"</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n		<div class=\"toolbar\">\n			<div class=\"toolbar-item\">\n				<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n			</div>\n			<div class=\"toolbar-item\">\n				<a>Copy</a> \n			</div>\n		</div>\n			</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"></a> \n				</p>\n				<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n					<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n					<div class=\"fluidbox__ghost\">\n					</div>\n</a> \n				</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'http\'</span> /usr/local/apache2/bin/httpd -V <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'SERVER_CONFIG_FILE\'</span><span class=\"line-numbers-rows\"><span></span><span></span></span></pre>\n				<div class=\"toolbar\">\n					<div class=\"toolbar-item\">\n						<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n					</div>\n					<div class=\"toolbar-item\">\n						<a>Copy</a> \n					</div>\n				</div>\n					</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	拼起来就是： /usr/local/apache2/conf/httpd.conf<br />\n<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"></a> \n						</p>\n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n</a> \n						</div>\n<br />\n<a class=\"js-fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\"> \n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<img src=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n						</div>\n</a> <div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'nginx\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n						<div class=\"toolbar\">\n							<div class=\"toolbar-item\">\n								<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n							</div>\n							<div class=\"toolbar-item\">\n								<a>Copy</a> \n							</div>\n						</div>\n							</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"></a> \n								</p>\n								<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n									<a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n									<div class=\"fluidbox__ghost\">\n									</div>\n</a> \n								</div>\n<br />\n如果没有 那就根据上图中的nginx位置执行\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">/www/server/nginx/sbin/nginx -t<span class=\"line-numbers-rows\"><span></span></span></pre>\n								<div class=\"toolbar\">\n									<div class=\"toolbar-item\">\n										<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n									</div>\n									<div class=\"toolbar-item\">\n										<a>Copy</a> \n									</div>\n								</div>\n									</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	nginx和配置项的目录全有了；\n										</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'php-fpm\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n										<div class=\"toolbar\">\n											<div class=\"toolbar-item\">\n												<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n											</div>\n											<div class=\"toolbar-item\">\n												<a>Copy</a> \n											</div>\n										</div>\n											</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"></a> \n												</p>\n												<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n													<a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n													<div class=\"fluidbox__ghost\">\n													</div>\n</a> \n												</div>\n<br />\n配置项文件路径一眼就看到了；\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:0:\"\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:0;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:0;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543224864;}', '2130706433', '1543224864');
INSERT INTO `zgw_admin_action_log` VALUES ('164', '1', '编辑博文-linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:7;s:10:\"blog_title\";s:73:\"linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录\";s:13:\"blog_keywords\";s:28:\"linux查看,配置项,目录\";s:16:\"blog_description\";s:367:\"很多时候会登录一台陌生的服务器；当需要调整环境的时候；那真是起步啥都没有；装备全靠打；两眼一抹黑到处找配置项；还好我这记的有一份笔记；可以先总结下；大都是先用 which 获取目录；然后再获取配置项位置；```bashwhich  mysql/usr/bin/mysql/usr/bin/mysql help | grep A1 \'Default ...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/019fca5ce80a1430b0590680b9eff752.jpg\";s:11:\"blog_detail\";s:9341:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	很多时候会登录一台陌生的服务器；<br />\n当需要调整环境的时候；<br />\n那真是起步啥都没有；装备全靠打；<br />\n两眼一抹黑到处找配置项；<br />\n还好我这记的有一份笔记；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	可以先总结下；<br />\n大都是先用 which 获取目录；<br />\n然后再获取配置项位置；\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> mysql\n/usr/bin/mysql\n/usr/bin/mysql --help <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> -A1 <span class=\"token string\" style=\"color:#A6E22E;\">\'Default options\'</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n<div class=\"toolbar\">\n	<div class=\"toolbar-item\">\n		<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n	</div>\n	<div class=\"toolbar-item\">\n		<a>Copy</a> \n	</div>\n</div>\n	</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"></a> \n		</p>\n		<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n			<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n			<div class=\"fluidbox__ghost\">\n			</div>\n</a> \n		</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> php\n/usr/local/apache2/php/bin/php\n/usr/local/apache2/php/bin/php -i <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\"Loaded Configuration File\"</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n		<div class=\"toolbar\">\n			<div class=\"toolbar-item\">\n				<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n			</div>\n			<div class=\"toolbar-item\">\n				<a>Copy</a> \n			</div>\n		</div>\n			</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"></a> \n				</p>\n				<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n					<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n					<div class=\"fluidbox__ghost\">\n					</div>\n</a> \n				</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'http\'</span> /usr/local/apache2/bin/httpd -V <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'SERVER_CONFIG_FILE\'</span><span class=\"line-numbers-rows\"><span></span><span></span></span></pre>\n				<div class=\"toolbar\">\n					<div class=\"toolbar-item\">\n						<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n					</div>\n					<div class=\"toolbar-item\">\n						<a>Copy</a> \n					</div>\n				</div>\n					</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	拼起来就是： /usr/local/apache2/conf/httpd.conf<br />\n<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"></a> \n						</p>\n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n</a> \n						</div>\n<br />\n<a class=\"js-fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\"> \n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<img src=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n						</div>\n</a> <div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'nginx\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n						<div class=\"toolbar\">\n							<div class=\"toolbar-item\">\n								<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n							</div>\n							<div class=\"toolbar-item\">\n								<a>Copy</a> \n							</div>\n						</div>\n							</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"></a> \n								</p>\n								<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n									<a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n									<div class=\"fluidbox__ghost\">\n									</div>\n</a> \n								</div>\n<br />\n如果没有 那就根据上图中的nginx位置执行\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">/www/server/nginx/sbin/nginx -t<span class=\"line-numbers-rows\"><span></span></span></pre>\n								<div class=\"toolbar\">\n									<div class=\"toolbar-item\">\n										<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n									</div>\n									<div class=\"toolbar-item\">\n										<a>Copy</a> \n									</div>\n								</div>\n									</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	nginx和配置项的目录全有了；\n										</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'php-fpm\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n										<div class=\"toolbar\">\n											<div class=\"toolbar-item\">\n												<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n											</div>\n											<div class=\"toolbar-item\">\n												<a>Copy</a> \n											</div>\n										</div>\n											</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"></a> \n												</p>\n												<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n													<a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n													<div class=\"fluidbox__ghost\">\n													</div>\n</a> \n												</div>\n<br />\n配置项文件路径一眼就看到了；\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:0:\"\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:0;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:0;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543224986;}', '2130706433', '1543224986');
INSERT INTO `zgw_admin_action_log` VALUES ('165', '1', '编辑博文-linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:7;s:10:\"blog_title\";s:73:\"linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录\";s:13:\"blog_keywords\";s:28:\"linux查看,配置项,目录\";s:16:\"blog_description\";s:367:\"很多时候会登录一台陌生的服务器；当需要调整环境的时候；那真是起步啥都没有；装备全靠打；两眼一抹黑到处找配置项；还好我这记的有一份笔记；可以先总结下；大都是先用 which 获取目录；然后再获取配置项位置；```bashwhich  mysql/usr/bin/mysql/usr/bin/mysql help | grep A1 \'Default ...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/019fca5ce80a1430b0590680b9eff752.jpg\";s:11:\"blog_detail\";s:9341:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	很多时候会登录一台陌生的服务器；<br />\n当需要调整环境的时候；<br />\n那真是起步啥都没有；装备全靠打；<br />\n两眼一抹黑到处找配置项；<br />\n还好我这记的有一份笔记；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	可以先总结下；<br />\n大都是先用 which 获取目录；<br />\n然后再获取配置项位置；\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> mysql\n/usr/bin/mysql\n/usr/bin/mysql --help <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> -A1 <span class=\"token string\" style=\"color:#A6E22E;\">\'Default options\'</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n<div class=\"toolbar\">\n	<div class=\"toolbar-item\">\n		<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n	</div>\n	<div class=\"toolbar-item\">\n		<a>Copy</a> \n	</div>\n</div>\n	</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"></a> \n		</p>\n		<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n			<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n			<div class=\"fluidbox__ghost\">\n			</div>\n</a> \n		</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> php\n/usr/local/apache2/php/bin/php\n/usr/local/apache2/php/bin/php -i <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\"Loaded Configuration File\"</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n		<div class=\"toolbar\">\n			<div class=\"toolbar-item\">\n				<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n			</div>\n			<div class=\"toolbar-item\">\n				<a>Copy</a> \n			</div>\n		</div>\n			</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"></a> \n				</p>\n				<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n					<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n					<div class=\"fluidbox__ghost\">\n					</div>\n</a> \n				</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'http\'</span> /usr/local/apache2/bin/httpd -V <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'SERVER_CONFIG_FILE\'</span><span class=\"line-numbers-rows\"><span></span><span></span></span></pre>\n				<div class=\"toolbar\">\n					<div class=\"toolbar-item\">\n						<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n					</div>\n					<div class=\"toolbar-item\">\n						<a>Copy</a> \n					</div>\n				</div>\n					</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	拼起来就是： /usr/local/apache2/conf/httpd.conf<br />\n<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"></a> \n						</p>\n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n</a> \n						</div>\n<br />\n<a class=\"js-fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\"> \n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<img src=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n						</div>\n</a> <div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'nginx\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n						<div class=\"toolbar\">\n							<div class=\"toolbar-item\">\n								<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n							</div>\n							<div class=\"toolbar-item\">\n								<a>Copy</a> \n							</div>\n						</div>\n							</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"></a> \n								</p>\n								<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n									<a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n									<div class=\"fluidbox__ghost\">\n									</div>\n</a> \n								</div>\n<br />\n如果没有 那就根据上图中的nginx位置执行\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">/www/server/nginx/sbin/nginx -t<span class=\"line-numbers-rows\"><span></span></span></pre>\n								<div class=\"toolbar\">\n									<div class=\"toolbar-item\">\n										<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n									</div>\n									<div class=\"toolbar-item\">\n										<a>Copy</a> \n									</div>\n								</div>\n									</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	nginx和配置项的目录全有了；\n										</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'php-fpm\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n										<div class=\"toolbar\">\n											<div class=\"toolbar-item\">\n												<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n											</div>\n											<div class=\"toolbar-item\">\n												<a>Copy</a> \n											</div>\n										</div>\n											</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"></a> \n												</p>\n												<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n													<a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n													<div class=\"fluidbox__ghost\">\n													</div>\n</a> \n												</div>\n<br />\n配置项文件路径一眼就看到了；\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:0:\"\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:0;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:0;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543224995;}', '2130706433', '1543224995');
INSERT INTO `zgw_admin_action_log` VALUES ('166', '1', '编辑博文-linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:7;s:10:\"blog_title\";s:73:\"linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录\";s:13:\"blog_keywords\";s:28:\"linux查看,配置项,目录\";s:16:\"blog_description\";s:367:\"很多时候会登录一台陌生的服务器；当需要调整环境的时候；那真是起步啥都没有；装备全靠打；两眼一抹黑到处找配置项；还好我这记的有一份笔记；可以先总结下；大都是先用 which 获取目录；然后再获取配置项位置；```bashwhich  mysql/usr/bin/mysql/usr/bin/mysql help | grep A1 \'Default ...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/eaf26468aba5fbbe5808990b854491a8.png\";s:11:\"blog_detail\";s:9341:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	很多时候会登录一台陌生的服务器；<br />\n当需要调整环境的时候；<br />\n那真是起步啥都没有；装备全靠打；<br />\n两眼一抹黑到处找配置项；<br />\n还好我这记的有一份笔记；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	可以先总结下；<br />\n大都是先用 which 获取目录；<br />\n然后再获取配置项位置；\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> mysql\n/usr/bin/mysql\n/usr/bin/mysql --help <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> -A1 <span class=\"token string\" style=\"color:#A6E22E;\">\'Default options\'</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n<div class=\"toolbar\">\n	<div class=\"toolbar-item\">\n		<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n	</div>\n	<div class=\"toolbar-item\">\n		<a>Copy</a> \n	</div>\n</div>\n	</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"></a> \n		</p>\n		<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n			<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n			<div class=\"fluidbox__ghost\">\n			</div>\n</a> \n		</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> php\n/usr/local/apache2/php/bin/php\n/usr/local/apache2/php/bin/php -i <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\"Loaded Configuration File\"</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n		<div class=\"toolbar\">\n			<div class=\"toolbar-item\">\n				<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n			</div>\n			<div class=\"toolbar-item\">\n				<a>Copy</a> \n			</div>\n		</div>\n			</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"></a> \n				</p>\n				<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n					<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n					<div class=\"fluidbox__ghost\">\n					</div>\n</a> \n				</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'http\'</span> /usr/local/apache2/bin/httpd -V <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'SERVER_CONFIG_FILE\'</span><span class=\"line-numbers-rows\"><span></span><span></span></span></pre>\n				<div class=\"toolbar\">\n					<div class=\"toolbar-item\">\n						<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n					</div>\n					<div class=\"toolbar-item\">\n						<a>Copy</a> \n					</div>\n				</div>\n					</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	拼起来就是： /usr/local/apache2/conf/httpd.conf<br />\n<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"></a> \n						</p>\n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n</a> \n						</div>\n<br />\n<a class=\"js-fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\"> \n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<img src=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n						</div>\n</a> <div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'nginx\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n						<div class=\"toolbar\">\n							<div class=\"toolbar-item\">\n								<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n							</div>\n							<div class=\"toolbar-item\">\n								<a>Copy</a> \n							</div>\n						</div>\n							</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"></a> \n								</p>\n								<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n									<a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n									<div class=\"fluidbox__ghost\">\n									</div>\n</a> \n								</div>\n<br />\n如果没有 那就根据上图中的nginx位置执行\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">/www/server/nginx/sbin/nginx -t<span class=\"line-numbers-rows\"><span></span></span></pre>\n								<div class=\"toolbar\">\n									<div class=\"toolbar-item\">\n										<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n									</div>\n									<div class=\"toolbar-item\">\n										<a>Copy</a> \n									</div>\n								</div>\n									</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	nginx和配置项的目录全有了；\n										</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'php-fpm\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n										<div class=\"toolbar\">\n											<div class=\"toolbar-item\">\n												<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n											</div>\n											<div class=\"toolbar-item\">\n												<a>Copy</a> \n											</div>\n										</div>\n											</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"></a> \n												</p>\n												<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n													<a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n													<div class=\"fluidbox__ghost\">\n													</div>\n</a> \n												</div>\n<br />\n配置项文件路径一眼就看到了；\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:0:\"\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:0;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:0;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543225006;}', '2130706433', '1543225006');
INSERT INTO `zgw_admin_action_log` VALUES ('167', '1', '编辑博文-linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:7;s:10:\"blog_title\";s:73:\"linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录\";s:13:\"blog_keywords\";s:28:\"linux查看,配置项,目录\";s:16:\"blog_description\";s:367:\"很多时候会登录一台陌生的服务器；当需要调整环境的时候；那真是起步啥都没有；装备全靠打；两眼一抹黑到处找配置项；还好我这记的有一份笔记；可以先总结下；大都是先用 which 获取目录；然后再获取配置项位置；```bashwhich  mysql/usr/bin/mysql/usr/bin/mysql help | grep A1 \'Default ...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/2d11de3a833321d807f520fe1fb6ccd6.jpg\";s:11:\"blog_detail\";s:9341:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	很多时候会登录一台陌生的服务器；<br />\n当需要调整环境的时候；<br />\n那真是起步啥都没有；装备全靠打；<br />\n两眼一抹黑到处找配置项；<br />\n还好我这记的有一份笔记；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	可以先总结下；<br />\n大都是先用 which 获取目录；<br />\n然后再获取配置项位置；\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> mysql\n/usr/bin/mysql\n/usr/bin/mysql --help <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> -A1 <span class=\"token string\" style=\"color:#A6E22E;\">\'Default options\'</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n<div class=\"toolbar\">\n	<div class=\"toolbar-item\">\n		<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n	</div>\n	<div class=\"toolbar-item\">\n		<a>Copy</a> \n	</div>\n</div>\n	</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"></a> \n		</p>\n		<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n			<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n			<div class=\"fluidbox__ghost\">\n			</div>\n</a> \n		</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> php\n/usr/local/apache2/php/bin/php\n/usr/local/apache2/php/bin/php -i <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\"Loaded Configuration File\"</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n		<div class=\"toolbar\">\n			<div class=\"toolbar-item\">\n				<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n			</div>\n			<div class=\"toolbar-item\">\n				<a>Copy</a> \n			</div>\n		</div>\n			</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"></a> \n				</p>\n				<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n					<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n					<div class=\"fluidbox__ghost\">\n					</div>\n</a> \n				</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'http\'</span> /usr/local/apache2/bin/httpd -V <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'SERVER_CONFIG_FILE\'</span><span class=\"line-numbers-rows\"><span></span><span></span></span></pre>\n				<div class=\"toolbar\">\n					<div class=\"toolbar-item\">\n						<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n					</div>\n					<div class=\"toolbar-item\">\n						<a>Copy</a> \n					</div>\n				</div>\n					</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	拼起来就是： /usr/local/apache2/conf/httpd.conf<br />\n<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"></a> \n						</p>\n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n</a> \n						</div>\n<br />\n<a class=\"js-fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\"> \n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<img src=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n						</div>\n</a> <div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'nginx\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n						<div class=\"toolbar\">\n							<div class=\"toolbar-item\">\n								<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n							</div>\n							<div class=\"toolbar-item\">\n								<a>Copy</a> \n							</div>\n						</div>\n							</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"></a> \n								</p>\n								<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n									<a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n									<div class=\"fluidbox__ghost\">\n									</div>\n</a> \n								</div>\n<br />\n如果没有 那就根据上图中的nginx位置执行\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">/www/server/nginx/sbin/nginx -t<span class=\"line-numbers-rows\"><span></span></span></pre>\n								<div class=\"toolbar\">\n									<div class=\"toolbar-item\">\n										<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n									</div>\n									<div class=\"toolbar-item\">\n										<a>Copy</a> \n									</div>\n								</div>\n									</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	nginx和配置项的目录全有了；\n										</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'php-fpm\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n										<div class=\"toolbar\">\n											<div class=\"toolbar-item\">\n												<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n											</div>\n											<div class=\"toolbar-item\">\n												<a>Copy</a> \n											</div>\n										</div>\n											</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"></a> \n												</p>\n												<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n													<a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n													<div class=\"fluidbox__ghost\">\n													</div>\n</a> \n												</div>\n<br />\n配置项文件路径一眼就看到了；\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:0:\"\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:0;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:0;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543225050;}', '2130706433', '1543225050');
INSERT INTO `zgw_admin_action_log` VALUES ('168', '1', '编辑博文-linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:7;s:10:\"blog_title\";s:73:\"linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录\";s:13:\"blog_keywords\";s:28:\"linux查看,配置项,目录\";s:16:\"blog_description\";s:367:\"很多时候会登录一台陌生的服务器；当需要调整环境的时候；那真是起步啥都没有；装备全靠打；两眼一抹黑到处找配置项；还好我这记的有一份笔记；可以先总结下；大都是先用 which 获取目录；然后再获取配置项位置；```bashwhich  mysql/usr/bin/mysql/usr/bin/mysql help | grep A1 \'Default ...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/cb0d2fa3f767104aab9d23742ed7e7da.jpg\";s:11:\"blog_detail\";s:9341:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	很多时候会登录一台陌生的服务器；<br />\n当需要调整环境的时候；<br />\n那真是起步啥都没有；装备全靠打；<br />\n两眼一抹黑到处找配置项；<br />\n还好我这记的有一份笔记；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	可以先总结下；<br />\n大都是先用 which 获取目录；<br />\n然后再获取配置项位置；\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> mysql\n/usr/bin/mysql\n/usr/bin/mysql --help <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> -A1 <span class=\"token string\" style=\"color:#A6E22E;\">\'Default options\'</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n<div class=\"toolbar\">\n	<div class=\"toolbar-item\">\n		<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n	</div>\n	<div class=\"toolbar-item\">\n		<a>Copy</a> \n	</div>\n</div>\n	</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"></a> \n		</p>\n		<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n			<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n			<div class=\"fluidbox__ghost\">\n			</div>\n</a> \n		</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> php\n/usr/local/apache2/php/bin/php\n/usr/local/apache2/php/bin/php -i <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\"Loaded Configuration File\"</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n		<div class=\"toolbar\">\n			<div class=\"toolbar-item\">\n				<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n			</div>\n			<div class=\"toolbar-item\">\n				<a>Copy</a> \n			</div>\n		</div>\n			</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"></a> \n				</p>\n				<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n					<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n					<div class=\"fluidbox__ghost\">\n					</div>\n</a> \n				</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'http\'</span> /usr/local/apache2/bin/httpd -V <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'SERVER_CONFIG_FILE\'</span><span class=\"line-numbers-rows\"><span></span><span></span></span></pre>\n				<div class=\"toolbar\">\n					<div class=\"toolbar-item\">\n						<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n					</div>\n					<div class=\"toolbar-item\">\n						<a>Copy</a> \n					</div>\n				</div>\n					</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	拼起来就是： /usr/local/apache2/conf/httpd.conf<br />\n<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"></a> \n						</p>\n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n</a> \n						</div>\n<br />\n<a class=\"js-fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\"> \n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<img src=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n						</div>\n</a> <div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'nginx\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n						<div class=\"toolbar\">\n							<div class=\"toolbar-item\">\n								<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n							</div>\n							<div class=\"toolbar-item\">\n								<a>Copy</a> \n							</div>\n						</div>\n							</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"></a> \n								</p>\n								<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n									<a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n									<div class=\"fluidbox__ghost\">\n									</div>\n</a> \n								</div>\n<br />\n如果没有 那就根据上图中的nginx位置执行\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">/www/server/nginx/sbin/nginx -t<span class=\"line-numbers-rows\"><span></span></span></pre>\n								<div class=\"toolbar\">\n									<div class=\"toolbar-item\">\n										<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n									</div>\n									<div class=\"toolbar-item\">\n										<a>Copy</a> \n									</div>\n								</div>\n									</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	nginx和配置项的目录全有了；\n										</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'php-fpm\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n										<div class=\"toolbar\">\n											<div class=\"toolbar-item\">\n												<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n											</div>\n											<div class=\"toolbar-item\">\n												<a>Copy</a> \n											</div>\n										</div>\n											</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"></a> \n												</p>\n												<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n													<a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n													<div class=\"fluidbox__ghost\">\n													</div>\n</a> \n												</div>\n<br />\n配置项文件路径一眼就看到了；\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:0:\"\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:0;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:0;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543225059;}', '2130706433', '1543225060');
INSERT INTO `zgw_admin_action_log` VALUES ('169', '1', '编辑博文-linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:7;s:10:\"blog_title\";s:73:\"linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录\";s:13:\"blog_keywords\";s:28:\"linux查看,配置项,目录\";s:16:\"blog_description\";s:367:\"很多时候会登录一台陌生的服务器；当需要调整环境的时候；那真是起步啥都没有；装备全靠打；两眼一抹黑到处找配置项；还好我这记的有一份笔记；可以先总结下；大都是先用 which 获取目录；然后再获取配置项位置；```bashwhich  mysql/usr/bin/mysql/usr/bin/mysql help | grep A1 \'Default ...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/cb0d2fa3f767104aab9d23742ed7e7da.jpg\";s:11:\"blog_detail\";s:9341:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	很多时候会登录一台陌生的服务器；<br />\n当需要调整环境的时候；<br />\n那真是起步啥都没有；装备全靠打；<br />\n两眼一抹黑到处找配置项；<br />\n还好我这记的有一份笔记；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	可以先总结下；<br />\n大都是先用 which 获取目录；<br />\n然后再获取配置项位置；\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> mysql\n/usr/bin/mysql\n/usr/bin/mysql --help <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> -A1 <span class=\"token string\" style=\"color:#A6E22E;\">\'Default options\'</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n<div class=\"toolbar\">\n	<div class=\"toolbar-item\">\n		<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n	</div>\n	<div class=\"toolbar-item\">\n		<a>Copy</a> \n	</div>\n</div>\n	</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"></a> \n		</p>\n		<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n			<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n			<div class=\"fluidbox__ghost\">\n			</div>\n</a> \n		</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> php\n/usr/local/apache2/php/bin/php\n/usr/local/apache2/php/bin/php -i <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\"Loaded Configuration File\"</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n		<div class=\"toolbar\">\n			<div class=\"toolbar-item\">\n				<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n			</div>\n			<div class=\"toolbar-item\">\n				<a>Copy</a> \n			</div>\n		</div>\n			</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"></a> \n				</p>\n				<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n					<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n					<div class=\"fluidbox__ghost\">\n					</div>\n</a> \n				</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'http\'</span> /usr/local/apache2/bin/httpd -V <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'SERVER_CONFIG_FILE\'</span><span class=\"line-numbers-rows\"><span></span><span></span></span></pre>\n				<div class=\"toolbar\">\n					<div class=\"toolbar-item\">\n						<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n					</div>\n					<div class=\"toolbar-item\">\n						<a>Copy</a> \n					</div>\n				</div>\n					</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	拼起来就是： /usr/local/apache2/conf/httpd.conf<br />\n<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"></a> \n						</p>\n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n</a> \n						</div>\n<br />\n<a class=\"js-fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\"> \n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<img src=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n						</div>\n</a> <div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'nginx\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n						<div class=\"toolbar\">\n							<div class=\"toolbar-item\">\n								<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n							</div>\n							<div class=\"toolbar-item\">\n								<a>Copy</a> \n							</div>\n						</div>\n							</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"></a> \n								</p>\n								<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n									<a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n									<div class=\"fluidbox__ghost\">\n									</div>\n</a> \n								</div>\n<br />\n如果没有 那就根据上图中的nginx位置执行\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">/www/server/nginx/sbin/nginx -t<span class=\"line-numbers-rows\"><span></span></span></pre>\n								<div class=\"toolbar\">\n									<div class=\"toolbar-item\">\n										<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n									</div>\n									<div class=\"toolbar-item\">\n										<a>Copy</a> \n									</div>\n								</div>\n									</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	nginx和配置项的目录全有了；\n										</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'php-fpm\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n										<div class=\"toolbar\">\n											<div class=\"toolbar-item\">\n												<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n											</div>\n											<div class=\"toolbar-item\">\n												<a>Copy</a> \n											</div>\n										</div>\n											</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"></a> \n												</p>\n												<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n													<a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n													<div class=\"fluidbox__ghost\">\n													</div>\n</a> \n												</div>\n<br />\n配置项文件路径一眼就看到了；\";s:9:\"list_sort\";i:0;s:9:\"blog_type\";s:1:\"0\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/146\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:0;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:0;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543225084;}', '2130706433', '1543225084');
INSERT INTO `zgw_admin_action_log` VALUES ('170', '1', '编辑博客分类-PHP', '/admin/blog_category/ajaxSaveCategory.html', 'a:6:{s:5:\"level\";i:1;s:13:\"category_name\";s:3:\"PHP\";s:3:\"pid\";i:0;s:6:\"status\";i:1;s:10:\"list_order\";i:0;s:11:\"update_time\";i:1543226156;}', '2130706433', '1543226156');
INSERT INTO `zgw_admin_action_log` VALUES ('171', '1', '登录管理后台', '/admin/common/login.html', '', '2130706433', '1543366941');
INSERT INTO `zgw_admin_action_log` VALUES ('172', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg\";s:11:\"blog_detail\";s:2924:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	本来是在写设计模式文章的；<br />\n想着把3中工厂模式一起写了；<br />\n结果眼瞅着又到凌晨了；<br />\n现在都该保温杯+枸杞养生了；<br />\n还是别熬夜太晚了；<br />\n但是如果不把我定的每周一篇文章的任务完成；<br />\n还怎么实现我1个亿的小目标；<br />\n于是赶紧凑了篇linux的小技巧；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	使用云主机的时候默认的主机名都比较长；<br />\n阿里的尤为长；<br />\n作为一个有强迫症的人来说；<br />\nbash 这么长的地方都被这乱七八糟的字符占着很难受；<br />\n<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"></a> \n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n	<div class=\"fluidbox__ghost\">\n	</div>\n</a> \n</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	所以这篇文章就是来修改主机名的；<br />\n之前是要修改 /etc/sysconfig/network 的；<br />\n现在可以直接一条命令搞定；<br />\n我这是是要把主机名修改为 bjy ;\n	</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">hostnamectl set-hostname bjy<span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a> \n		</div>\n	</div>\n		</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	记得退出 ssh 重新登录后生效哈；<br />\n相当方便；<br />\n<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"></a> \n			</p>\n			<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n				<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n				<div class=\"fluidbox__ghost\">\n				</div>\n</a> \n			</div>\n<br />\n瞬间清爽了吧；\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:0;s:11:\"update_time\";i:1543377080;}', '2130706433', '1543377080');
INSERT INTO `zgw_admin_action_log` VALUES ('173', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg\";s:11:\"blog_detail\";s:2924:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	本来是在写设计模式文章的；<br />\n想着把3中工厂模式一起写了；<br />\n结果眼瞅着又到凌晨了；<br />\n现在都该保温杯+枸杞养生了；<br />\n还是别熬夜太晚了；<br />\n但是如果不把我定的每周一篇文章的任务完成；<br />\n还怎么实现我1个亿的小目标；<br />\n于是赶紧凑了篇linux的小技巧；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	使用云主机的时候默认的主机名都比较长；<br />\n阿里的尤为长；<br />\n作为一个有强迫症的人来说；<br />\nbash 这么长的地方都被这乱七八糟的字符占着很难受；<br />\n<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"></a> \n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n	<div class=\"fluidbox__ghost\">\n	</div>\n</a> \n</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	所以这篇文章就是来修改主机名的；<br />\n之前是要修改 /etc/sysconfig/network 的；<br />\n现在可以直接一条命令搞定；<br />\n我这是是要把主机名修改为 bjy ;\n	</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">hostnamectl set-hostname bjy<span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a> \n		</div>\n	</div>\n		</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	记得退出 ssh 重新登录后生效哈；<br />\n相当方便；<br />\n<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"></a> \n			</p>\n			<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n				<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n				<div class=\"fluidbox__ghost\">\n				</div>\n</a> \n			</div>\n<br />\n瞬间清爽了吧；\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:0;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:0;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543377518;}', '2130706433', '1543377518');
INSERT INTO `zgw_admin_action_log` VALUES ('174', '1', '编辑博文-linux修改主机名', '/admin/blog_blog/ajaxSaveBlog.html', 'a:15:{s:11:\"category_id\";i:8;s:10:\"blog_title\";s:20:\"linux修改主机名\";s:13:\"blog_keywords\";s:24:\"linux,主机名,hostname\";s:16:\"blog_description\";s:505:\"本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...\";s:10:\"blog_thumb\";s:70:\"/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg\";s:11:\"blog_detail\";s:2924:\"<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	本来是在写设计模式文章的；<br />\n想着把3中工厂模式一起写了；<br />\n结果眼瞅着又到凌晨了；<br />\n现在都该保温杯+枸杞养生了；<br />\n还是别熬夜太晚了；<br />\n但是如果不把我定的每周一篇文章的任务完成；<br />\n还怎么实现我1个亿的小目标；<br />\n于是赶紧凑了篇linux的小技巧；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	使用云主机的时候默认的主机名都比较长；<br />\n阿里的尤为长；<br />\n作为一个有强迫症的人来说；<br />\nbash 这么长的地方都被这乱七八糟的字符占着很难受；<br />\n<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"></a> \n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n	<div class=\"fluidbox__ghost\">\n	</div>\n</a> \n</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	所以这篇文章就是来修改主机名的；<br />\n之前是要修改 /etc/sysconfig/network 的；<br />\n现在可以直接一条命令搞定；<br />\n我这是是要把主机名修改为 bjy ;\n	</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">hostnamectl set-hostname bjy<span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a> \n		</div>\n	</div>\n		</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	记得退出 ssh 重新登录后生效哈；<br />\n相当方便；<br />\n<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"></a> \n			</p>\n			<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n				<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n				<div class=\"fluidbox__ghost\">\n				</div>\n</a> \n			</div>\n<br />\n瞬间清爽了吧；\";s:9:\"list_sort\";i:10;s:9:\"blog_type\";s:1:\"1\";s:8:\"blog_url\";s:33:\"https://baijunyao.com/article/160\";s:8:\"is_index\";i:1;s:10:\"index_sort\";i:10;s:6:\"is_top\";i:1;s:8:\"top_sort\";i:1;s:13:\"allow_comment\";i:1;s:11:\"update_time\";i:1543377524;}', '2130706433', '1543377524');

-- ----------------------------
-- Table structure for `zgw_admin_auth_access`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_admin_auth_access`;
CREATE TABLE `zgw_admin_auth_access` (
  `role_id` mediumint(8) unsigned NOT NULL COMMENT '角色',
  `rule_id` int(11) NOT NULL COMMENT '权限节点ID',
  KEY `role_id` (`role_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='权限授权表';

-- ----------------------------
-- Records of zgw_admin_auth_access
-- ----------------------------
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '2');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '3');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '4');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '6');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '15');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '7');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '8');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '9');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '10');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '11');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '12');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '13');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '14');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '22');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '17');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '18');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '19');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '20');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '21');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '23');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '24');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '25');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '26');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '27');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '28');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '29');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '30');
INSERT INTO `zgw_admin_auth_access` VALUES ('1', '31');

-- ----------------------------
-- Table structure for `zgw_admin_auth_role`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_admin_auth_role`;
CREATE TABLE `zgw_admin_auth_role` (
  `role_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `role_name` varchar(20) NOT NULL COMMENT '角色名称',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态 1可用 0禁用',
  `remark` varchar(255) NOT NULL COMMENT '备注',
  `create_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`role_id`),
  KEY `status` (`status`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='角色表';

-- ----------------------------
-- Records of zgw_admin_auth_role
-- ----------------------------
INSERT INTO `zgw_admin_auth_role` VALUES ('1', '超级管理员', '1', '拥有至高无上的权限', '1541988179', '1542859256');
INSERT INTO `zgw_admin_auth_role` VALUES ('2', '系统管理员', '0', '拥有系统配置权限', '1541988179', '1543217405');
INSERT INTO `zgw_admin_auth_role` VALUES ('3', '财务总监', '0', '拥有财务相关权限', '1541988179', '1542878779');
INSERT INTO `zgw_admin_auth_role` VALUES ('4', '产品编辑', '0', '拥有添加、编辑产品的权限', '1542187561', '1542878782');
INSERT INTO `zgw_admin_auth_role` VALUES ('5', '研发小编', '0', '拥有产品研发的权限', '1542857510', '1542878785');

-- ----------------------------
-- Table structure for `zgw_admin_rule`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_admin_rule`;
CREATE TABLE `zgw_admin_rule` (
  `rule_id` smallint(6) unsigned NOT NULL AUTO_INCREMENT COMMENT '自增ID',
  `rule_name` varchar(50) NOT NULL COMMENT '节点名称',
  `pid` smallint(6) unsigned NOT NULL DEFAULT '0' COMMENT '父级ID',
  `level` tinyint(1) NOT NULL DEFAULT '1' COMMENT '级别',
  `module` char(20) NOT NULL COMMENT '应用名称',
  `controller` char(20) NOT NULL COMMENT '控制器',
  `action` char(60) NOT NULL COMMENT '操作名称',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '左侧菜单显示状态，1显示，0不显示',
  `icon` varchar(50) NOT NULL COMMENT '菜单图标',
  `list_order` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT '排序ID',
  `create_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建的时间',
  `update_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新的时间',
  PRIMARY KEY (`rule_id`),
  KEY `rule_id` (`rule_id`),
  KEY `status` (`status`)
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8 COMMENT='权限节点表';

-- ----------------------------
-- Records of zgw_admin_rule
-- ----------------------------
INSERT INTO `zgw_admin_rule` VALUES ('2', '管理员管理', '0', '1', '', '', '', '1', '&#xe6b8;', '1', '1541988179', '1542944672');
INSERT INTO `zgw_admin_rule` VALUES ('3', '管理员列表', '2', '2', 'admin', 'admin_admin', 'adminindex', '1', '', '1', '1541988179', '1542873760');
INSERT INTO `zgw_admin_rule` VALUES ('4', '添加管理员', '3', '3', 'admin', 'admin_admin', 'adminadd', '0', '', '2', '1541988179', '1542871094');
INSERT INTO `zgw_admin_rule` VALUES ('6', '禁用管理员', '3', '3', 'admin', 'admin_admin', 'ajaxupdateadminstatus', '0', '', '3', '1541988179', '1542703281');
INSERT INTO `zgw_admin_rule` VALUES ('7', '角色列表', '2', '2', 'admin', 'admin_role', 'roleindex', '1', '', '0', '1541988179', '1542703195');
INSERT INTO `zgw_admin_rule` VALUES ('8', '添加角色', '7', '3', 'admin', 'admin_role', 'roleadd', '0', '', '0', '1541988179', '1542694786');
INSERT INTO `zgw_admin_rule` VALUES ('9', '编辑角色', '7', '3', 'admin', 'admin_role', 'roleedit', '0', '', '0', '1541988179', '1541988179');
INSERT INTO `zgw_admin_rule` VALUES ('10', '禁用角色', '7', '3', 'admin', 'admin_role', 'ajaxupdaterolestatus', '0', '', '0', '1541988179', '1541988179');
INSERT INTO `zgw_admin_rule` VALUES ('11', '分配权限', '7', '3', 'admin', 'admin_role', 'roleauthaccess', '0', '', '0', '1541988179', '1541988179');
INSERT INTO `zgw_admin_rule` VALUES ('12', '权限节点', '2', '2', 'admin', 'admin_rule', 'ruleindex', '1', '', '0', '1542696237', '1542854258');
INSERT INTO `zgw_admin_rule` VALUES ('13', '添加节点', '12', '3', 'admin', 'admin_rule', 'ruleadd', '0', '', '0', '1542696943', '1542697006');
INSERT INTO `zgw_admin_rule` VALUES ('14', '编辑节点', '12', '3', 'admin', 'admin_rule', 'ruleedit', '0', '', '0', '1542697039', '1542697039');
INSERT INTO `zgw_admin_rule` VALUES ('15', '编辑管理员', '3', '3', 'admin', 'admin_admin', 'adminedit', '0', '', '0', '1542700337', '1542700337');
INSERT INTO `zgw_admin_rule` VALUES ('17', '博客管理', '0', '1', '', '', '', '1', '&#xe6ae;', '0', '1542942294', '1542944906');
INSERT INTO `zgw_admin_rule` VALUES ('18', '博客配置', '17', '2', 'admin', 'blog_system', 'info', '1', '', '0', '1542961739', '1542961739');
INSERT INTO `zgw_admin_rule` VALUES ('19', '博客导航', '17', '2', 'admin', 'blog_nav', 'navindex', '1', '', '0', '1542963609', '1542963609');
INSERT INTO `zgw_admin_rule` VALUES ('20', '添加导航', '19', '3', 'admin', 'blog_nav', 'navadd', '0', '', '0', '1542963644', '1542963644');
INSERT INTO `zgw_admin_rule` VALUES ('21', '编辑导航', '19', '3', 'admin', 'blog_nav', 'navedit', '0', '', '0', '1542963672', '1542963672');
INSERT INTO `zgw_admin_rule` VALUES ('22', '删除节点', '12', '3', 'admin', 'admin_rule', 'ajaxdeleterule', '0', '', '0', '1542963776', '1542963776');
INSERT INTO `zgw_admin_rule` VALUES ('23', '删除导航', '19', '3', 'admin', 'blog_nav', 'ajaxdeletenav', '0', '', '0', '1542963818', '1542963818');
INSERT INTO `zgw_admin_rule` VALUES ('24', '博客分类', '17', '2', 'admin', 'blog_category', 'categoryindex', '1', '', '0', '1543194631', '1543194631');
INSERT INTO `zgw_admin_rule` VALUES ('25', '添加分类', '24', '3', 'admin', 'blog_category', 'categoryadd', '0', '', '0', '1542963818', '1542963818');
INSERT INTO `zgw_admin_rule` VALUES ('26', '编辑分类', '24', '3', 'admin', 'blog_category', 'categoryedit', '0', '', '0', '1543194740', '1543194740');
INSERT INTO `zgw_admin_rule` VALUES ('27', '删除分类', '24', '3', 'admin', 'blog_category', 'ajaxdeletecategory', '0', '', '0', '1543194788', '1543194788');
INSERT INTO `zgw_admin_rule` VALUES ('28', '博文管理', '17', '2', 'admin', 'blog_blog', 'blogindex', '1', '', '0', '1543198845', '1543198845');
INSERT INTO `zgw_admin_rule` VALUES ('29', '添加博文', '28', '3', 'admin', 'blog_blog', 'blogadd', '0', '', '0', '1543198874', '1543198874');
INSERT INTO `zgw_admin_rule` VALUES ('30', '编辑博文', '28', '3', 'admin', 'blog_blog', 'blogedit', '0', '', '0', '1543198898', '1543198898');
INSERT INTO `zgw_admin_rule` VALUES ('31', '禁用博文', '28', '3', 'admin', 'blog_blog', 'ajaxupdateblogstatus', '0', '', '0', '1543198954', '1543198954');

-- ----------------------------
-- Table structure for `zgw_blog`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_blog`;
CREATE TABLE `zgw_blog` (
  `blog_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `category_id` int(10) NOT NULL DEFAULT '0' COMMENT '分类id',
  `blog_title` varchar(255) NOT NULL COMMENT '标题',
  `blog_keywords` varchar(255) NOT NULL COMMENT '博文关键词',
  `blog_description` varchar(255) NOT NULL COMMENT '博文描述',
  `blog_thumb` varchar(255) NOT NULL COMMENT '博客缩略图',
  `blog_detail` longtext NOT NULL COMMENT '博客详情',
  `list_sort` smallint(5) NOT NULL DEFAULT '0' COMMENT '排序',
  `blog_type` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1系统内文章 0外部文章',
  `blog_url` varchar(255) NOT NULL COMMENT '外链博客url',
  `blog_views` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '浏览次数',
  `is_index` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '1首页显示',
  `index_sort` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT '首页排序',
  `is_top` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1置顶',
  `top_sort` smallint(5) NOT NULL DEFAULT '0' COMMENT '置顶排序',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1显示 0隐藏',
  `allow_comment` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1允许评论 0禁止评论',
  `blog_tags` text NOT NULL COMMENT '博客标签id',
  `create_time` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(11) NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`blog_id`)
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8 COMMENT='博客内容表';

-- ----------------------------
-- Records of zgw_blog
-- ----------------------------
INSERT INTO `zgw_blog` VALUES ('1', '8', 'linux修改主机名', 'linux,主机名,hostname', '本来是在写设计模式文章的；想着把3中工厂模式一起写了；结果眼瞅着又到凌晨了；现在都该保温杯+枸杞养生了；还是别熬夜太晚了；但是如果不把我定的每周一篇文章的任务完成；还怎么实现我1个亿的小目标；于是赶紧凑了篇linux的小技巧；使用云主机的时候默认的主机名都比较长；阿里的尤为长；作为一个有强迫症的人来说；bash 这么长的地方都被这乱七八糟的字符占着很...', '/uploads/blog/blog_thumb/20181126/af840b647a7a5644d980e0b4eb7a4573.jpg', '<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	本来是在写设计模式文章的；<br />\n想着把3中工厂模式一起写了；<br />\n结果眼瞅着又到凌晨了；<br />\n现在都该保温杯+枸杞养生了；<br />\n还是别熬夜太晚了；<br />\n但是如果不把我定的每周一篇文章的任务完成；<br />\n还怎么实现我1个亿的小目标；<br />\n于是赶紧凑了篇linux的小技巧；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	使用云主机的时候默认的主机名都比较长；<br />\n阿里的尤为长；<br />\n作为一个有强迫症的人来说；<br />\nbash 这么长的地方都被这乱七八糟的字符占着很难受；<br />\n<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"></a> \n</p>\n<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n	<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234dde417e.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n	<div class=\"fluidbox__ghost\">\n	</div>\n</a> \n</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	所以这篇文章就是来修改主机名的；<br />\n之前是要修改 /etc/sysconfig/network 的；<br />\n现在可以直接一条命令搞定；<br />\n我这是是要把主机名修改为 bjy ;\n	</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">hostnamectl set-hostname bjy<span class=\"line-numbers-rows\"><span></span></span></pre>\n	<div class=\"toolbar\">\n		<div class=\"toolbar-item\">\n			<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n		</div>\n		<div class=\"toolbar-item\">\n			<a>Copy</a> \n		</div>\n	</div>\n		</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	记得退出 ssh 重新登录后生效哈；<br />\n相当方便；<br />\n<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"></a> \n			</p>\n			<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n				<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--ready fluidbox--closed\" href=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180708/5b4234e9a4ea1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n				<div class=\"fluidbox__ghost\">\n				</div>\n</a> \n			</div>\n<br />\n瞬间清爽了吧；', '10', '1', 'https://baijunyao.com/article/160', '0', '1', '10', '1', '1', '1', '1', '', '1543222188', '1543377524');
INSERT INTO `zgw_blog` VALUES ('2', '7', 'linux查看nginx、apache、php、php-fpm、mysql及配置项所在目录', 'linux查看,配置项,目录', '很多时候会登录一台陌生的服务器；当需要调整环境的时候；那真是起步啥都没有；装备全靠打；两眼一抹黑到处找配置项；还好我这记的有一份笔记；可以先总结下；大都是先用 which 获取目录；然后再获取配置项位置；```bashwhich  mysql/usr/bin/mysql/usr/bin/mysql help | grep A1 \'Default ...', '/uploads/blog/blog_thumb/20181126/cb0d2fa3f767104aab9d23742ed7e7da.jpg', '<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	很多时候会登录一台陌生的服务器；<br />\n当需要调整环境的时候；<br />\n那真是起步啥都没有；装备全靠打；<br />\n两眼一抹黑到处找配置项；<br />\n还好我这记的有一份笔记；\n	</p>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	可以先总结下；<br />\n大都是先用 which 获取目录；<br />\n然后再获取配置项位置；\n</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> mysql\n/usr/bin/mysql\n/usr/bin/mysql --help <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> -A1 <span class=\"token string\" style=\"color:#A6E22E;\">\'Default options\'</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n<div class=\"toolbar\">\n	<div class=\"toolbar-item\">\n		<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n	</div>\n	<div class=\"toolbar-item\">\n		<a>Copy</a> \n	</div>\n</div>\n	</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"></a> \n		</p>\n		<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n			<a class=\"js-fluidbox fluidbox__instance-1 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b40101c1.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n			<div class=\"fluidbox__ghost\">\n			</div>\n</a> \n		</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">which</span> php\n/usr/local/apache2/php/bin/php\n/usr/local/apache2/php/bin/php -i <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\"Loaded Configuration File\"</span><span class=\"line-numbers-rows\"><span></span><span></span><span></span></span></pre>\n		<div class=\"toolbar\">\n			<div class=\"toolbar-item\">\n				<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n			</div>\n			<div class=\"toolbar-item\">\n				<a>Copy</a> \n			</div>\n		</div>\n			</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"></a> \n				</p>\n				<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n					<a class=\"js-fluidbox fluidbox__instance-2 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b56132c6.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n					<div class=\"fluidbox__ghost\">\n					</div>\n</a> \n				</div>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'http\'</span> /usr/local/apache2/bin/httpd -V <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'SERVER_CONFIG_FILE\'</span><span class=\"line-numbers-rows\"><span></span><span></span></span></pre>\n				<div class=\"toolbar\">\n					<div class=\"toolbar-item\">\n						<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n					</div>\n					<div class=\"toolbar-item\">\n						<a>Copy</a> \n					</div>\n				</div>\n					</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	拼起来就是： /usr/local/apache2/conf/httpd.conf<br />\n<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"></a> \n						</p>\n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<a class=\"js-fluidbox fluidbox__instance-3 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1b9f9d5a3.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n</a> \n						</div>\n<br />\n<a class=\"js-fluidbox fluidbox__instance-4 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\"> \n						<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n							<img src=\"https://baijunyao.com/uploads/article/20180331/5abf1bc32a8d0.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n							<div class=\"fluidbox__ghost\">\n							</div>\n						</div>\n</a> <div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'nginx\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n						<div class=\"toolbar\">\n							<div class=\"toolbar-item\">\n								<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n							</div>\n							<div class=\"toolbar-item\">\n								<a>Copy</a> \n							</div>\n						</div>\n							</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"></a> \n								</p>\n								<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n									<a class=\"js-fluidbox fluidbox__instance-5 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1cbc5de7c.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n									<div class=\"fluidbox__ghost\">\n									</div>\n</a> \n								</div>\n<br />\n如果没有 那就根据上图中的nginx位置执行\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\">/www/server/nginx/sbin/nginx -t<span class=\"line-numbers-rows\"><span></span></span></pre>\n								<div class=\"toolbar\">\n									<div class=\"toolbar-item\">\n										<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n									</div>\n									<div class=\"toolbar-item\">\n										<a>Copy</a> \n									</div>\n								</div>\n									</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n	nginx和配置项的目录全有了；\n										</p>\n<div class=\"code-toolbar\" style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\">\n<pre class=\"line-numbers language-bash\"><span class=\"token function\" style=\"color:#E6DB74;\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\" style=\"color:#E6DB74;\">grep</span> <span class=\"token string\" style=\"color:#A6E22E;\">\'php-fpm\'</span><span class=\"line-numbers-rows\"><span></span></span></pre>\n										<div class=\"toolbar\">\n											<div class=\"toolbar-item\">\n												<span style=\"color:#BBBBBB;font-size:0.8em;background:rgba(224, 224, 224, 0.2);\">Bash</span> \n											</div>\n											<div class=\"toolbar-item\">\n												<a>Copy</a> \n											</div>\n										</div>\n											</div>\n<p style=\"color:#333333;font-family:\" font-size:16px;background-color:#ffffff;\"=\"\"> <a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"></a> \n												</p>\n												<div class=\"fluidbox__wrap\" style=\"margin:0px auto;\">\n													<a class=\"js-fluidbox fluidbox__instance-6 fluidbox--initialized fluidbox--closed fluidbox--ready\" href=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\"><img src=\"https://baijunyao.com/uploads/article/20180331/5abf1d031e398.jpg\" alt=\"\" title=\"\" class=\"fluidbox__thumb\" style=\"height:auto;\" /> \n													<div class=\"fluidbox__ghost\">\n													</div>\n</a> \n												</div>\n<br />\n配置项文件路径一眼就看到了；', '0', '0', 'https://baijunyao.com/article/146', '0', '1', '0', '1', '0', '1', '1', '', '1543224791', '1543225084');
INSERT INTO `zgw_blog` VALUES ('3', '0', 'APP开放接口API安全性——Token令牌Sign签名的设计与实现', '', '', '', '<p>　　在APP开放接口API的设计中，避免不了的就是安全性问题。</p>\r\n<h3>　　一、https协议</h3>\r\n<p>　　对于一些敏感的API接口，需要使用https协议。https是在http超文本传输协议加入SSL层，它在网络间通信是加密的，所以需要加密证书。</p>\r\n<h3>　　二、设计签名</h3>\r\n<p>　　原理：用户登录时向服务器提供用户认证信息（如账号和密码），服务器认证完后给客户端返回一个Token令牌，用户再次获取信息时，需带上此令牌。如果令牌正确，则返回数据。</p>\r\n<p>　　对于获得Token令牌信息后，访问用户相关接口，客户端请求的url需要带上如下参数：</p>\r\n<p>　　时间戳：timestamp</p>\r\n<p>　　Token令牌：token</p>\r\n<p>　　Sign签名：sign</p>\r\n<p>　　Sign生成规则可以是：将所有用户请求的参数按照字母排序（包括timestamp、token），然后根据MD5（可以加点salt），全部大写，生成sign签名，这就是所说的url签名算法。</p>\r\n<p>　　然后登陆后每次调用用户信息时，带上sign、timestamp、token参数。</p>\r\n<h3>　　三、具体实现</h3>\r\n<p>　　1、客户端向服务器端发送用户认证信息（如用户名和密码），服务器端接收到请求后，验证用户信息是否正确。</p>\r\n<p>　　如果正确：则返回一个唯一不重复的字符串（一般为UUID），然后在Redis中维护Token&mdash;&mdash;Uid的用户信息关系，以便其他API对token验证。</p>\r\n<p>　　如果错误：则返回错误代码。</p>\r\n<p>　　2、服务器设计一个url请求拦截规则</p>\r\n<p>　　（a）、判断是否包含timestamp、token、sign参数，如果不含或缺少，则返回错误代码。</p>\r\n<p>　　（b）、判断服务器接到请求的时间和参数中的时间戳（timestamp）是否相差很长一段时间（时间自定义如半小时），如果超过则说明该url已经过期（如果url被盗，他改变了时间戳，但是会导致sign签名不相等）。</p>\r\n<p>　　（c）、判断token是否有效，根据请求过来的token，查询Redis缓存中的Uid，如果获取不到这说明token已过期。</p>\r\n<p>　　（d）、根据用户请求的url参数，服务器端按照同样的规则生成sign签名，对比签名是否相等，如果相等，则放行。（自然url签名，也无法100%保证其安全，也可以通过公钥AES对数据和url加密，但这样无法确保公钥丢失，所以签名只是很大程度上保证安全）。</p>\r\n<p>　　（e）、此url拦截只需对获取身份认证的url放行（如登录url），其他所有的url都需要拦截。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/10/11/9772280.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('4', '0', '索引原理-btree索引与hash索引的区别', '', '', '', '<p>　　btree索引与hash索引的区别，之前不清楚，mark一下。</p>\r\n<p>　　Hash索引结构的特殊性，其检索效率非常高，索引的检索可以一次定位，不像B-Tree索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问，所以Hash索引的查询效率要远高于B-Tree索引。</p>\r\n<p>　　可能很多人又有疑问了，既然Hash索引的效率要比B-Tree高很多，为什么大家都不用Hash索引而还要使用B-Tree索引呢？任何事物都是有两面性的，Hash索引也一样，虽然Hash索引效率高，但是Hash索引本身由于其特殊性也带来了很多限制和弊端，主要有以下这些：</p>\r\n<p>　　1、Hash索引仅仅能够满足&ldquo;=&rdquo;，&ldquo;IN&rdquo;和&ldquo;<=>&rdquo;查询，不能使用范围查询。</p>\r\n<p>　　由于Hash索引比较的是进行Hash运算之后的Hash值，所以它只能用于等值的过滤，不能用于基于范围的过滤，因为进过相应的Hash算法处理之后的Hash值的大小关系，并不能保证和Hash运算前完全一样。</p>\r\n<p>　　2、Hash索引无法被用来避免数据的排序操作</p>\r\n<p>　　　由于Hash索引中存放的是经过Hash计算之后的Hash值，而且Hash值的大小管理并不一定和Hash运算前的键值完全一样，所以数据库无法利用索引的数据来避免任何排序运算。</p>\r\n<p>　　3、Hash索引不能利用部分索引查询</p>\r\n<p>　　对于组合索引，Hash索引在计算Hash值的时候是组合索引键合并后再一起计算Hashs值，而不是单独计算Hash值，所以通过组合索引的前面一个或者几个索引键进行查询的时候，Hash索引也无法被利用。</p>\r\n<p>　　4、Hash索引在任何时候都不能避免表扫描</p>\r\n<p>　　前面已经知道，Hash索引是将索引键通过Hash运算之后，将Hash运算结果的Hash值和对应的行指针信息存放于一个Hash表中，由于不同索引键存在相同Hash值，所以即使取满足某个Hash键值的数据的记录条数，也无法从Hash索引中年直接完成查询，还要通过访问表中实际数据进行相应的比较，并得到相应的结果。</p>\r\n<p>　　5、Hash索引遇到大量Hash值相等的情况后性能不一定会比B-Tree索引高</p>\r\n<p>　　对于选择性比较低的索引键，如果创建Hash索引，那么将会存在大量记录指针信息存于同一个Hash值相关联。这样要定位某一条记录时就会非常麻烦，会浪费多次表数据的访问，而造成整体性能低下。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/10/08/9753828.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('5', '0', '从四个维度谈谈如何做好团队管理', '', '', '', '<p>　　关于团队管理的四个维度，主要包括向下管理、向上管理、对外管理、自我管理。</p>\r\n<p>　　1、向下管理</p>\r\n<p style=\"text-align: center;\">　　<img src=\"https://img2018.cnblogs.com/blog/854257/201810/854257-20181008094445683-145648287.png\" alt=\"\" /></p>\r\n<p style=\"text-align: left;\">　　（1）、技术尊重</p>\r\n<p style=\"text-align: left;\">　　要了解程序员，你首先需要深入理解他们使用的工具、流程，以及程序设计的艺术。你理解得越深入，在和下属程序员进行技术对话时，参与能力就越强，越容易获得他们的尊重。微软的一位程序架构师这样评价比尔.盖茨：&ldquo;盖茨最喜欢和他的程序员一起讲程序分许答比特、字节层面。在技术战斗中他可以非常轻易地守住自己的阵地，他之所以可以获得程序员的尊重，因为他可以轻易地战胜他们&rdquo;。</p>\r\n<p style=\"text-align: left;\">　　成功地管理程序员最重要、最关键的因素，是得到你管理的下属的技术尊重。如果没有技术尊重，那么你的每一个想法，都可能会遇到主动或者被动的阻碍。正是因为这个原因，那些在职业生涯的某个时期没有做过程序员的团队管理者，才会觉得有效地管理程序员是及其困难的事情。</p>\r\n<p style=\"text-align: left;\">　　（2）、进度管理</p>\r\n<p style=\"text-align: left;\">　　我有一块小白板，我把它放在自己的前面。每天早上我都会写上今天需要参加的会议、自己要做的事情，此外，每天上午半天时间和每一个项目（产品研发、预研、调研、都可以）的团队成员过一遍当前进展。大家坐下来，好好谈谈已经实现的设计或代码，对疑惑、问题进行讨论。因为这种方式可以确保自己不仅仅依赖于状态报告、项目时间表，这种方式也可以让你能够接触到说真话的员工，他们会告诉你哪些地方做的不够好，并且会主动请求团队管理者帮助，而不需要管理者来催促他们。最高效的团队管理者往往都是坦率的，也往往对下属有足够的时间，能让员工找到他们说出自己的想法，他们会认真倾听。</p>\r\n<p style=\"text-align: left;\">　　如果往长远看，一些虽然不紧急但是很重要的事情，如果迫于很重要，如果迫于压力被放下后，到后面往往需要花费号几倍的代价才能弥补回来，技术管理者需要时刻保持警惕，警惕地做出决策，做正确的事情，要能够为公司的长远利益负责。</p>\r\n<p style=\"text-align: left;\">　　（3）、保护成员</p>\r\n<p style=\"text-align: left;\">　　我们做过项目团队管理者一般都有这样的经历，团队成员正在专心处理现场问题，莫名其妙被人投诉，投诉可能来自市场部门，也可能来自技术支持，或者兄弟研发部门，所有情况都有可能也容易出现团队每天被大量无用的会议烦扰，不去的话就要被投诉，这类情况在大公司司空见惯。</p>\r\n<p style=\"text-align: left;\">　　我们要学会保护团队成员，让他们免受组织中每日泛滥不绝的各种问题、争议和&ldquo;机会&rdquo;的打扰，在大一些的公司内部，官僚主义政治会通过各种文书工作来忽略或者缓冲每天的各种请求和问题。在小一些的公司里，面对挑战的各种销售驱动的机会、客户驱动的争议问题，以及管理驱动的想法，作为团队领导者，可能是他们最后或者唯一的防线。</p>\r\n<p style=\"text-align: left;\">　　（4）、任务责任制</p>\r\n<p style=\"text-align: left;\">　　每项任务都必须有且仅有一个负责人，如果有两个指定负责人，那就没有人负责了。开发经理的职责时确保为每项任务指定负责人，而不是亲自去完成每一项任务（开发经理可以指定其中的某一项工作由自己直接负责）。应当明确每一项任务，确保为每一项任务指定一个负责人，推进任务。还要定期检查以下三个问题：&ldquo;是否清楚整体的目标？是否清楚你的任务对实现整体目标有怎样的贡献？对你所负责的那部分，有哪些东西妨碍你达成目标？&rdquo;。我自己的做法是，只有担任任务负责人的同事，才能在考核中得到良好或者优秀的评价（前提是把事情做好，做不好就要承担责任），没有担任负责人的同事，最多只能给予合格评价。</p>\r\n<p style=\"text-align: left;\">　　我们实行任务责任制，这种长期责任，不是我们的管理保守了，而是在内、外合规的条件下，鼓励在集体主义下的个人主义更好地发挥。我们呼唤英雄，也要宽容英雄的一些过错。英雄要更加自律，天降大任于斯人也。</p>\r\n<p style=\"text-align: left;\">　　2、向上管理</p>\r\n<p style=\"text-align: center;\">　　<img src=\"https://img2018.cnblogs.com/blog/854257/201810/854257-20181008102403133-1639303558.png\" alt=\"\" /></p>\r\n<p style=\"text-align: left;\">　　向上管理其实是四个管理方向里最难的一点。什么是向上管理呢？向上管理指的是如何有效管理你的老板以及你要汇报的那些人。另外你还需要弄清楚如何汇报、如何沟通，以及要采取什么样的其他行动，才能让你的老板认为你是一个高效而成功的程序设计经理。</p>\r\n<p style=\"text-align: left;\">　　管理你的老板看起来似乎是一件比较奇怪的事情，但实际上成功地管理好你的老板可能比管理好你的团队还重要，至少对你个人而言是这样的。这背后的原因在于，成功并不只是在于你做了什么，更需要考虑别人如何看待你所做的成果，现实中外在认知往往比实际行动更重要。</p>\r\n<p style=\"text-align: left;\">　　3、对外管理</p>\r\n<p style=\"text-align: left;\">　　当你被聘请或提拔为程序设计经理时，你需要仔细研究组织架构图，找到各个职能部门的主管，想办法让自己逐渐了解他们，或者是个部门中与你同级的经理。请他们吃午饭，或者偶尔停下来跟他们聊聊天。提前建立起彼此之间的跨部门纽带关系是很有必要的、以后你真需要向他们发出请求或者寻找帮助的时候会更加容易。</p>\r\n<p style=\"text-align: left;\">　　跨部门的纽带关系不仅能帮助你自己，也是促进不同部门之间双向协作的重要途径。在跨部门活动中，尽可能成为一个领导者，而不是追随者。你的主动参与将提高你在整个组织中的形象，帮助你在很多看不见的方面。你在这些活动中花的时间，将会获得大量回报，因为它们可以提高你的工作执行能力。</p>\r\n<p style=\"text-align: left;\">　　4、自我管理</p>\r\n<p style=\"text-align: left;\">　　&ldquo;平级很难管理怎么办&rdquo;，这是网友的一个问题。看到这个问题时，我想起了米歇尔在美国大选之前的平民党全国大会上，这样描述自己的想法，&ldquo;When they go low，wo go high&rdquo;。当你遇到你觉得很难相处人时，你需要告诉自己，保持自己的职业素养，不要轻易被别人激怒、烦恼，依然保持一颗平常心，努力把自己的工作做好。</p>\r\n<p style=\"text-align: left;\">　　对于平级的人，你确实拿他没办法，我的建议是找你们共同的领导反映你的困惑，或者通过你的领导找他们的领导，由领导层沟通。对于所有的管理类问题，我觉得首先要自我检查，确保不是自身问题，然后是沟通，保持高效、简单的沟通，这样可以帮助你至少说出自己的困惑，最后是放松自我，不要被不值得的事情所烦恼，过好自己的每一天，全力做好自己的工作，不断提升自我价值，抽出时间陪伴家人，这才是你应该做的。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/10/08/9753196.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('6', '0', '优秀的技术管理者需要具备哪些能力？', '', '', '', '<p>　　今天的分享主要针对技术团队管理者品质、团队管理的四个维度、产品开发过程管理、系统架构理念等几点内容，时间有限，不能针对各个方面深入介绍，请大家见谅。其实我们作为技术团队管理者，每天都需要关注技术、产品的发展趋势，也需要具备产品意识，所以我们的工作范围也会包括新技术理解（英文文章阅读和翻译、技术框架原型搭建）、产品布局（专利）等等。</p>\r\n<p>　　对于一名技术团队管理者来说，他需要具备一些品质，例如成熟、勇敢、热爱技术、勤奋、脚踏实地、逻辑能力、公平、一线作战精神、决策能力、开放姿态、为人处世、真诚、宽容、仔细、终身学习、时间管理、以人为本、身体健康等，这里时间有限，我举几个例子。</p>\r\n<p style=\"text-align: center;\">　　<img src=\"https://img2018.cnblogs.com/blog/854257/201809/854257-20180930104119151-1672653821.png\" alt=\"\" /></p>\r\n<p style=\"text-align: left;\">　　1、成熟</p>\r\n<p style=\"text-align: left;\">　　技术团队内部有一些员工，也许他们不善言辞、不会说好听的话，但是只要你交给的任务，一定尽全力完成，遇到有不懂的地方会主动请示、沟通、个人姿态摆的很低，这样的员工内心成熟，知道如何完事，体谅上级，努力工作，而不是把精力放在工作之外的地方，这样的员工是团队的中坚力量，是不可或缺的成员。我认为衡量一个团队的凝聚力是否强大，看看这类员工占比多少就知道了，缺少这类员工的团队，一定不会有什么了不起的成绩。</p>\r\n<p style=\"text-align: left;\">　　每天回到家，我开始我的另一份职责，洗澡、洗衣服、陪孩子学习、陪家人聊天、写作，这就是生活，一个男人结婚、生孩子的生活一定是与单身时不一样对的，也不要觉得这不是男人干的活，要能理解生活，主动且乐于承担生活的重担。</p>\r\n<p style=\"text-align: left;\">　　坦率地说，我作为一名技术面试官，一直对较为成熟的、能吃苦的、能理解别人的人，情有独钟。身在职场，我们都需要可靠的团队成员一起帮扶前进，团队很重要。任何不成熟的人，最终都会在职场上流漏出他的自私、明哲保身、浮躁、乱说话、懦弱等品质，所以一些自认为能力很强，认为自己不受重用、永远在底层的员工，在埋怨领导之前，你应该多多自我反省，是不是工作职责没有承担起来，是不是自己的为人处世让别人很难堪而不自知，是不是开口闭口都是以自我为中心。</p>\r\n<p style=\"text-align: left;\">　　2、勇敢</p>\r\n<p style=\"text-align: left;\">　　我们作为团队负责人，也应该有英汉本色，不能惧怕外在的威胁，团队成员都在看着你，你绝不能懦弱，要勇敢。举个例子，很多时候并不是你想团队怎么发展就怎么发展，很有可能你的团队刚刚明确产品目标、技术目标，人员也根据这些目标招聘到位，正准备大干一场的时候，忽然听说也有另外一个团队在做一模一样的事情，别以为这是笑话，很多大公司都存在这类问题，即缺少顶层设计（也许是顶层故意设计的，让两个团队竞争）。面对这类情况，你可以选择退缩，转向另外的方向，也可以选择混混日子，等着被解散，我觉得无论哪种选择，你的团队都有可能瓦解，谁都有自己的职业定位，想做的产品、技术没了，有能力的人就不跟你玩了。我个人倾向的是，在领导不明确谁做的前提下，对内组织团队尽全力做下去、做好，对外力挑责任。</p>\r\n<p style=\"text-align: left;\">　　我想到了电视剧《长沙保卫战》的对话，参谋长对薛岳将军说：&ldquo;你若下地狱，我绝不上天堂&rdquo;。这也是我在团队遇到严重挑战的时候，我对所有成员说的第一句话，想做成事情，你或者你的核心下属，必须站出来。</p>\r\n<p style=\"text-align: left;\">　　3、热爱技术</p>\r\n<p style=\"text-align: left;\">　　虽然我个人不太认同阿里的一些价值观，但是他们确实在技术上做的蛮多的工作，推动了一些技术的发展。2016年&ldquo;天猫双11全球狂欢节&rdquo;，单日交易定额在1207亿元，被阿里定义为整个社会走向&ldquo;新零售、新制造、新金融、新技术、新资源&rdquo;的起点。经过8年的双11锻炼，2016年阿里技术创造了惊人的记录&mdash;&mdash;每秒同时创建17.5万笔订单以及1秒同时完成12万笔支付，支撑起了全球范围内最庞大且复杂的交易体系和交易规模。正如阿里CTO所说，如果没有对梦想的坚持，以及对实现梦想的不懈努力，阿里不会是现在的阿里。实现梦想需要有强大的技术实力的强力支撑，阿里如果不打破传统Hadoop框架的藩篱，自研非常高效的离线和实时计算平台，用户在交易过程中就不可能有现在的体验。</p>\r\n<p style=\"text-align: left;\">　　说点自己的想法。我对团队的技术要求一直都是&ldquo;我们输出或者呈现给别人的技术能力，需要且必须是公司内部占据技术权威之一，说是之一，是因为不能否认公司内部类似技术领域部门的技术能力。我们必须让别人知道我们是专家，我们团队很牛。如果被别人列举我们团队技术怎么差，我会认为这是对我人格的侮辱，我会非常的愤怒，只要我是这个团队的领导，我决不允许这种情况发生&rdquo;。有一点需要注意，只有做好当前的事情，你才有资格谈技术理想。</p>\r\n<p style=\"text-align: left;\">　　4、一线作战精神</p>\r\n<p style=\"text-align: left;\">　　2年前的一个夏天，我带领的团队购买了10多台服务器，用于分布式计算实验。收到货的消息（到货时间很难就算，所以没有提前联系货车），相信一般领导都会让下属或自己联系货车，但是我评估了一下时间，需要等2周时间。我们等不起，所以我带着1个下属，骑着自行车到了仓库，然后和大客车师傅商量是否可以把机器放在行李层进行运输，得到肯定的答复后我俩把服务器运上车，然后我让他骑车回去，我跟着车一起回，回来的路上给其他的组员打电话，全部到楼下集合，自己抬上去。一个下午完成服务器运送、搭建、调试网络等等所有工作（路由器、插线板、网线等等我已经提前准备好了）。这是我说理解的一线作战精神、作战方式。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/30/9729637.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('7', '0', '看完这些面试题，你就知道自己几斤几两了！', '', '', '', '<p><strong>　　</strong>这些面试题偏向中级到高级，可能你都没遇到过的！下面大家来看看吧，认真点的可以到网上搜搜问题的答案，说不定能帮到你进阶PHP！</p>\r\n<p> </p>\r\n<p>　　0、简单做一下自我介绍,? 然后谈一下近三年来你的得意之作?</p>\r\n<p> </p>\r\n<p>　　1、面试官看过你的简历，会问一些你做的项目的用户量、pv、吞吐量、相关难点和解决方法等</p>\r\n<p> </p>\r\n<p>　　2、数据库设计经验,为什么进行分表? 分库?</p>\r\n<p>　　一般多少数据量开始分表? 分库? 分库分表的目的? 什么是数据库垂直拆分? 水平拆分? 分区等等？可以举例说明</p>\r\n<p> </p>\r\n<p>　　3、数据库优化有哪些? 分别需要注意什么?</p>\r\n<p> </p>\r\n<p>　　4、web开发方面会遇到哪些缓存? 分别如何优化?</p>\r\n<p> </p>\r\n<p>　　5、给你256M的内存,对10G的文件进行排序(文件每行1个数字),如何实现？</p>\r\n<p>　　对10G的文件进行查找如何实现？</p>\r\n<p>　　统计10G文件每个关键字出现的次数如何实现？</p>\r\n<p> </p>\r\n<p>　　6、假如你现在是12306火车订票的设计师,你该如何设计满足全国人民订票?</p>\r\n<p> </p>\r\n<p>　　7、假如有1亿用户的访问量,你的服务器架构是怎样的? 用户信息的存储方案如何设计?</p>\r\n<p> </p>\r\n<p>　　8、如果你是技术组长,所带团队任务进度无法完成你该如何解决?</p>\r\n<p>　　如果在进度排满的前提下插入任务,你该如何保证总进度不延期?</p>\r\n<p>　　如果有的工程师今天预定任务没有完成,你该如何解决?</p>\r\n<p> </p>\r\n<p>　　9、从你的经验方面谈一下如何构建高性能web站点? 需要哪些环节? 步骤? 每个步骤需要注意什么如何优化等?</p>\r\n<p> </p>\r\n<p>　　10、为什么要对数据库进行主从分离?</p>\r\n<p> </p>\r\n<p>　　11、如何处理多服务器共享session?</p>\r\n<p> </p>\r\n<p>　　12、 一个10G的表,你用php程序统计某个字段出现的次数,思路是?</p>\r\n<p> </p>\r\n<p>　　13、会告诉你一个nginx日志例子,用你认为最佳的编程语言统计一下http响应时间超过1秒的前10个url?</p>\r\n<p> </p>\r\n<p>　　14、给你一个mysql配置文件,用你认为最佳的编程语言解析该文件?</p>\r\n<p> </p>\r\n<p>　　15、给你两个路径a和b,写一个算法或思路计算a和b差距几层并显示a和b的交集?</p>\r\n<p> </p>\r\n<p>　　16、给你一个url,在nginx配置一下rewrite指定到某个具体路径?</p>\r\n<p> </p>\r\n<p>　　17、一个php文件的解释过程是? 一般加速php有哪些? 提高php整体性能会用到哪些技术?</p>\r\n<p> </p>\r\n<p>　　18、session和cookie生存周期区别? 存储位置区别?</p>\r\n<p> </p>\r\n<p>　　19、require、include、require_once、include_once区别? 加载区别? 如果程序按需加载某个php文件你如何实现?</p>\r\n<p> </p>\r\n<p>　　20、chrome号称为多线程的,所以多线程和多进程的区别为?</p>\r\n<p> </p>\r\n<p>　　21、php在2011年底出现hash碰撞,hash碰撞原理为? 如何进行修复?</p>\r\n<p> </p>\r\n<p>　　22、web不安全因素有哪些? 分别如何防范?</p>\r\n<p> </p>\r\n<p>　　23、假如两个单链表相交,写一个最优算法计算交点位置,说思路也可以?</p>\r\n<p> </p>\r\n<p>　　24、假如你是技术组长? 如何提高团队效率?</p>\r\n<p> </p>\r\n<p>　　25、nginx负载均衡有哪些? 如果其中一台服务器挂掉,报警机制如何实现?</p>\r\n<p> </p>\r\n<p>　　26、不优化前提下,apache一般最大连接数为? nginx一般最大连接数为? mysql 每秒insert ? select ? update ? delete?</p>\r\n<p> </p>\r\n<p>　　27、mysql 数据类型有哪些 ? 分别占用多少存储空间 ?</p>\r\n<p> </p>\r\n<p>　　28、nginx设置缓存js、css、图片等信息,缓存的实现原理是?</p>\r\n<p> </p>\r\n<p>　　29、如何提高缓存命中率? 如何对缓存进行颗粒化?</p>\r\n<p> </p>\r\n<p>　　30、php的内存回收机制是?</p>\r\n<p> </p>\r\n<p>　　31、我的所有问题都问完了,你有什么问题问我没有？</p>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/29/9722662.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('8', '0', 'nginx和php之间是怎样通信的呢？', '', '', '', '<p>　　FastCGI原理</p>\r\n<p class=\"best-text mb-10\">　　FastCGI是一个运用于Http Server和动态脚本语言间通信的接口，多数流行的Http Server都支持FastCGI，包括Apache、Nginx和lighttpd等。同时，FastCGI也被许多脚本语言支持，其中就有PHP。 FastCGI接口方式采用C/S结构，可以将HttP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者多个脚本解析守护进程。当HttP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程来执行，然后将得到的结果返回给客户端。这种方式可以让HttP服务器专一地处理静态请求或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。</p>\r\n<p>　　Nginx+php-fpm实现原理</p>\r\n<p class=\"best-text mb-10\">　　Nginx本身不会对PHP进行解析，终端对PHP页面的请求将会被Nginx交给FastCGI进程监听的IP地址及端口，由php-fpm作为动态解析服务器处理，最后将处理结果再返回给nginx。其实，Nginx就是一个反向代理服务器。Nginx通过反向代理功能将动态请求转向后端php-fpm，从而实现对PHP的解析支持，这就是Nginx实现PHP动态解析的原理。</p>\r\n<p class=\"best-text mb-10\">　　Nginx不支持对外部程序的直接调用或者解析，所有的外部程序（包括PHP）必须通过FastCGI接口来调用。FastCGI接口在Linux下是socket（这个socket可以是文件socket，也可以是ip socket）。为了调用CGI程序，还需要一个FastCGI的wrapper（wrapper可以理解为用于启动另一个程序的程序），这个wrapper绑定在某个固定socket上，如端口或者文件socket。当Nginx将CGI请求发送给这个socket的时候，通过FastCGI接口，wrapper接收到请求，然后派生出一个新的线程，这个线程调用解释器或者外部程序处理脚本并读取返回数据；接着，wrapper再将返回的数据通过FastCGI接口，沿着固定的socket传递给Nginx；最后，Nginx将返回的数据发送给客户端。</p>\r\n<p class=\"best-text mb-10\">　　Nginx 简单配置&nbsp;</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:bash;gutter:true;\">location ~ \\.php$ { \r\n    root /home/admin/web/nginx/html/; \r\n    fastcgi_pass 127.0.0.1:9000; \r\n    fastcgi_index index.php;\r\n    fastcgi_param SCRIPT_FILENAME /home/admin/web/nginx/html/$fastcgi_script_name; \r\n    include fastcgi_params; \r\n}</pre>\r\n</div>\r\n<p>　　当nginx接收到一个http请求时，通过配置文件找到对应的server。然后匹配server中的所有location，找到最匹配的。而在location中的命令会启动不同的模块去完成工作，比如rewrite模块、index模块。因此在nginx中模块可以看作真正的劳动工作者。nginx的模块是被编译到nginx中的，属于静态方式。启动nginx时，模块被自动加载。不像apache，把模块单独编译成so文件，在配置文件中指定是否加载。所以，单比模块加载方面，nginx也比apache速度上有提升。</p>\r\n<p>　　那nginx是怎么调用php的呢？先看下面的nginx中关于php的配置</p>\r\n<p> </p>\r\n<div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:bash;gutter:true;\">location ~ \\.php$ {\r\n    root /webpath;\r\n    fastcgi_pass 127.0.0.1:9000;\r\n    ...\r\n    ...         \r\n}</pre>\r\n</div>\r\n</div>\r\n<p>　　这个location指令把以php为文件后缀的请求，交给127.0.0.1:9000处理。我想你看到这个应该猜到了，这是一个C/S架构东西。 而这里的IP地址和端口（127.0.0.1:9000）就是fastcgi进程监听的IP地址和端口。fastcgi是一个可伸缩地、高速地在http server和动态脚本语言间通信的接口。多数流行的http server都支持fastcgi，包括apache、nginx和lighttpd等。同时，fastcgi也被许多脚本语言支持，其中就有php。</p>\r\n<p>那这个fastcgi的配置IP和端口从何而来呢？在php-fpm.conf中可以看到如下：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:bash;gutter:true;\">listen = 127.0.0.1:9000  #这个表示php的fastcgi进程监听的ip地址以及端口\r\npm.start_servers = 2</pre>\r\n</div>\r\n<p>　　php-fpm作为fastcgi的进程管理器，可以有效控制内存和进程，并且平滑重载php配置。php5.3以后，php-fpm被集成到php的core中，默认安装，无须配置。</p>\r\n<p>　　fastcgi进程管理器php-fpm自身初始化，启动主进程php-fpm和启动start_servers个fastcgi子进程。主进程php-fpm主要是管理fastcgi子进程，监听9000端口，fastcgi子进程等待请求。当客户端请求到达nginx时，nginx通过location指令，将所有以php为后缀的文件都交给 127.0.0.1:9000 来处理。php-fpm选择并连接到一个fastcgi子进程，并将环境变量和标准输入发送到fastcgi子进程。fastcgi子进程完成处理后将标准输出和错误信息返回。当fastcgi子进程关闭连接时，请求便告处理完成，等待下次处理。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/28/9720108.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('9', '0', 'php下获取http状态的实现代码', '', '', '', '<p>　　在项目开发中，有时我们需要知道远程的URL地址是否能访问正常，判断其正常与否后进行下一步的操作，那么在PHP中如何获取远程HTTP的状态呢?</p>\r\n<p>　　文件preg.php</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">header(\"HTTP/1.1 404 Not Found\");</pre>\r\n</div>\r\n<p>　　方式一、</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$url = \"http://www.demo.com/preg.php\";\r\n$ch = curl_init();\r\ncurl_setopt($ch, CURLOPT_URL, $url);\r\ncurl_setopt($ch, CURLOPT_HEADER, TRUE);\r\ncurl_setopt($ch, CURLOPT_NOBODY, TRUE); // remove body\r\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\r\n$head = curl_exec($ch);\r\n$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\r\necho $httpCode;\r\ncurl_close($ch);\r\n</pre>\r\n</div>\r\n<p>　　运行结果：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">404</pre>\r\n</div>\r\n<p>　　方式二、</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">echo \'<pre>\';\r\nprint_r(get_headers(\"http://www.demo.com/preg.php\",1));\r\n</pre>\r\n</div>\r\n<p>　　运行结果：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">Array\r\n(\r\n    [0] => HTTP/1.1 404 Not Found\r\n    [Date] => Fri, 28 Sep 2018 09:27:03 GMT\r\n    [Server] => Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.5.38\r\n    [X-Powered-By] => PHP/5.5.38\r\n    [Content-Length] => 0\r\n    [Content-Type] => text/html\r\n)</pre>\r\n</div>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/28/9719849.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('10', '0', 'PHP 常用的header头部定义汇总', '', '', '', '<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">header(\'HTTP/1.1 200 OK\'); // ok 正常访问\r\nheader(\'HTTP/1.1 404 Not Found\'); //通知浏览器 页面不存在\r\nheader(\'HTTP/1.1 301 Moved Permanently\'); //设置地址被永久的重定向 301\r\nheader(\'Location: http://www.ithhc.cn/\'); //跳转到一个新的地址\r\nheader(\'Refresh: 10; url=http://www.ithhc.cn/\'); //延迟转向 也就是隔几秒跳转\r\nheader(\'X-Powered-By: PHP/6.0.0\'); //修改 X-Powered-By信息\r\nheader(\'Content-language: en\'); //文档语言\r\nheader(\'Content-Length: 1234\'); //设置内容长度\r\nheader(\'Last-Modified: \'.gmdate(\'D, d M Y H:i:s\', $time).\' GMT\'); //告诉浏览器最后一次修改时间\r\nheader(\'HTTP/1.1 304 Not Modified\'); //告诉浏览器文档内容没有发生改变\r\n   \r\n###内容类型###\r\nheader(\'Content-Type: text/html; charset=utf-8\'); //网页编码\r\nheader(\'Content-Type: text/plain\'); //纯文本格式\r\nheader(\'Content-Type: image/jpeg\'); //JPG、JPEG \r\nheader(\'Content-Type: application/zip\'); // ZIP文件\r\nheader(\'Content-Type: application/pdf\'); // PDF文件\r\nheader(\'Content-Type: audio/mpeg\'); // 音频文件 \r\nheader(\'Content-type: text/css\'); //css文件\r\nheader(\'Content-type: text/javascript\'); //js文件\r\nheader(\'Content-type: application/json\'); //json\r\nheader(\'Content-type: application/pdf\'); //pdf\r\nheader(\'Content-type: text/xml\'); //xml\r\nheader(\'Content-Type: application/x-shockw**e-flash\'); //Flash动画\r\n   \r\n######\r\n   \r\n###声明一个下载的文件###\r\nheader(\'Content-Type: application/octet-stream\');\r\nheader(\'Content-Disposition: attachment; filename=\"ITblog.zip\"\');\r\nheader(\'Content-Transfer-Encoding: binary\');\r\nreadfile(\'test.zip\');\r\n######\r\n   \r\n###对当前文档禁用缓存###\r\nheader(\'Cache-Control: no-cache, no-store, max-age=0, must-revalidate\');\r\nheader(\'Expires: Mon, 26 Jul 1997 05:00:00 GMT\');\r\n######\r\n   \r\n###显示一个需要验证的登陆对话框### \r\nheader(\'HTTP/1.1 401 Unauthorized\'); \r\nheader(\'WWW-Authenticate: Basic realm=\"Top Secret\"\'); \r\n######\r\n   \r\n   \r\n###声明一个需要下载的xls文件###\r\nheader(\'Content-Disposition: attachment; filename=ithhc.xlsx\');\r\nheader(\'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\');\r\nheader(\'Content-Length: \'.filesize(\'./test.xls\')); \r\nheader(\'Content-Transfer-Encoding: binary\'); \r\nheader(\'Cache-Control: must-revalidate\'); \r\nheader(\'Pragma: public\'); \r\nreadfile(\'./test.xls\'); \r\n######\r\n</pre>\r\n</div>\r\n<p>　　</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/28/9719787.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('11', '0', 'APP接口版本不兼容怎么办？ 教你一招', '', '', '', '<p>　　现在基本每个公司都做APP，所以大家都面临 APP接口版本兼容的问题。</p>\r\n<p>　　iOS和android 要不断开发新版本，很多服务端开发都是在以前接口的逻辑上进行修改。新的APP和接口开发后，接口如何兼容老的APP？</p>\r\n<p>　　有的公司 每次发布完APP，就强制用户更新到最新版本。不推荐这样，因为用户体验太差。</p>\r\n<p>　　就算是用 强制更新，在苹果审核期间，新的APP接口和老的接口也必须能同时使用。</p>\r\n<p>　　下面我们说下如何做，大家有不同意见可以 留言讨论。</p>\r\n<h2>　　一、客户端做兼容，接口不用做兼容</h2>\r\n<p>　　1、APP强制更新（不建议）</p>\r\n<p>　　接口URL：api.xxx.com/v1.0/xxxx.java</p>\r\n<p>　　接口的URL中加入版本号，如上：v1.0。</p>\r\n<p>　　每次发布新APP版本就强制更新。</p>\r\n<p>　　灰度服务器部署正在审核中的接口版本（如：v1.1）。等审核通过后，将老版本的APP设置强制更新，这样老的接口就不用了。</p>\r\n<p>　　然后把线上服务器重新部署上最新的代码，再去掉灰度服务器。</p>\r\n<p>　　这样APP接口全部访问正式的线上服务器。</p>\r\n<p>　　2、热更新</p>\r\n<p>　　紧急的小需求可以用热更新，大的需求建议还是用原生的代码，因为你用热更新修改完（用JS或Lua），最后还要在原生代码里修改。</p>\r\n<p>　　网游用热更新的比较多，因为网游的APP太大，不可能加个小关卡 就要求用户重新下载，并且游戏更新比企业级APP更频繁，用热更新可以不断新加关卡、场景、活动推广。</p>\r\n<p style=\"text-align: center;\"><img src=\"https://img2018.cnblogs.com/blog/854257/201809/854257-20180928112650994-1605818244.png\" alt=\"\" /></p>\r\n<p style=\"text-align: left;\">　　3、React NaTIve 和Weex</p>\r\n<p style=\"text-align: left;\">　　Weex比React NaTIve好用，建议大家可以尝试下。个人建议先不要 大范围用它们来做，毕竟它们只是第三方的东西，有的东西也不太完善。</p>\r\n<h3 style=\"text-align: left;\">　　二、服务端做 版本兼容</h3>\r\n<p>　　全部接口版本是否统一：</p>\r\n<p>　　所有的接口都用相同的版本号：这样要发一个APP新版本就统一修改版本号，好修改，但是如果想修改其中一个接口的版本号就不行了。</p>\r\n<p>　　每个接口的版本号可以不一样：这样比较灵活，建议这样做。</p>\r\n<p>　　下面的见解如果有错误，希望指正。</p>\r\n<p>　　1、每个接口逻辑里加if 判断（不建议）</p>\r\n<p>　　接口URL：api.xxx.com/api？version=v1&.。</p>\r\n<p>　　if （version == &lsquo;1.5.0&rsquo;） {</p>\r\n<p>　　　　do_something</p>\r\n<p>　　} else if （version ==&lsquo;1.4.0&lsquo;） {</p>\r\n<p>　　　　do_something</p>\r\n<p>　　}</p>\r\n<p>　　优点：实现简单</p>\r\n<p>　　缺点：不同版本的逻辑都在一个方法里，在于容易造成代码混乱，不利于维护。</p>\r\n<p>　　2、不同的文件夹</p>\r\n<p>　　相当于每个接口版本都是一个独立的项目。放到服务器的独立文件夹里。</p>\r\n<p>　　例如：</p>\r\n<p>　　接口URL：api.xxx.com/v1.0/xxxx.php</p>\r\n<p>　　文件夹位置：Controller/V1.0/</p>\r\n<p>　　-----------------/xxxx.php</p>\r\n<p>　　文件夹位置：Controller/V2.1/</p>\r\n<p>　　-----------------/xxxx.php</p>\r\n<p>　　优点：版本逻辑分开维护。看url就能知道哪个版本。删除多余版本 不用修改代码。</p>\r\n<p>　　缺点：同个接口不同版本文件是重复的。并且如果有个接口前几版就有问题，一直遗留到现在，就需要改好几套一样的代码。</p>\r\n<p>　　3、不同版本用不同的方法 ：</p>\r\n<p>　　类似：</p>\r\n<p>　　接口URL：api.xxx.com/v1.0/xxxx.php</p>\r\n<p>　　class XXXX{</p>\r\n<p>　　　　public funcTIonV1_0（） { }</p>\r\n<p>　　　　public funcTIonV2_0（） { }</p>\r\n<p>　　}</p>\r\n<p>　　java或者C# 都有路由配置，可以用路由配置不同版本的URL跳转到不同的方法里。</p>\r\n<p>　　4、用继承的方式</p>\r\n<p>　　&ldquo;一瓶真情&rdquo;在评论中回复：采用继承的方式，既可以利用之前的接口代码，又可以采用override的方式修改部分接口的实现。</p>\r\n<p>　　这样是可以的。但是如果你上个版本（也就是父类）修改了代码，就会影响后面的所有版本。</p>\r\n<p>　　在线上有bug或者需求变更的时候很可能会修改基类。</p>\r\n<p>　　大家可以讨论下。</p>\r\n<p>　　5、部署到不同的服务器</p>\r\n<p>　　&ldquo;xuanbg&rdquo;在评论中回复：</p>\r\n<p>　　不同版本不同分支，部署在不同的服务器上。如果某个版本用不到了，直接干掉服务就好了。</p>\r\n<p>　　例如我现在的API要从1.x升到不兼容的2.0版本了，那就给当前的发布分支打个Tag。等哪天1.x版的API需要fix bug，就能很简单地从这个Tag切一个1.x的分支出来fix bug后进行测试发布，而且这个分支不会合并到任何分支，所以不会影响其他版本。</p>\r\n<p>　　这个方案 不好的地方在于，如果2.0也有同样bug的话，也要在2.0分支上改一遍。如果版本很多的话，这活就不好干了。所以呢，一般不会同时发布两个以上的版本，在升级不兼容的第三个版本前，一定会把第一个版本干掉。</p>\r\n<p>　　但是比如 淘宝、微信 ，有的时候忘记更新了，你会发现淘宝已经升级过4、5个版本了，然后老版本还能用。也就是有的APP确实需要兼容4、5个版本。</p>\r\n<p>　　另外，如果要兼容过多的版本，服务器也需要够多才行。同时，因为老版本的人用的少，也就是有的服务器访问量很少，有的服务器访问量很多。不能真正的负载均衡，浪费了服务器资源。</p>\r\n<p>　　6、混合使用</p>\r\n<p>　　&ldquo; Tokyo^hot&rdquo;在回复中说到两种方式的混合使用。服务端的几种方法混用：</p>\r\n<p>　　6.1、第3种和第4种方法一起用。先用继承，如果新版本和以前的版本无法复用，就用路由设置新的方法。</p>\r\n<p>　　6.2、第1种方法和第3中方法一起用，简单的小改动用 第1种，加个if判断。改动较大的用 第3种，新开个方法。</p>\r\n<h3>　　三、结尾</h3>\r\n<p>　　如果大家有什么好办法，可以留言，谢。</p>\r\n<p>　　接口兼容其实主要是服务端的任务。APP的工作量相对简单。</p>\r\n<p>　　大家都是怎么做的？</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/28/9717744.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('12', '0', '微信公众号与小程序数据互通', '', '', '', '<h3>　　背景</h3>\r\n<p>　　最近做了一个有意思的功能《官网内容订阅》，用户在官网扫码后可以订阅官网栏目，订阅栏目后发送模版消息提醒用户订阅成功，模版消息关联了小程序，然后做了一个小程序来管理用户订阅的栏目，小程序提供订阅和新闻列表阅读功能。</p>\r\n<h3>　　实现技术调研分析</h3>\r\n<p>　　通过背景描述我们知道需要实现两块登录：1、官网扫码二维码登录；2、用户直接进小程序实现登录。要实现两块登录且要求用户从任意一个入口登录都需要确定为同一个用户，所以需要打通公众号与小程序的用户数据。幸运的是微信公众平台提供了unionid机制：</p>\r\n<p>　　如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过unionid来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的unionid是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，unionid是相同的。&nbsp;</p>\r\n<p>　　因此，第一步需要申请微信开放平台的开发者资质，成为开发者资质之后，可以在微信开放平台绑定需要打通数据的公众号和小程序，让他们拥有相同的unionid，那么接下来的工作就是实现扫码登录与小程序登录后数据互通。</p>\r\n<h3>　　扫码登录实现</h3>\r\n<p>　　用户扫码登录状态时序图，用户在浏览游戏官网时发现自己喜欢的栏目，点击点阅栏目时，浏览器将请求微管家服务器获取二维码，同时轮询服务器用户的扫码状态，第三方服务器通过前端给的网站域名查询对应的公众号信息，去微信后台请求场景值二维码，并返回给浏览器， 浏览器展示给用户二维码，用户扫码二维码后，服务器会获取用户的个人信息，并将用户信息和扫码状态告知浏览器（浏览器一直在轮询用户扫码状态），同时种下浏览器cookie，此时相当面用户已经用微信登录且获取微信昵称和头像信息，用户可以去订阅其他栏目。具体流程请参考下图。需要注意的时候用户扫码登录之后，要使用用户的unionid作为用户的唯一标识，方便下一步关联的小程序登录。</p>\r\n<p style=\"text-align: center;\"> <img src=\"https://img2018.cnblogs.com/blog/854257/201809/854257-20180928095106464-1318405386.png\" alt=\"\" /></p>\r\n<h3 style=\"text-align: left;\">　　小程序登录实现</h3>\r\n<p>　　小程序登录请查考<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-login.html\" rel=\"nofollow\" target=\"_blank\">小程序官网文档</a>，需要注意两个点：1、维护用户的登录状态；2、用户同意登录授权后需要获取用户个加密个人信息（unionid）。第一步的用户登录状态维护时序图如下，第二步非常重要，在用户授权同时请求第三方服务器来进行登录获取session时，需要将用户的encryptedData数据数据传回第三方服务器，解密出用户unionid，通过服务器配置的小程序与公众号关联关系，同步用户数据。</p>\r\n<p style=\"text-align: center;\"><img src=\"https://img2018.cnblogs.com/blog/854257/201809/854257-20180928095427938-1433135085.png\" alt=\"\" /></p>\r\n<h3 style=\"text-align: left;\">　　总结</h3>\r\n<p>　　通过上面两步登录设计开发即可打通该功能的两种用户数据，然后可以根据用户订阅扫码情况发送模版消息直接打开小程序，用户在pc浏览器页面所订阅的栏目与小程序的订阅数据一致。  这里面的关键点就是用户unionid机制，通过该机制可以打通多个公众号、小程序之间的用户数据，上面的案例只是一个小小的应用场景，还有更多的想象空间，结合场景值二维码和模版消息的应用，收集用户信息与用户行文，后期可以考虑对用户提供精准的推送服务。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/28/9716956.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('13', '0', 'PHP 利用文件锁处理高并发', '', '', '', '<p>　　利用flock()函数对文件进行加锁（排它锁），实现并发按序进行。</p>\r\n<p>　　flock(file,lock,block)有三个参数。</p>\r\n<p>　　file：已经打开的文件</p>\r\n<p>　　lock：锁的类型</p>\r\n<p>　　　　LOCK_SH：共享锁（读锁）</p>\r\n<p>　　　　LOCK_EX：独占锁定（排它锁，写锁）</p>\r\n<p>　　　　LOCK_UN：解锁</p>\r\n<p>　　　　LOCK_NB：如果希望在文件锁定时阻塞进程，那么需要加上该参数</p>\r\n<p>　　block：设置为true的时候，锁定文件时，会阻止其他进程</p>\r\n<p>　　下面是一个demo：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">class Order{\r\n\r\n    /**\r\n     * 阻塞模式（后面的进程会一直等待前面的进程执行完毕）\r\n     */\r\n    public function createOrder1(){\r\n        $file = fopen(__DIR__.\'/lock.txt\',\'w+\');\r\n        //加锁\r\n        if(flock($file,LOCK_EX)){\r\n            //TODO 执行业务代码\r\n            flock($file,LOCK_UN);//解锁\r\n        }\r\n        //关闭文件\r\n        fclose($file);\r\n    }\r\n\r\n    /**\r\n     * 非阻塞模式（只要当前文件有锁存在，那么直接返回）\r\n     */\r\n    public function createOrder2(){\r\n        $file = fopen(__DIR__.\'/lock.txt\',\'w+\');\r\n        //加锁\r\n        if(flock($file,LOCK_EX|LOCK_NB)){\r\n            //TODO 执行业务代码\r\n            flock($file,LOCK_UN);//解锁\r\n        }else{\r\n            //TODO 执行业务代码 返回系统繁忙等错误提示\r\n        }\r\n        //关闭文件\r\n        fclose($file);\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>　　小提示：在执行fclose()的时候文件会自动解锁，所以可以省略解锁的代码。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/26/9708380.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('14', '0', '注意：PHP7中十个需要避免的坑', '', '', '', '<h3>　　1、不要使用mysql_函数</h3>\r\n<p>　　这一天终于来了，从此你不仅仅&ldquo;不应该&rdquo;使用mysql_函数。PHP7已经把它们从核心中全部移除了，也就是说你需要迁移到好得多的mysqli_函数，或者更灵活的PDO实现。</p>\r\n<h3>　　2、不要编写垃圾代码</h3>\r\n<p>　　这一条可能易于理解，但是会变得越来越重要，因为PHP7的速度提升可能会隐藏你的一些问题。不要仅仅满足于你的站点速度，因为迁移到PHP7才让它变快。</p>\r\n<p>　　作为一名开发者，你应该总是确保按需加载脚本，尽可能连接它们，编写高效的数据查询，尽可能使用缓存，以及其他。</p>\r\n<h3>　　3、不要在文件末尾使用PHP闭合标签</h3>\r\n<p>　　你可以看一看，当一个文件以PHP代码结尾时，wordpress多数核心代码都把末尾的PHP标签去掉了。实际上，zend框架特别禁止了它。PHP并不需要文件末尾的闭合标签，并且我们可以通过去掉它保证不会再后面添加任何空白字符。</p>\r\n<h4>　　4、不要做不必要的引用传递</h4>\r\n<p>　　我个人不喜欢引用传递。我知道有时候它很实用，但是其他情况下它使代码变得难懂，并且更难预测结果。</p>\r\n<p>　　据说一些人认为它使代码运行更快，但是根据一些PHP高级程序员说，这并不正确。</p>\r\n<p>　　说明引用为什么不好的一个例子是，PHP内建了shuffle()和sort()。它们修改原始数组，而不是返回处理后的数据，这很不合逻辑。</p>\r\n<h3>　　5、不要在循环中执行查询</h3>\r\n<p>　　在循环中执行查询非常浪费。它给你的系统施加不必要的压力，并且可能能够在循环外部更快获得相同结果。当我遇到需要这样的情况时，我通常会使用两个分离的查询来解决问题。我会使用它们来构建数据数组。之后我会遍历数组，并不需要在这个过程中执行查询。</p>\r\n<p>　　由于wordpress适用于这里，它可能有一些例外。虽然get_post_meta()会从数据库获取大量数据，如果你正在遍历某个特殊博文的元数据你可以在循环中使用它。这是因为当你第一次调用它的时候，wordpress实际上会获取所有元数据并缓存它们。后续的调用使用这些数据，没有数据库的调用。</p>\r\n<p>　　弄懂这些的最佳方式是阅读函数文档，以及使用类似Query Monitor的工具。</p>\r\n<h3>　　6、不要在SQL查询中使用*</h3>\r\n<p>　　当然，这个更像MySQL的问题，但是我们习惯在PHP编写SQL代码，所以都差不多。无论如何，如何可以避免的话，不要在SQL查询里使用通配符，尤其是数据库有很多列的时候。</p>\r\n<p>　　你应该明确需要哪些行，并且仅仅获取它们。这有助于减少所用资源，保护数据，以及让事情变得尽可能清晰。</p>\r\n<p>　　对于SQL，你需要了解所有可用的函数，并且尽可能测试其速度。在计算均值、求和或计算类似数值时，要使用SQL函数而不是PHP函数。如果你不确定某个查询的速度，测试它并且尝试一些其他的编译&mdash;&mdash;之后使用最好的那个。</p>\r\n<h3>　　7、不要信任用户输入</h3>\r\n<p>　　信任用户输入是不明智的。始终校验、过滤、转义、检查并留好退路。用户数据存在三个问题：我们开发者并没有考虑每一种可能性，它通常不正确，以及它可能是蓄意破坏。</p>\r\n<p>　　经过周密考虑的系统可以防护这些威胁。要确保使用类似filter_var()的内建函数检查适当的值，以及在处理数据库时转义（或预编译）。</p>\r\n<h3>　　8、不要故作聪明</h3>\r\n<p>　　你的目标是编写优雅的代码，来更清晰地表达你的意图。你可能能够通过将任何东西缩短为一个单词的变量，使用多层的三元逻辑，以及其他手段，从每个页面中优化0.01秒。但这只会给你和你周围的人产生大麻烦。</p>\r\n<p>　　合理命名变量，为代码编写文档，优先选择清晰而不是简洁。甚至还可以更好，使用标准的面向对象代码，它本身或多或少就是文档，不需要一大堆内联数组。</p>\r\n<h3>　　9、不要重新发明轮子</h3>\r\n<p>　　PHP到现在为止有很长时间了，网站呃逆造出来的时间更长。很可能无论你需要造出什么，一些人之前早就造出来了。不要害怕向他人寻求支持。Github是你的好朋友，Composer也是，Packagist也是。</p>\r\n<p>　　从日志工具到调色工具，从性能分析到单元测试框架，从Mailchimp API到Twitter Bootstrap，每个东西都可以通过按下按键（或者敲下命令）来获取，使用它们吧！</p>\r\n<h3>　　10、不要忽略其他语言</h3>\r\n<p>　　如果你是个PHP程序员，当你能更好的了解HTML、CSS、javascript和MySQL时。就是重新学习Javascript的时机了。Javascript并不是jQuery，你应该合理地学习Javascript来更高效地使用它。</p>\r\n<p>　　还有面向对象的PHP，它可以节省时间，并且在代码规模更大时会变得更好。对于类似C#或Java的语言，在你了解OOP之后，它们也更容易理解。</p>\r\n<p>　　通过了解管理器、构建脚本、CoffeeScript、LESS、SASS、YAML、脚本引擎和其他强大的工具来扩展你的知识面。我强烈向你推荐看一看其他框架，尤其Laravel。</p>\r\n<p>　　当你使用它们出色完成任务时，学习Ruby、RoR、Android、Iphone和Windows Phone应用开发如何？你可能会认为这毫无意义，因为它们在你的舒适区和工作所需范围之外，但是这就是它们的意义。每一种语言都有一些要学习的实用的东西，以及从没碰到的新知识。所以PHP顶级开发者都懂你的很多其他编程语言，这并非偶然。</p>\r\n<p>　　</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/20/9682315.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('15', '0', 'MySQL的or/in/union与索引优化', '', '', '', '<p>　　假设订单业务表结构为：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">order(oid, date, uid, status, money, time, &hellip;)\r\n</pre>\r\n</div>\r\n<p>　　其中：</p>\r\n<ul class=\"list-paddingleft-2\">\r\n<li>\r\n<p><span lang=\"EN-US\">oid，订单<span lang=\"EN-US\">ID，<strong>主键</strong></span></span></p>\r\n</li>\r\n<li>\r\n<p><span lang=\"EN-US\">date，下单日期，有<strong>普通索引</strong>，管理后台经常按照<span lang=\"EN-US\">date查询</span></span></p>\r\n</li>\r\n<li>\r\n<p><span lang=\"EN-US\">uid，用户<span lang=\"EN-US\">ID，有<strong>普通索引</strong>，用户查询自己订单</span></span></p>\r\n</li>\r\n<li>\r\n<p><span lang=\"EN-US\">status，订单状态，有<strong>普通索引</strong>，管理后台经常按照<span lang=\"EN-US\">status查询</span></span></p>\r\n</li>\r\n<li>\r\n<p><span lang=\"EN-US\">money/time，订单金额<span lang=\"EN-US\">/时间，被查询字段，无索引</span></span></p>\r\n</li>\r\n<li>\r\n<p>&hellip;</p>\r\n</li>\r\n</ul>\r\n<p><span lang=\"EN-US\"><span lang=\"EN-US\">　　假设订单有三种状态：<span lang=\"EN-US\">0已下单，<span lang=\"EN-US\">1已支付，<span lang=\"EN-US\">2已完成</span></span></span></span></span></p>\r\n<p><span lang=\"EN-US\"><span lang=\"EN-US\"><span lang=\"EN-US\"><span lang=\"EN-US\"><span lang=\"EN-US\">　　业务需求，查询未完成的订单，哪个<span lang=\"EN-US\">SQL更快呢？</span></span></span></span></span></span></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where status!=2;\r\nselect * from order where status=0 or status=1;\r\nselect * from order where status IN (0,1);\r\nselect * from order where status=0 union all select * from order where status=1;\r\n</pre>\r\n</div>\r\n<p>　　结论：<strong>方案1最慢，方案2，3，4都能命中索引</strong></p>\r\n<p><strong>　　但是... </strong></p>\r\n<p><strong>　　<strong>一：<span lang=\"EN-US\">union all 肯定是能够命中索引的</span></strong></strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where status=0 union all select * from order where status=1\r\n</pre>\r\n</div>\r\n<p>　　说明：</p>\r\n<ul class=\"list-paddingleft-2\">\r\n<li>\r\n<p>直接告诉<span lang=\"EN-US\">MySQL怎么做，<span lang=\"EN-US\">MySQL耗费的<span lang=\"EN-US\">CPU最少</span></span></span></p>\r\n</li>\r\n<li>\r\n<p>程序员并不经常这么写<span lang=\"EN-US\">SQL(union all)</span></p>\r\n</li>\r\n</ul>\r\n<p><span lang=\"EN-US\">　　<strong>二：简单的<span lang=\"EN-US\">in能够命中索引</span></strong></span></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where status in (0,1)\r\n</pre>\r\n</div>\r\n<p>　　说明：</p>\r\n<ul>\r\n<li>\r\n<p>让<span lang=\"EN-US\">MySQL思考，查询优化耗费的<span lang=\"EN-US\">cpu比<span lang=\"EN-US\">union all多，但可以忽略不计</span></span></span></p>\r\n</li>\r\n<li>\r\n<p>程序员最常这么写<span lang=\"EN-US\">SQL(in)，这个例子，最建议这么写</span></p>\r\n</li>\r\n</ul>\r\n<p><span lang=\"EN-US\">　　<strong>三：对于<span lang=\"EN-US\">or，新版的<span lang=\"EN-US\">MySQL能够命中索引</span></span></strong></span></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where status=0 or status=1\r\n</pre>\r\n</div>\r\n<p>　　说明：</p>\r\n<ul class=\"list-paddingleft-2\">\r\n<li>\r\n<p>让<span lang=\"EN-US\">MySQL思考，查询优化耗费的<span lang=\"EN-US\">cpu比<span lang=\"EN-US\">in多，别把负担交给<span lang=\"EN-US\">MySQL</span></span></span></span></p>\r\n</li>\r\n<li>\r\n<p>不建议程序员频繁用<span lang=\"EN-US\">or<span lang=\"EN-US\">，不是所有的<span lang=\"EN-US\">or都命中索引</span></span></span></p>\r\n</li>\r\n<li>\r\n<p>对于老版本的MySQL，建议查询分析下</p>\r\n</li>\r\n</ul>\r\n<p>　　<strong>四、对于<span lang=\"EN-US\">!=，负向查询肯定不能命中索引</span></strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where status!=2\r\n</pre>\r\n</div>\r\n<p>　　说明：</p>\r\n<ul class=\"list-paddingleft-2\">\r\n<li>\r\n<p>全表扫描，效率最低，所有方案中最慢</p>\r\n</li>\r\n<li>\r\n<p>禁止使用负向查询</p>\r\n</li>\r\n</ul>\r\n<p>　　<strong>五、其他方案</strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where status < 2\r\n</pre>\r\n</div>\r\n<p>　　这个具体的例子中，确实快，但是：</p>\r\n<ul class=\"list-paddingleft-2\">\r\n<li>\r\n<p>这个例子只举了<span lang=\"EN-US\">3个状态，实际业务不止这<span lang=\"EN-US\">3个状态，并且状态的&ldquo;值&rdquo;正好满足偏序关系，万一是查其他状态呢，SQL不宜依赖于枚举的值，方案不通用</span></span></p>\r\n</li>\r\n<li>\r\n<p>这个<span lang=\"EN-US\">SQL可读性差，可理解性差，可维护性差，强烈不推荐</span></p>\r\n</li>\r\n</ul>\r\n<p><span lang=\"EN-US\">　　<strong>六、作业</strong></span></p>\r\n<p><span lang=\"EN-US\">　　这样的查询能够命中索引么？</span></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where uid in (\r\n         select uid from order where status=0\r\n);\r\nselect * from order where status in (0, 1) order by date desc;\r\nselect * from order where status=0 or date <= CURDATE();\r\n</pre>\r\n</div>\r\n<p>　　</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/18/9670630.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('16', '0', '或许你不知道的10条SQL技巧', '', '', '', '<p>　　<strong>一、一些常见的<span lang=\"EN-US\">SQL实践</span></strong></p>\r\n<p><strong><span lang=\"EN-US\">　　<strong>（<span lang=\"EN-US\">1）负向条件查询不能使用索引</span></strong></span></strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where status!=0 and stauts!=1\r\n</pre>\r\n</div>\r\n<p>　　<span lang=\"EN-US\">not in/not exists都不是好习惯，可以优化为<span lang=\"EN-US\">in查询：</span></span></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where status in(2,3)\r\n</pre>\r\n</div>\r\n<p>　　<strong>（<span lang=\"EN-US\">2）前导模糊查询不能使用索引</span></strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where desc like \'%XX\'\r\n</pre>\r\n</div>\r\n<p>　　而非前导模糊查询则可以：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where desc like \'XX%\'\r\n</pre>\r\n</div>\r\n<p>　　<strong>（<span lang=\"EN-US\">3）数据区分度不大的字段不宜使用索引</span></strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from user where sex=1\r\n</pre>\r\n</div>\r\n<p>　　原因：性别只有男，女，每次过滤掉的数据很少，不宜使用索引。</p>\r\n<p>　　经验上，能过滤<span lang=\"EN-US\">80%数据时就可以使用索引。对于订单状态，如果状态值很少，不宜使用索引，如果状态值很多，能够过滤大量数据，则应该建立索引。</span></p>\r\n<p>　　<strong>（<span lang=\"EN-US\">4）在属性上进行计算不能命中索引</span></strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where YEAR(date) < = \'2017\'\r\n</pre>\r\n</div>\r\n<p>　　即使<span lang=\"EN-US\">date上建立了索引，也会全表扫描，可优化为值计算：</span></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where date < = CURDATE()\r\n</pre>\r\n</div>\r\n<p>　　或者：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where date < = \'2017-01-01\'</pre>\r\n</div>\r\n<p>　　<strong>二、并非周知的<span lang=\"EN-US\">SQL实践</span></strong></p>\r\n<p><strong><span lang=\"EN-US\">　　<strong>（<span lang=\"EN-US\">5）如果业务大部分是单条查询，使用<span lang=\"EN-US\">Hash索引性能更好，例如用户中心</span></span></strong></span></strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from user where uid=?\r\nselect * from user where login_name=?\r\n</pre>\r\n</div>\r\n<p>　　原因：</p>\r\n<p>　　<span lang=\"EN-US\">B-Tree索引的时间复杂度是<span lang=\"EN-US\">O(log(n))</span></span></p>\r\n<p><span lang=\"EN-US\"><span lang=\"EN-US\">　　</span></span><span lang=\"EN-US\">Hash索引的时间复杂度是<span lang=\"EN-US\">O(1)</span></span></p>\r\n<p><span lang=\"EN-US\"><span lang=\"EN-US\">　　<strong>（<span lang=\"EN-US\">6）允许为<span lang=\"EN-US\">null的列，查询有潜在大坑</span></span></strong></span></span></p>\r\n<p><span lang=\"EN-US\"><span lang=\"EN-US\">　　单列索引不存<span lang=\"EN-US\">null值，复合索引不存全为<span lang=\"EN-US\">null的值，如果列允许为<span lang=\"EN-US\">null，可能会得到&ldquo;不符合预期&rdquo;的结果集</span></span></span></span></span></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from user where name != \'shenjian\'\r\n</pre>\r\n</div>\r\n<p>　　如果<span lang=\"EN-US\">name允许为<span lang=\"EN-US\">null，索引不存储<span lang=\"EN-US\">null值，结果集中不会包含这些记录。</span></span></span>所以，请使用not null约束以及默认值。</p>\r\n<p>　　<strong>（<span lang=\"EN-US\">7）复合索引最左前缀，并不是值<span lang=\"EN-US\">SQL语句的<span lang=\"EN-US\">where顺序要和复合索引一致</span></span></span></strong></p>\r\n<p>　　用户中心建立了<span lang=\"EN-US\">(login_name, passwd)的复合索引</span></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from user where login_name=? and passwd=?\r\nselect * from user where passwd=? and login_name=?\r\n</pre>\r\n</div>\r\n<p>　　<strong>都能够命中索引</strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from user where login_name=?\r\n</pre>\r\n</div>\r\n<p>　　<strong>也能命中索引</strong>，满足复合索引最左前缀</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from user where passwd=?\r\n</pre>\r\n</div>\r\n<p>　　<strong>不能命中索引</strong>，不满足复合索引最左前缀</p>\r\n<p>　　<strong>（<span lang=\"EN-US\">8）使用<span lang=\"EN-US\">ENUM而不是字符串</span></span></strong></p>\r\n<p>　　<span lang=\"EN-US\">ENUM保存的是<span lang=\"EN-US\">TINYINT，别在枚举中搞一些&ldquo;中国&rdquo;&ldquo;北京&rdquo;&ldquo;技术部&rdquo;这样的字符串，字符串空间又大，效率又低。</span></span></p>\r\n<p><strong>　　三、小众但有用的<span lang=\"EN-US\">SQL实践</span></strong></p>\r\n<p><strong><span lang=\"EN-US\">　　<strong>（<span lang=\"EN-US\">9）如果明确知道只有一条结果返回，<span lang=\"EN-US\">limit 1能够提高效率</span></span></strong></span></strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from user where login_name=?\r\n</pre>\r\n</div>\r\n<p>　　可以优化为：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from user where login_name=? limit 1\r\n</pre>\r\n</div>\r\n<p>　　原因：你知道只有一条结果，但数据库并不知道，明确告诉它，让它主动停止游标移动</p>\r\n<p>　　<strong>（<span lang=\"EN-US\">10）把计算放到业务层而不是数据库层，除了节省数据的<span lang=\"EN-US\">CPU，还有意想不到的查询缓存优化效果</span></span></strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from order where date < = CURDATE()\r\n</pre>\r\n</div>\r\n<p>　　这不是一个好的<span lang=\"EN-US\">SQL实践，应该优化为：</span></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$curDate = date(\'Y-m-d\');\r\n$res = mysql_query(\'select * from order where date < = $curDate\');\r\n</pre>\r\n</div>\r\n<p>　　原因：释放了数据库的<span lang=\"EN-US\">CPU，</span>多次调用，传入的<span lang=\"EN-US\">SQL相同，才可以利用查询缓存</span></p>\r\n<p><span lang=\"EN-US\">　　<strong>（<span lang=\"EN-US\">11）强制类型转换会全表扫描</span></strong></span></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">select * from user where phone=13800001234\r\n</pre>\r\n</div>\r\n<p>　　<strong>你以为会命中<span lang=\"EN-US\">phone索引么？大错特错</span></strong>了，这个语句究竟要怎么改？</p>\r\n<p>　　末了，再加一条，不要使用<span lang=\"EN-US\">select *（潜台词，文章的SQL都不合格 =_=），只返回需要的列，能够大大的节省数据传输量，与数据库的内存使用量哟。</span></p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/18/9670542.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('17', '0', '理解RESTful架构', '', '', '', '<p>　　越来越多的人开始意识到，网站即软件，而且是一种新型的软件。</p>\r\n<p>　　这种&ldquo;互联网软件&rdquo;采用客户端/服务器模式，建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点。</p>\r\n<p>　　网站开发，完全可以采用软件开发的模式。但是传统上，软件和网络是两个不同的领域，很少有交集；软件开发主要针对单机环境，网络则主要研究系统之前的通信。互联网的兴起，使得这两个领域开始融合，现在我们必须考虑，如何开发在互联网环境中使用的软件。</p>\r\n<p>　　RESTFUL架构，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以得到越来越多网站的采用。</p>\r\n<p>　　但是，到底什么是RESTFUL架构，并不是一个容易说清楚的问题。下面，我就谈谈我理解的RESTFUL架构。</p>\r\n<h3>　　一、起源</h3>\r\n<p>　　REST这个词，是Roy Thomas Fielding在他2000年的博士论文中提出的。</p>\r\n<p style=\"text-align: center;\">　　<img src=\"https://img2018.cnblogs.com/blog/854257/201809/854257-20180914092620996-1259876101.jpg\" alt=\"\" /></p>\r\n<p style=\"text-align: left;\">　　Fielding是一个非常重要的人，它是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席。所以，他的这篇论文已经发表，就引起了关注，并且立即对互联网开发产生了深远的影响。</p>\r\n<p style=\"text-align: left;\">　　他这样介绍论文的写作目的：</p>\r\n<p>　　\"本文研究计算机科学两大前沿----软件和网络----的交叉点。长期以来，软件研究主要关注软件设计的分类、设计方法的演化，很少客观地评估不同的设计选择对系统行为的影响。而相反地，网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽视了一个事实，那就是改变应用程序的互动风格比改变互动协议，对整体表现有更大的影响。<strong>我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。</strong>\"</p>\r\n<p>　　(This dissertation explores a junction on the frontiers of two research disciplines in computer science: software and networking. Software research has long been concerned with the categorization of software designs and the development of design methodologies, but has rarely been able to objectively evaluate the impact of various design choices on system behavior. Networking research, in contrast, is focused on the details of generic communication behavior between systems and improving the performance of particular communication techniques, often ignoring the fact that changing the interaction style of an application can have more impact on performance than the communication protocols used for that interaction. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. )</p>\r\n<h3>　　二、名称</h3>\r\n<p>　　Fielding将他对互联网软件的架构原则，定名为REST，即Representational State Transfer的缩写。我对这个词组的翻译是&ldquo;表现层状态转化&rdquo;。</p>\r\n<p>　　如果一个架构符合REST原则，就称它为RESTFUL架构。</p>\r\n<p>　　<strong>要理解RESTFUL架构，最好的方法是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么含义。</strong>如果你把这个名称搞懂，也就不难体会REST是一种什么样的设计。</p>\r\n<h3>　　三、资源</h3>\r\n<p>　　REST的名称&ldquo;表现层状态转化&rdquo;中，省略了主语。&ldquo;表现层&rdquo;其实指的是&ldquo;资源&rdquo;（Resource）的&ldquo;表现层&rdquo;。</p>\r\n<p>　　<strong>所谓&ldquo;资源&rdquo;，就是网络上的一个实体，或者说是网络上的一个具体信息。</strong>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它。</p>\r\n<p>　　所谓&ldquo;上网&rdquo;，就是互联网上一系列的&ldquo;资源&rdquo;互动，调用它的URL。</p>\r\n<h3>　　四、表现层（Representational）</h3>\r\n<p>　　&ldquo;资源&rdquo;是一种信息实体，它可以有多种外在表现形式。<strong>我们把&ldquo;资源&rdquo;具体呈现出来的形式，叫做它的&ldquo;表现层&rdquo;（Representational）。</strong></p>\r\n<p>　　比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPEG格式表现，也可以用PNG格式表现。</p>\r\n<p>　　URI值代表资源的实体，不代表它的形式。严格地讲，有些网址最后&ldquo;.html&rdquo;后缀名是不必要的，因为这个后缀表现格式，属于&ldquo;表现层&rdquo;范畴，而URI应该只代表&ldquo;资源&rdquo;的位置。它的具体表现形式，应该再HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对&ldquo;表现层&rdquo;的秒数。</p>\r\n<h3>　　五、状态转化（State Transfer）</h3>\r\n<p>　　访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</p>\r\n<p>　　互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。<strong>因此，如果客户端想要操作服务器，必须通过某种手段，让服务器发生&ldquo;状态转化&rdquo;（State Transfer）。而这种转化是建立在表现层之上，所以就是&ldquo;表现层状态转化&rdquo;。</strong></p>\r\n<p><strong>　　</strong>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：<strong>GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</strong></p>\r\n<h3><strong>　　</strong>六、综述</h3>\r\n<p>　　综合上面的解释，我们总结一下什么是RESTFUL架构：</p>\r\n<p>　　（1）、每一个URL代表一种资源；</p>\r\n<p>　　（2）、客户端和服务器之前呢，传递这种资源的某种表现层；</p>\r\n<p>　　（3）、客户端用过四个HTTP动词，对服务器端资源进行操作，实现&ldquo;表现层状态转化&rdquo;。</p>\r\n<h3>　　七、误区</h3>\r\n<p>　　RESTFUL架构有一些典型的设计误区。</p>\r\n<p>　　<strong>最常见的一种设计错误，就是URI包含动词。</strong>因为&ldquo;资源&rdquo;表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p>\r\n<p>　　距离来说，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。</p>\r\n<p>　　如果某个动作是HTTP动词表示不了的，你应该把该动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URL是：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">POST /accounts/1/transfer/500/to/2\r\n</pre>\r\n</div>\r\n<p>　　正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">　　POST /transaction HTTP/1.1\r\n　　Host: 127.0.0.1\r\n　　\r\n　　from=1&to=2&amount=500.00\r\n</pre>\r\n</div>\r\n<p>　　另外设计误区，就是在URI中加入版本号：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">　　http://www.example.com/app/1.0/foo\r\n\r\n　　http://www.example.com/app/1.1/foo\r\n\r\n　　http://www.example.com/app/2.0/foo\r\n</pre>\r\n</div>\r\n<p>　　因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accpet字段中进行区分。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">　　Accept: vnd.example-com.foo+json; version=1.0\r\n\r\n　　Accept: vnd.example-com.foo+json; version=1.1\r\n\r\n　　Accept: vnd.example-com.foo+json; version=2.0\r\n</pre>\r\n</div>\r\n<p>　　</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/13/9640890.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('18', '0', 'RESTful API 设计指南', '', '', '', '<p>　　网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备.....）。</p>\r\n<p>　　因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API架构的流行，甚至出现&ldquo;API First&rdquo;的设计思想。RESTFUL API是目前比较成熟的一套互联网应用程序的API设计理论。</p>\r\n<p>　　今天，我将介绍RESTFUL API的设计细节，探讨如何设计一套合理、好用的API。</p>\r\n<h3>　　一、协议</h3>\r\n<p>　　API与用户的通信协议，总是使用HTTPS协议。</p>\r\n<h3>　　二、域名</h3>\r\n<p>　　应该尽量将API部署在专用域名之下。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">https://api.example.com\r\n</pre>\r\n</div>\r\n<p>　　如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">https://example.org/api/\r\n</pre>\r\n</div>\r\n<h3>　　三、版本（Versioning）</h3>\r\n<p>　　应该将API的版本号放入RUL。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">https://api.example.com/v1/\r\n</pre>\r\n</div>\r\n<p>　　另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。</p>\r\n<h3>　　四、路径（Endpoint）</h3>\r\n<p>　　路径又称为&ldquo;终点&rdquo;（endpoint），表示API的具体网址。</p>\r\n<p>　　在RESTFUL架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所有的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&ldquo;集合&rdquo;（collection），所以API中的名词也应该使用复数。</p>\r\n<p>　　举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">https://api.example.com/v1/zoos\r\nhttps://api.example.com/v1/animals\r\nhttps://api.example.com/v1/employees\r\n</pre>\r\n</div>\r\n<h3>　　五、HTTP动词</h3>\r\n<p>　　对于资源的具体操作类型，由HTTP动词表示。</p>\r\n<p>　　常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">GET（SELECT）：从服务器取出资源（一项或多项）。\r\nPOST（CREATE）：在服务器新建一个资源。\r\nPUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\r\nPATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\r\nDELETE（DELETE）：从服务器删除资源。\r\n</pre>\r\n</div>\r\n<p>　　还有两个不常用的HTTP动词。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">HEAD：获取资源的元数据。\r\nOPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\r\n</pre>\r\n</div>\r\n<p>　　下面的一些例子。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">GET /zoos：列出所有动物园\r\nPOST /zoos：新建一个动物园\r\nGET /zoos/ID：获取某个指定动物园的信息\r\nPUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）\r\nPATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）\r\nDELETE /zoos/ID：删除某个动物园\r\nGET /zoos/ID/animals：列出某个指定动物园的所有动物\r\nDELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物\r\n</pre>\r\n</div>\r\n<h3>　　六、过滤信息（FIltering）</h3>\r\n<p>　　如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p>\r\n<p>　　下面是一些常见的参数。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">?limit=10：指定返回记录的数量\r\n?offset=10：指定返回记录的开始位置。\r\n?page=2&per_page=100：指定第几页，以及每页的记录数。\r\n?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。\r\n?animal_type_id=1：指定筛选条件\r\n</pre>\r\n</div>\r\n<p>　　参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p>\r\n<h3>　　七、状态码（Status Codes）</h3>\r\n<p>　　服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。\r\n201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\r\n202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）\r\n204 NO CONTENT - [DELETE]：用户删除数据成功。\r\n400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。\r\n401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。\r\n403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\r\n404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\r\n406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\r\n410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\r\n422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\r\n500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。\r\n</pre>\r\n</div>\r\n<h3>　　八、错误处理（Error handling）</h3>\r\n<p>　　如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">{\r\n    error: \"Invalid API key\"\r\n}\r\n</pre>\r\n</div>\r\n<h3>　　九、返回结果</h3>\r\n<p>　　针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">GET /collection：返回资源对象的列表（数组）\r\nGET /collection/resource：返回单个资源对象\r\nPOST /collection：返回新生成的资源对象\r\nPUT /collection/resource：返回完整的资源对象\r\nPATCH /collection/resource：返回完整的资源对象\r\nDELETE /collection/resource：返回一个空文档\r\n</pre>\r\n</div>\r\n<h3>　　十、Hypermedia API</h3>\r\n<p>　　RESTFUL API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p>\r\n<p>　　比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">{\r\n    \"link\": \r\n    {\r\n      \"rel\":   \"collection https://www.example.com/zoos\",\r\n      \"href\":  \"https://api.example.com/zoos\",\r\n      \"title\": \"List of zoos\",\r\n      \"type\":  \"application/vnd.yourformat+json\"\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>　　上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p>\r\n<p>　　Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用的API的网址列表。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">{\r\n  \"current_user_url\": \"https://api.github.com/user\",\r\n  \"current_user_authorizations_html_url\": \"https://github.com/settings/connections/applications{/client_id}\",\r\n  \"authorizations_url\": \"https://api.github.com/authorizations\",、\r\n  .....  \r\n}\r\n</pre>\r\n</div>\r\n<p>　　从上面可以看到，如果想获取当前用户的信息，应该访问api.github.com/user，然后得到了下面的结果。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">{\r\n  \"message\": \"Requires authentication\",\r\n  \"documentation_url\": \"https://developer.github.com/v3/users/#get-the-authenticated-user\"\r\n}\r\n</pre>\r\n</div>\r\n<p>　　上面代码表示，服务器给出了提示信息，以及文档的网址。</p>\r\n<h3>　　十一、其他</h3>\r\n<p>　　（1）、API的身份认证应该使用OAuth2.0框架。</p>\r\n<p>　　（2）、服务器返回的数据格式，应该尽量使用JSON，避免使用呢XML。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/12/9633892.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('19', '0', '秒杀系统架构优化思路', '', '', '', '<h3>　　一、秒杀业务为什么难做</h3>\r\n<p>　　1）、im系统，例如qq或者微博，每个人都读自己的数据（好友列表、群列表、个人信息）；</p>\r\n<p>　　2）、微博系统，每个人读你关注人的数据，一个人多多个人的数据；</p>\r\n<p>　　3）、秒杀系统，库存只有一份，所有人会在集中的时间读和写这些数据，多个人读一个数据；</p>\r\n<p>　　例如：小米手机每周二的秒杀，可能手机只有1万部，但瞬时进入的流量可能是几百几千万。</p>\r\n<p>　　例如：12306抢票，票是有限的，库存一份，瞬时流量非常多，都是相同的库存。<span style=\"color: #ff0000;\">读写冲突，锁非常严重，这是秒杀业务难的地方</span>。那么我们怎么优化秒杀业务的架构呢？</p>\r\n<h3>　　二、优化方向</h3>\r\n<p>　　优化方向有两个（今天就讲这两个点）：</p>\r\n<p>　　（1）、<span style=\"color: #ff0000;\">将请求尽量拦截在系统上游</span>（不要让锁冲突到数据库上去）。传统秒杀系统之所以挂，请求都压倒了后端数据层，数据读写锁冲突严重，并发高响应慢，几乎所有请求都超时，流量虽大，下单成功的有效流量甚小。以12306为例，一趟火车其实只有2000张票，200W个人来买，基本没有人能买成功，请求有效率为0。</p>\r\n<p>　　（2）、<span style=\"color: #ff0000;\">充分利用缓存</span>，秒杀买票，这是一个典型的读多写少的应用场景，大部分请求时车次查询，票查询，下单和支付才是写请求。一趟火车其实只有2000张票，200W个人来买，最多2000个人下单成功，其他人都是查询库存，写比例只有0.1%，读比例占99.9%，非常适合使用缓存来优化。好，后续讲讲怎么个&ldquo;将请求尽量拦截在系统上游&rdquo;法，以及怎么样&ldquo;缓存&rdquo;法，讲讲细节。</p>\r\n<h3>　　三、常见秒杀架构</h3>\r\n<p>　　常见的站点架构基本是这样的（绝对不画忽悠类的架构图）</p>\r\n<p> <img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://images2018.cnblogs.com/blog/854257/201809/854257-20180913125427902-1384271183.png\" alt=\"\" /></p>\r\n<p>　　（1）、浏览器端，最上层，会执行一些JS代码；</p>\r\n<p>　　（2）、站点层，这一层会访问后端数据，拼HTML页面返回给浏览器；</p>\r\n<p>　　（3）、服务层，向上游屏蔽底层数据细节，提供数据访问；</p>\r\n<p>　　（4）、数据层，最终的库存是存在这里的，mysql是一个典型（当然还会有缓存）</p>\r\n<p>　　这个图虽然简单，但能形象的说明大流量高并发的秒杀架构，大家要记得这张图，后面细细解析各个层级怎么优化。</p>\r\n<h3>　　四、各个层级优化细节</h3>\r\n<p>　　第一层：客户端怎么优化（浏览器层、APP层）</p>\r\n<p>　　问大家一个问题，大家都玩过微信的摇一摇抢红包吧，<span style=\"color: #ff0000;\">每摇一次，就会往后端发送请求么？</span>回顾我们下单抢票的场景，点击了&ldquo;查询&rdquo;按钮之后，系统那个卡啊，进度条涨的慢啊，作为用户，我会不自觉的再去点击&ldquo;查询&rdquo;，对么？继续点，继续点，点点点...有用么？平白无故的增加了系统负载，一个用户点击5次，80%的请求是这么多出来的，怎么整？</p>\r\n<p>　　（a）、产品层面，用户点击&ldquo;查询&rdquo;或者&ldquo;购票&rdquo;后，<span style=\"color: #ff0000;\">按钮置灰</span>，禁止用户重复提交请求；</p>\r\n<p>　　（b）、JS层面，限制用户在<span style=\"color: #ff0000;\">X秒之内只能提交一次请求</span>；</p>\r\n<p>　　APP层面，可以做类似的事情，虽然你疯狂的在摇微信，其实X秒才向后端发起一次请求。这就是所谓的&ldquo;将请求尽量拦截在系统上游&rdquo;，越上游越好，浏览器层，APP层就给拦住，这样就能挡住80%的请求，这种办法只能拦住普通用户（但99%的用户是普通用户）对于群内的<span style=\"color: #ff0000;\">高端程序员是拦不住的</span>。firebug一抓包，http长啥样都知道了，js是万万拦不住程序员写for循环，调用http接口的，这部分请求怎么处理？</p>\r\n<p>　　第二层：站点页面的请求拦截</p>\r\n<p>　　怎么拦截？<span style=\"color: #ff0000;\">怎么防止程序员写for循环调用</span>，有去重依据么？ip？cookie-id...想复杂了，这类业务都需要登录，用uid即可，在站点层面，<span style=\"color: #ff0000;\">对uid进行请求计数和去重</span>，甚至不需要统一存储计数，直接站点层内存存储（这样计数会不准，但是简单）。一个uid，5秒只准透过1个请求，这样又能拦截99%的for循环请求。</p>\r\n<p>　　5秒只透过1个请求，其余的请求怎么办？缓存，<span style=\"color: #ff0000;\">页面缓存</span>，同一个uid，限制访问频度，做页面缓存，X秒内到达站点层的请求，均返回同一页面。同一个item的查询，例如车次，做页面缓存，X秒内到达站点层的请求，均返回同一个页面。如此限流，<span style=\"color: #ff0000;\">既能保证用户有良好的用户体验</span>（没有返回404）又能保证系统的健壮性（利用页面缓存，把请求拦截在站点层）。页面缓存不一定要保证所有站点返回一致的页面，直接放在每个站点的内存也是可以的。优点是简单，坏处是http请求落到不同的站点，返回的车票数据可能不一样，这是站点层的请求拦截与缓存优化。</p>\r\n<p>　　好，这个方式拦住了写for循环发http请求的程序员，有些高端程序员（黑客）控制了10W个肉鸡，手里有10W个uid，同时发请求（先不考虑实名制的问题，小米抢手机不需要实名制），这下怎么办，站点层按照uid限流拦不住了。</p>\r\n<p>　　第三层：服务层来拦截（反正就是不要让请求落到数据库上去）</p>\r\n<p>　　服务层怎么拦截？大哥，我是服务层，我清楚的知道小米只有1万部手机，我清楚的知道一列火车只有2000张车票，我透过10W个请求去数据库有什么意义？没错，<span style=\"color: #ff0000;\">请求队列！</span></p>\r\n<p>　　对于写请求，做请求队列，每次只透有限的写请求去数据库层（下订单，这幅这样的写业务）</p>\r\n<p>　　1W部手机，只透1W个下单请求去DB</p>\r\n<p>　　3W张火车票，只透3W个下单请求去DB</p>\r\n<p>　　如果均成功再放下一批，如果库存不够则队列里的写请求全部返回&ldquo;已售完&rdquo;。</p>\r\n<p>　　对于读请求，怎么优化？cache抗，不管是memcached还是redis，单机抗个每秒10W应该都没什么问题的。如此限流，只有非常少的请求，和非常少的读缓存mis的请求会透到数据层去，又有99.9%的请求被拦住了。</p>\r\n<p>　　当然，还有业务规则上的一些优化。回想12306所做的，<span style=\"color: #ff0000;\">分时分段售票</span>，原来统一10点买票，现在8点，8点半，9点，...每个半个小时放出一批：将流量摊匀。</p>\r\n<p>　　其次，<span style=\"color: #ff0000;\">数据粒度的优化</span>：你去购票，对于余票查询这个业务，票剩了58张，还有26张，你真的关注么，其实我们只是关心有票还是无票？流量大的时候，做一个粗粒度的&ldquo;有票&rdquo;&ldquo;无票&rdquo;缓存即可。</p>\r\n<p>　　第三，一些业务逻辑的异步：例如下单业务与支付业务的分离。这些优化都是结合业务来的，我之前分享过一个观点&ldquo;<span style=\"color: #ff0000;\">一切脱离业务的架构设计都是耍流氓&rdquo;</span>架构的优化也是针对业务。</p>\r\n<p>　　第四层：数据层</p>\r\n<p>　　浏览器拦截80%，站点层拦截99.9%并做了页面缓存，服务层又做了写请求队列与数据缓存，每次透过到数据库层的请求都是可控的。DB基本就没什么压力了，闲庭信步，单机也能扛得住，还是那句话，库存是有限的，小米的产能是有限，透这么多请求来数据库没有意义。全部透到数据库，100W个下单，0个成功，请求有效率0%。透3K到数据，全部成功，请求有效率100%。</p>\r\n<h3>　　五、总结</h3>\r\n<p>　　上文应该描述的非常清楚了，没什么总结了，对于秒杀系统，再次重复下我个人经验的两个架构思路：</p>\r\n<p>　　（1）、<span style=\"color: #ff0000;\">尽量将请求拦截在系统上游</span>（越上游越好）；</p>\r\n<p>　　（2）、<span style=\"color: #ff0000;\">读多写少的常用多用缓存</span>（缓存抗读压力）；</p>\r\n<p>　　浏览器和APP：做限速</p>\r\n<p>　　站点层：按照uid做限速，做页面缓存</p>\r\n<p>　　服务层：按照业务做写队列控制流量，做数据缓存</p>\r\n<p>　　数据层：闲庭信步</p>\r\n<p>　　并且：结合业务做优化</p>\r\n<h3>　　六、Q&A</h3>\r\n<p> 　　问题1、按你的架构，其实压力最大的反而是站点层，假设真实有效的请求有1000W，不太可能限制请求连接数吧，那么这部分压力怎么处理？</p>\r\n<p>　　答：每秒钟的并发可能没有1KW，假设有1KW，解决方案2个：</p>\r\n<p>　　（1）、站点层是可以通过加机器扩容的，最不济1K台机器来呗。</p>\r\n<p>　　（2）、如果机器不够，抛弃请求，抛弃50%（50%直接返回稍后再试），原则要保护系统，不能让所有用户都失败。</p>\r\n<p>　　问题2、控制了10W个肉鸡，手里有10W个uid，同时发送请求，这个问题怎么解决？</p>\r\n<p>　　答：上面说了，服务层写请求队列</p>\r\n<p>　　问题3、限制访问频次的缓存，是否也可以用于搜索？例如A用户搜索了&ldquo;手机&rdquo;，B用户搜索&ldquo;手机&rdquo;，优先使用A搜索后生成的缓存页面？</p>\r\n<p>　　答：这个是可以的，这个方法也经常用在&ldquo;动态&rdquo;运营活动页，例如短时间推送4KW用户app-push运营活动，做页面缓存。</p>\r\n<p>　　问题4、如果队列处理失败，如何处理？肉鸡把队列撑爆了怎么办？</p>\r\n<p>　　答：处理失败返回下单失败，让用户再试。队列成本很低，爆了很难吧。最坏的情况下，缓存了若干请求之后，后续的请求直接返回&ldquo;无票&rdquo;（队列里已经有100W请求了，都等着那，再接受请求也没有意义了）。</p>\r\n<p>　　问题5、站点层过滤的话，是把uid请求数单独保存到各个站点的内存中么？如果是这样的话，怎么处理多台服务器集群经过负载均衡器将相同用户的响应分布到不同服务器的情况呢？还是说站点层的过滤放到负载均衡器前？</p>\r\n<p>　　答：可以放在内存，这样的话看似一台服务器限制了5s一个请求，全局来说（假设有10台机器），其实是限制了5s10个请求，解决办法：</p>\r\n<p>　　（1）、加大限制（这是建议的方案，最简单）</p>\r\n<p>　　（2）、在nginx层做7层均衡，让一个uid的请求尽量落到同一台机器上</p>\r\n<p>　　问题6、服务层过滤的话，队列是服务层统一的一个队列？还是每个提供服务的服务器各一个队列？如果是统一一个队列的话，需不需要在各个服务器提交的请求入队列前进行锁控制？</p>\r\n<p>　　答：可以不用统一一个队列，这样的话每个服务透过更少量的请求（总票数/服务个数），这样简单。统一一个队列又复杂了。</p>\r\n<p>　　问题7、秒杀之后的支付完成，以及未支付取消占位，如何对剩余库存做及时的控制更新？</p>\r\n<p>　　答：数据库里一个状态，未支付。如果超过45分钟，库存会重新恢复（大家熟知的&ldquo;回仓&rdquo;），给我们抢票的启示是，开动秒杀后，45分钟之后再试试，说不定又有票哟~</p>\r\n<p>　　问题8、不同的用户浏览同一个商品，落在不同的缓存实例显示的库存完全不一样，请问老师怎么做缓存数据一致或者允许脏读？</p>\r\n<p>　　答：目前的架构设计，请求落到不同的站点上，数据可能不一致（页面缓存不一样），这个业务场景能接受。但数据库层面真实的数据是没问题的。</p>\r\n<p>　　问题9、就算处理业务把优化考虑&ldquo;3K张火车票，只透过3K个下单请求去DB&rdquo;，那这3K个订单就不会发生拥堵吗？</p>\r\n<p>　　答：（1）、数据抗3K个写请求还是ok的；（2）、可以数据拆分；（3）、如果3K扛不住，服务层可以控制透过去的并发数量，根据压测情况吧。</p>\r\n<p>　　问题10、如果在站点层或者服务层处理失败的话，需不需要考虑对这批处理失败的请求做重放？还是就直接丢弃？</p>\r\n<p>　　答：别重放了，返回用户查询失败或下单失败吧。架构设计原则之一是&ldquo;fail fast&rdquo;。</p>\r\n<p>　　问题11、对于大型系统的秒杀，比如12306，同时进行的秒杀活动很多，如何分流？</p>\r\n<p>　　答：垂直拆分</p>\r\n<p>　　问题12、额外又想到一个问题。这套流程做成同步还是异步？如果是同步的话，应该还存在会有响应反馈慢的情况，如果是异步的话，如何控制能将响应结果返回正确的请求方？</p>\r\n<p>　　答：用户层面肯定是同步（用户的http请求时夯住的），服务层可以同步可以异步。</p>\r\n<p>　　问题13、减库存是在哪个阶段减呢？如果是下单锁库存的话，大量恶意用户下单锁库存不知福如何处理呢？</p>\r\n<p>　　答：数据库层面写请求量很低，还好，下单不支付，等时间过完再&ldquo;回仓&rdquo;，之前提过了。</p>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/09/12/9633873.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('20', '0', 'linux文件与目录管理', '', '', '', '<p>　　在linux中什么是一个文件的路径呢，说白了就是文件存在的地方。在linux的世界中，存在着绝对路径和相对路径。</p>\r\n<p>　　绝对路径：路径的写法一定由根目录&ldquo;/&rdquo;写起。例如/usr/local/mysql，这就是绝对路径。</p>\r\n<p>　　相对路径：路径的写法不是由根目录&ldquo;/&rdquo;写起。例如，首先用户进入到/，然后再进入到home，命令为cd /home然后cd test，此时用户所在路径为/home/test。第一个cd命令后跟/home，第二个cd命令后跟test，并没有斜杠，这个test是相对于/home目录来讲的，所以叫做相对路径。</p>\r\n<p><strong>　　pwd这个命令打印出当前所在目录</strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# pwd\r\n/root\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p><strong>　　cd进入到某个目录</strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# cd /usr/local/\r\n[root@localhost local]# pwd\r\n/usr/local\r\n[root@localhost local]#\r\n</pre>\r\n</div>\r\n<p>　　./指的是当前目录</p>\r\n<p>　　../指的是当前目录的上级目录</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost local]# cd /usr/local/lib/\r\n[root@localhost lib]# pwd\r\n/usr/local/lib\r\n[root@localhost lib]# cd ./\r\n[root@localhost lib]# pwd\r\n/usr/local/lib\r\n[root@localhost lib]# cd ../\r\n[root@localhost local]# pwd\r\n/usr/local\r\n[root@localhost local]#\r\n</pre>\r\n</div>\r\n<p><strong>　　mkdir创建一个目录</strong></p>\r\n<p><strong>　　</strong>mkdir其实就是make directory的缩写。其语法为mkdir [-mp] [目录名称]，其中-m、-p为其选项。-m：这个参数用来指定要创建目录的权限，该参数不常用。-p：这个参数是很管用的。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# mkdir /tmp/test/123\r\nmkdir: cannot create directory 鈥tmp/test/123鈥 No such file or directory\r\n[root@localhost ~]# ls /tmp/test\r\nls: cannot access /tmp/test: No such file or directory\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　当我们想创建/tmp/test/123目录，可是提示不能创建，原因是/tmp/test目录不存在。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# ls /tmp/test\r\nls: cannot access /tmp/test: No such file or directory\r\n[root@localhost ~]# mkdir -p /tmp/test/123\r\n[root@localhost ~]# ls /tmp/test\r\n123\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　你看到这里，是不是明白-p参数的作用了？没错，它的作用就是递归创建目录，即使上级目录不存在，还有一种情况就是如果你想要创建的目录存在的话，会提示报错，然后你加上-p参数，就不会报错了。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# ls /tmp/test\r\n123\r\n[root@localhost ~]# mkdir /tmp/test/123\r\nmkdir: cannot create directory 鈥tmp/test/123鈥 File exists\r\n[root@localhost ~]# mkdir -p /tmp/test/123\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p><strong>　　rmdir删除一个目录</strong></p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# ls /tmp/test/\r\n123\r\n[root@localhost ~]# rmdir /tmp/test/123/\r\n[root@localhost ~]# ls /tmp/test/\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　rmdir其实是rmove directory缩写，其只有一个选项-p类似与mkdir命令，这个参数的作用是将上级目录一起删除。举个例子吧，新建目录mkdir -p d1/d2/d3,rmdir -p d1/d2/d3相当于是删除了d/，d1/d2，d1/d2/d3。如果一个目录目录中还有目录，那么当你直接rmdir该目录时，会提示该目录不为空。如果你非要删除不为空的目录，那你用rm指令吧。</p>\r\n<p><strong>　　rm删除目录或文件</strong></p>\r\n<p><strong>　　</strong>rmdir只能删除目录但不能删除文件，想要删除一个文件，则要用rm命令了。rm同样也有很多选项。</p>\r\n<p>　　-f：强制的意思，如果不加这个选项，当删除一个不存在的文件时会报错。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# ls /tmp/111\r\nls: cannot access /tmp/111: No such file or directory\r\n[root@localhost ~]# rm /tmp/111\r\nrm: cannot remove 鈥tmp/111鈥 No such file or directory\r\n[root@localhost ~]# rm -f /tmp/111\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　-i：这个选项的作用是，当用户删除一个文件时会提示用户是否真的删除。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# ls /tmp/test/123/\r\n1.txt\r\n[root@localhost ~]# rm -i /tmp/test/123/1.txt \r\nrm: remove regular file 鈥tmp/test/123/1.txt鈥 y\r\n[root@localhost ~]# ls /tmp/test/123/\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　如果删除，输入y否则输入n</p>\r\n<p>　　-r：当删除目录时，加该选项，如果不加这个选项会报错。rm是可以删除不为空的目录的。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# ls /tmp/test\r\n123\r\n[root@localhost ~]# rm /tmp/test\r\nrm: cannot remove 鈥tmp/test鈥 Is a directory\r\n[root@localhost ~]# rm -rf /tmp/test\r\n[root@localhost ~]# ls /tmp/test\r\nls: cannot access /tmp/test: No such file or directory\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<h3>　　ls命令</h3>\r\n<p>　　ls在前面的命令中多次用到它。现在你已经明白它的含义了吧。没有错，就是查看某个目录或者文件，是list的简写。ls后可以跟一个目录，也可以跟一个文件。以下是ls的选项，在这里笔者并没有完全列出，只是列出了平时使用最多的选项。</p>\r\n<p>　　-a：全部的文档都列出，包含隐藏的。linux文件系统中同样也有隐藏文件。这些隐藏文件的文件名是以.开头的。例如.test、/root/.123、/root/.ssh等等，隐藏文件可以是目录也可以是普通文件。</p>\r\n<p>　　-l：详细列出文件的属性信息，包括大小、创建时间、所属主、所属组等等。</p>\r\n<p>　　-d：后边跟目录，如果不加这个选项则列出目录下的文件，加上后只列出目录本身。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# ls /root/\r\n1.txt            case1.sh  continue2.sh  for3.sh       fun.sh  myfile    test3.sh  test.sh   wc\r\nanaconda-ks.cfg  case2.sh  continue.sh   for.sh        if1.sh  test      test4.sh  test.txt  while2.sh\r\nbreak2.sh        case.sh   for1.sh       function1.sh  if2.sh  test1.sh  test5.sh  until.sh  while.sh\r\nbreak.sh         code      for2.sh       function2.sh  if3.sh  test2.sh  test6.sh  users\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<h3>　　cp命令</h3>\r\n<p>　　cp是copy的简写，即拷贝格式为cp [选项] [源文件] [目标文件]，例如想把test1拷贝成test2，这样既可cp test1 test2，以下介绍几个常见的选项。</p>\r\n<p>　　-d：这里涉及到一个&ldquo;连接&rdquo;的概念。连接分为软连接和硬链接。在以后的章节会详细解释，现在你只要明白这里的软连接跟windows中的款姐方式类似。如果不加这个-d则拷贝软连接时会把软连接的目标文件拷贝过去，而加上后，其实只是拷贝一个连接文件（即快捷方式）。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost cptest]# touch test\r\n[root@localhost cptest]# ln -s test test1\r\n[root@localhost cptest]# ls -l test test1\r\n-rw-r--r--. 1 root root 0 Sep 10 22:25 test\r\nlrwxrwxrwx. 1 root root 4 Sep 10 22:25 test1 -> test\r\n[root@localhost cptest]# cp test1 test2\r\n[root@localhost cptest]# ls -l test test1 test2\r\n-rw-r--r--. 1 root root 0 Sep 10 22:25 test\r\nlrwxrwxrwx. 1 root root 4 Sep 10 22:25 test1 -> test\r\n-rw-r--r--. 1 root root 0 Sep 10 22:25 test2\r\n[root@localhost cptest]# cp -d test1 test3\r\n[root@localhost cptest]# ls -l test test1 test2 test3 \r\n-rw-r--r--. 1 root root 0 Sep 10 22:25 test\r\nlrwxrwxrwx. 1 root root 4 Sep 10 22:25 test1 -> test\r\n-rw-r--r--. 1 root root 0 Sep 10 22:25 test2\r\nlrwxrwxrwx. 1 root root 4 Sep 10 22:26 test3 -> test\r\n[root@localhost cptest]#\r\n</pre>\r\n</div>\r\n<p>　　-r：如果你要拷贝一个目录，必须要加-r选项，否则你是拷贝不了目录的。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost cptest]# mkdir 123\r\n[root@localhost cptest]# ls\r\n123  test  test1  test2  test3\r\n[root@localhost cptest]# cp 123 456\r\ncp: omitting directory 鈥23鈥\r\n[root@localhost cptest]# \r\n[root@localhost cptest]# cp -r 123 456\r\n[root@localhost cptest]# ls \r\n123  456  test  test1  test2  test3\r\n[root@localhost cptest]#\r\n</pre>\r\n</div>\r\n<p>　　-i：如果遇到一个文件存在的文件，会问是否覆盖。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost cptest]# ls\r\n123  456  test  test1  test2  test3\r\n[root@localhost cptest]# touch 111\r\n[root@localhost cptest]# touch 222\r\n[root@localhost cptest]# cp -i 111 222\r\ncp: overwrite 鈥22鈥 n\r\n[root@localhost cptest]# \r\n</pre>\r\n</div>\r\n<p>　　上例中，touch命令，看字面意思就是摸一下，没有，如果有这个文件，则会改变文件的访问时间，如果没有这个文件就会创建这个文件。</p>\r\n<p>　　-u：该选项仅当目标文件存在时才生效，如果源文件比目标文件新才会拷贝，否则不做任何动作。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost cptest]# rm -rf *\r\n[root@localhost cptest]# ls\r\n[root@localhost cptest]# echo 111 > 111\r\n[root@localhost cptest]# cat 111 \r\n111\r\n[root@localhost cptest]# echo 222 > 222\r\n[root@localhost cptest]# cat 222\r\n222\r\n[root@localhost cptest]# cp -u 111 222\r\n[root@localhost cptest]# cat 222 \r\n222\r\n[root@localhost cptest]# echo aaa > 111\r\n[root@localhost cptest]# cp -u 111 222 \r\ncp: overwrite 鈥22鈥 y\r\n[root@localhost cptest]# cat 222 \r\naaa\r\n[root@localhost cptest]#</pre>\r\n</div>\r\n<h3>　　mv命令</h3>\r\n<p>　　mv是移动的意思，是move的简写。格式为：mv [选项] [源文件] [目标文件]　，下面介绍几个常用的选项。</p>\r\n<p>　　-i：和cp的-i一样，当目标文件存在时询问用户是否要覆盖。</p>\r\n<p>　　-u：和cp命令的-u选项一个作用，当目标文件存在时才生效，如果源文件比目标文件新才会移动，否则不做任何操作。</p>\r\n<p>　　该命令集中情况;</p>\r\n<p>　　1）、目标文件时目录，而且目标文件不存在；</p>\r\n<p>　　2）、目标文件时目录，而且目标文件存在；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost mvtest]# mkdir aaa\r\n[root@localhost mvtest]# ls\r\naaa\r\n[root@localhost mvtest]# mv aaa bbb\r\n[root@localhost mvtest]# ls\r\nbbb\r\n[root@localhost mvtest]# mkdir ccc\r\n[root@localhost mvtest]# ls\r\nbbb  ccc\r\n[root@localhost mvtest]# mv bbb ccc\r\n[root@localhost mvtest]# ls\r\nccc\r\n[root@localhost mvtest]#</pre>\r\n</div>\r\n<p>　　3）、目标文件不是目录，而且目标文件不存在；</p>\r\n<p>　　4）、目标文件不是目录，而且目标文件存在；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost mvtest]# touch aa\r\n[root@localhost mvtest]# ls\r\naa\r\n[root@localhost mvtest]# mv aa bb\r\n[root@localhost mvtest]# ls\r\nbb\r\n[root@localhost mvtest]# touch cc\r\n[root@localhost mvtest]# ls\r\nbb  cc\r\n[root@localhost mvtest]# mv bb cc \r\nmv: overwrite 鈥榗c鈥 y\r\n[root@localhost mvtest]# ls\r\ncc\r\n[root@localhost mvtest]#\r\n</pre>\r\n</div>\r\n<h3>　　cat命令</h3>\r\n<p>　　cat是比较常用的一个命令，即查看一个文件的内容并显示在屏幕上。</p>\r\n<p>　　-n：查看文件时，把行号也显示到屏幕。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost mvtest]# echo 1111 > 1.txt\r\n[root@localhost mvtest]# echo 2222 >> 1.txt \r\n[root@localhost mvtest]# cat -n 1.txt \r\n     1  1111\r\n     2  2222\r\n[root@localhost mvtest]# \r\n</pre>\r\n</div>\r\n<p>　　上例中出现了一个 &ldquo;>>&rdquo;，这个符号跟前面介绍的&ldquo;>&rdquo;的作用都是重定向，即把前面输出的内容输出到后面的文件中。&ldquo;>>&rdquo;是追加的意思，而用&ldquo;>&rdquo;，如果文件中有内容则会删除文件中的内容，而&ldquo;>>&rdquo;则不会。</p>\r\n<p>　　-A：显示所有东西，包括特殊字符。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost mvtest]# echo 111 > 1.txt\r\n[root@localhost mvtest]# echo 222 >> 1.txt \r\n[root@localhost mvtest]# cat -n 1.txt \r\n     1  111\r\n     2  222\r\n[root@localhost mvtest]# cat -A 1.txt \r\n111$\r\n222$\r\n[root@localhost mvtest]# cat -nA 1.txt \r\n     1  111$\r\n     2  222$\r\n[root@localhost mvtest]#\r\n</pre>\r\n</div>\r\n<p>　　tac其实是cat的反写，同样的功能也是反向打印内容到屏幕上。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost mvtest]# echo 1234 > 1.txt \r\n[root@localhost mvtest]# echo 5678 >> 1.txt \r\n[root@localhost mvtest]# cat -nA 1.txt \r\n     1  1234$\r\n     2  5678$\r\n[root@localhost mvtest]# tac 1.txt \r\n5678\r\n1234\r\n[root@localhost mvtest]#\r\n</pre>\r\n</div>\r\n<p>　　more也是用来查看一个文件内容。当文件内容太多，一屏幕不能显示全，而你用cat肯定是看不到前面的内容的，那么使用more就可以解决这个问题。当看完一屏后按空格键继续看下一屏。但看完所有内容后就会退出。如果你想要提前退出，只要按q键即可。</p>\r\n<p>　　less作用跟more一样，但比more好在可以上翻下翻。空格键同样可以翻页，而按j键可以向下移动，按k键向上移动。在使用more和less查看某个文件时，你可以按&ldquo;/&rdquo;键，然后输入一个word回车，这样就可以找到word了。如果是多个word可以按&ldquo;n&rdquo;键显示下一个。另外你也可以不按&ldquo;/&rdquo;而是按&ldquo;？&rdquo;后面同样跟word来搜索这个word，唯一不同的是&ldquo;/&rdquo;是在当前行向下搜索，而&ldquo;？&rdquo;是在当前行向上搜索。</p>\r\n<p>　　head后面直接跟文件名，则显示文件前10行。如果加-n选项则显示文件前n行。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost mvtest]# head /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\nbin:x:1:1:bin:/bin:/sbin/nologin\r\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\r\nadm:x:3:4:adm:/var/adm:/sbin/nologin\r\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\nsync:x:5:0:sync:/sbin:/bin/sync\r\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\nhalt:x:7:0:halt:/sbin:/sbin/halt\r\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\n[root@localhost mvtest]# head -n 5 /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\nbin:x:1:1:bin:/bin:/sbin/nologin\r\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\r\nadm:x:3:4:adm:/var/adm:/sbin/nologin\r\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\n[root@localhost mvtest]# \r\n</pre>\r\n</div>\r\n<p>　　tail和head一样，后面直接跟文件名，则显示文件最后10行。如果加-n选项则显示文件最后n行。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost mvtest]# tail /etc/passwd\r\nuser_91:x:1095:100::/home/user_91:/bin/bash\r\nuser_92:x:1096:100::/home/user_92:/bin/bash\r\nuser_93:x:1097:100::/home/user_93:/bin/bash\r\nuser_94:x:1098:100::/home/user_94:/bin/bash\r\nuser_95:x:1099:100::/home/user_95:/bin/bash\r\nuser_96:x:1100:100::/home/user_96:/bin/bash\r\nuser_97:x:1101:100::/home/user_97:/bin/bash\r\nuser_98:x:1102:100::/home/user_98:/bin/bash\r\nuser_99:x:1103:100::/home/user_99:/bin/bash\r\nuser_100:x:1104:100::/home/user_100:/bin/bash\r\n[root@localhost mvtest]# tail -n 5 /etc/passwd\r\nuser_96:x:1100:100::/home/user_96:/bin/bash\r\nuser_97:x:1101:100::/home/user_97:/bin/bash\r\nuser_98:x:1102:100::/home/user_98:/bin/bash\r\nuser_99:x:1103:100::/home/user_99:/bin/bash\r\nuser_100:x:1104:100::/home/user_100:/bin/bash\r\n[root@localhost mvtest]#\r\n</pre>\r\n</div>\r\n<p>　　-f：动态显示文件的最后10行，如果文件时不断增加的，则用-f选项。如 tail -f /var/log/messages</p>\r\n<h3>　　文件所属主以及所属组</h3>\r\n<p>　　一个linux目录或者文件，都会有一个所属主和所属组。所属主，即文件的拥有者，而所属组，即该文件所属主所在的一个组。linux这样设置文件属性的目的是为了文件的安全。例如，test文件的所属主是user0，而test1文件的所属主是user1，那么user1是不能查看test文件的，相应的user0也是不能查看test1文件的。然后又这样一个应用，我想要创建一个文件同时让user0和user1来查看怎么办呢？</p>\r\n<p>　　这事&ldquo;所属组&rdquo;就派上用场了，即，创建一个群组users，让user0和user1同属于users组，然后创建一个文件test2，且其所属组为users，那么user0和user1都可以访问test2文件。</p>\r\n<p>　　linux文件属性不仅规定了所属主和所属组，还规定了所属主（user）、所属组（group）以及其他用户（others）对文件的权限。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# ls -l\r\ntotal 128\r\n-rw-r--r--. 1 root root    0 Sep  5 22:51 1.txt\r\n-rw-------. 1 root root 1259 Jul 31 17:28 anaconda-ks.cfg\r\n-rw-r--r--. 1 root root  210 Sep  4 22:18 break2.sh\r\n-rw-r--r--. 1 root root  298 Sep  4 22:11 break.sh\r\n-rw-r--r--. 1 root root  304 Sep  4 18:32 case1.sh\r\n-rw-r--r--. 1 root root  261 Sep  4 18:39 case2.sh\r\n-rw-r--r--. 1 root root  146 Sep  6 02:08 case.sh\r\ndrwxr-xr-x. 2 root root   21 Sep  4 00:46 code\r\n-rw-r--r--. 1 root root  178 Sep  4 23:08 continue2.sh\r\n-rw-r--r--. 1 root root  301 Sep  4 22:21 continue.sh\r\ndrwxr-xr-x. 2 root root   28 Sep 10 22:42 cptest\r\n</pre>\r\n</div>\r\n<p>　　上例中，用ls -l查看当前目录下的文件，共显示了9列内容（用空格划分列），都代表了什么含义呢？</p>\r\n<p>　　第一列，包含的东西有该文件类型、所属主、所属组已经其他用户对该文件的权限。第一列共10位。其中第一位用来描述该文件的类型。上例中，我们看到的类型有&ldquo;d&rdquo;和&ldquo;-&rdquo;，其实除了这两种外还有&ldquo;l&rdquo;，&ldquo;b&rdquo;、&ldquo;c&rdquo;、&ldquo;s&rdquo;等。</p>\r\n<p>　　d：表示该文件是目录；</p>\r\n<p>　　-：表示该文件是普通文件；</p>\r\n<p>　　l：表示该文件是连接文件；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# ls -l /etc/rc.local \r\nlrwxrwxrwx. 1 root root 13 Jul 31 17:23 /etc/rc.local -> rc.d/rc.local\r\n[root@localhost ~]#</pre>\r\n</div>\r\n<p>　　b：表示该文件是块设备文件，比如磁盘分区；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# ls -l /dev/sda*\r\nbrw-rw----. 1 root disk 8, 0 Sep 10 18:04 /dev/sda\r\nbrw-rw----. 1 root disk 8, 1 Sep 10 18:04 /dev/sda1\r\nbrw-rw----. 1 root disk 8, 2 Sep 10 18:04 /dev/sda2\r\n[root@localhost ~]# </pre>\r\n</div>\r\n<p>　　c：表示该文件是串行端口设备，例如键盘、鼠标；</p>\r\n<p>　　s：表示该文件是套接字文件（socket），用于进程间通信；</p>\r\n<p> 　　后面的9位，每三个为一组。均为rwx三个参数的组合。其中r代表可读，w代表可写，x代表可执行。前三位为所属主（user）的权限，中间三位为所属组（group）的权限，最后三位为其他非本群组（others）的权限。</p>\r\n<p>　　一个文件的属性为-rwxr-xr--，它代表的意思是，该文件时普通文件，文件的拥有者可读可写可执行，文件所属组对其有可读不可写可执行，其他用户对其只可读。</p>\r\n<p>　　对于一个目录来讲，打开这个目录即为执行这个目录，所以任何一个目录必须要有x权限才能打开并查看该目录。例如一个目录的属性为drwxr--r--其所属主为root，那么除了root外的其他用户是不能打开这个目录的。</p>\r\n<p>　　第二列，表示为链接占用的节点（inode），若为目录时，通常与该目录地下还有多少目录有关系。</p>\r\n<p>　　第三列，表示该文件的所属主。</p>\r\n<p>　　第四列，表示该文件的所属组。</p>\r\n<p>　　第五列，表示该文件的大小。</p>\r\n<p>　　第六列、第七列、第八列，表示该文件的创建日期或者最近的修改日期，分别为月份日期以及时间。</p>\r\n<p>　　第九列，表示文件名。如果文件名前有个.，则表示该文件是隐藏文件。</p>\r\n<h3>　　更改文件的权限</h3>\r\n<p>　　更改文件的权限，也就是更改所属主、所属组以及他们对应的读写执行权限。</p>\r\n<p>　　1）、更改所属组chgrp</p>\r\n<p>　　语法：chgrp [组名] [文件名]</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost chtest]# groupadd testgroup\r\n[root@localhost chtest]# touch test1\r\n[root@localhost chtest]# ls -l test1\r\n-rw-r--r--. 1 root root 0 Sep 11 19:58 test1\r\n[root@localhost chtest]# chgrp testgroup test1 \r\n[root@localhost chtest]# ls -l test1 \r\n-rw-r--r--. 1 root testgroup 0 Sep 11 19:58 test1\r\n[root@localhost chtest]# \r\n</pre>\r\n</div>\r\n<p>　　2）、更改文件所属主chown</p>\r\n<p>　　语法：chown [-R] [账号名] [文件名] 　　或　　chown [-R] [账户名:组名] [文件名]</p>\r\n<p>　　这里的-R选项只作用于目录，作用是级联更改，即不仅更改当前目录，连目录中的目录或者文件全部更改。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost chtest]# mkdir test\r\n[root@localhost chtest]# useradd user1\r\n[root@localhost chtest]# ls -ld test\r\ndrwxr-xr-x. 2 root root 6 Sep 11 21:54 test\r\n[root@localhost chtest]# touch test/test2\r\n[root@localhost chtest]# ls -l test\r\ntotal 0\r\n-rw-r--r--. 1 root root 0 Sep 11 21:54 test2\r\n[root@localhost chtest]# chown user1 test\r\n[root@localhost chtest]# ls -ld test\r\ndrwxr-xr-x. 2 user1 root 19 Sep 11 21:54 test\r\n[root@localhost chtest]# ls -l test\r\ntotal 0\r\n-rw-r--r--. 1 root root 0 Sep 11 21:54 test2\r\n[root@localhost chtest]# chown -R user1:testgroup test\r\n[root@localhost chtest]# ls -ld test\r\ndrwxr-xr-x. 2 user1 testgroup 19 Sep 11 21:54 test\r\n[root@localhost chtest]# ls -l test\r\ntotal 0\r\n-rw-r--r--. 1 user1 testgroup 0 Sep 11 21:54 test2\r\n[root@localhost chtest]#</pre>\r\n</div>\r\n<p>　　上例中，首先建立一个目录test，然后在test目录下创建一个普通文件test2，因为是以root的身份创建的目录和文件，所以所属主以及所属组都是root。chown user1 test这使test的目录所属主由root变为user1，然后test目录下的test2文件所属主以及所属组还是root。接着chown -R user1:testgroup test这样把test连同test目录下的test2的所属主以及所属组都改变了。</p>\r\n<p>　　3）、更改用户对文件的读写执行权限chmod</p>\r\n<p> 　　在linux中为了方便更改这些权限，linux使用数字代替rwx，具体规则为（r：4）、（w:2）、（x：1）、（ -：0）。</p>\r\n<p>　　举个例子，-rwxrwx---用数组表示就是770，具体是这样来的：</p>\r\n<p>　　rwx=4+2+1=7；rwx=4+2+1=7；---=0+0+0=0</p>\r\n<p>　　语法：chmod [-R] [xyz] [文件名]（这里的xyz，表示数字）</p>\r\n<p>　　-R：选项作用同chown，级联更改。</p>\r\n<p>　　值得提一下的是，在linux系统中，默认一个目录的权限为755，而一个文件的默认权限是644。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost chtest]# ls -ld test\r\ndrwxr-xr-x. 2 user1 testgroup 19 Sep 11 21:54 test\r\n[root@localhost chtest]# ls -l test\r\ntotal 0\r\n-rw-r--r--. 1 user1 testgroup 0 Sep 11 21:54 test2\r\n[root@localhost chtest]# chmod 750 test\r\n[root@localhost chtest]# ls -ld test\r\ndrwxr-x---. 2 user1 testgroup 19 Sep 11 21:54 test\r\n[root@localhost chtest]# ls -l test/test2\r\n-rw-r--r--. 1 user1 testgroup 0 Sep 11 21:54 test/test2\r\n[root@localhost chtest]# chmod -R 700 test\r\n[root@localhost chtest]# ls -ld test\r\ndrwx------. 2 user1 testgroup 19 Sep 11 21:54 test\r\n[root@localhost chtest]# ls -l test\r\ntotal 0\r\n-rwx------. 1 user1 testgroup 0 Sep 11 21:54 test2\r\n[root@localhost chtest]# \r\n</pre>\r\n</div>\r\n<p>　　如果你创建一个目录，而该目录不想让其他人看到内容，则只需要设置成rwxr-----（740）即可。</p>\r\n<p>　　chmod还支持使用rwx的方式来设置权限。从之前的介绍中我们可以发现，基本上这9个属性分别是（1）user（2）group（3）others三群。那么我们就可以使用u、g、o来代表三群的属性。此外，a则代表all亦即全部的三群。那么读写的属性就可以写成r、w、x。也就可以使用下面的方式：</p>\r\n<table style=\"height: 106px; width: 674px;\" border=\"0\">\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\">chmod</td>\r\n<td style=\"text-align: center;\">\r\n<p>u</p>\r\n<p>g</p>\r\n<p>o</p>\r\n<p>a</p>\r\n</td>\r\n<td style=\"text-align: center;\">\r\n<p>+（加入）</p>\r\n<p>-（除去）</p>\r\n<p>=（设定）</p>\r\n</td>\r\n<td style=\"text-align: center;\">\r\n<p>r</p>\r\n<p>w</p>\r\n<p>x</p>\r\n</td>\r\n<td style=\"text-align: center;\">文档或目录</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>　　现在我想把一个文件设置成这样的权限rwxr-xr-x（755），使用这样的方式改变权限的命令为：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost chtest]# ls -l test/test2\r\n-rwx------. 1 user1 testgroup 0 Sep 11 21:54 test/test2\r\n[root@localhost chtest]# chmod u=rwx,og=rx test/test2\r\n[root@localhost chtest]# ls -l test/test2\r\n-rwxr-xr-x. 1 user1 testgroup 0 Sep 11 21:54 test/test2\r\n[root@localhost chtest]#\r\n</pre>\r\n</div>\r\n<p>　　另外还可以针对u、g、o、a增加或者减少某个权限（读、写、执行），例如：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost chtest]# ls -l test/test2\r\n-rwxr-xr-x. 1 user1 testgroup 0 Sep 11 21:54 test/test2\r\n[root@localhost chtest]# chmod u-x test/test2\r\n[root@localhost chtest]# ls -l test/test2\r\n-rw-r-xr-x. 1 user1 testgroup 0 Sep 11 21:54 test/test2\r\n[root@localhost chtest]# chmod a-x test/test2\r\n[root@localhost chtest]# ls -l test/test2\r\n-rw-r--r--. 1 user1 testgroup 0 Sep 11 21:54 test/test2\r\n[root@localhost chtest]# chmod u+x test/test2\r\n[root@localhost chtest]# ls -l test/test2\r\n-rwxr--r--. 1 user1 testgroup 0 Sep 11 21:54 test/test2\r\n[root@localhost chtest]# \r\n</pre>\r\n</div>\r\n<h3>　　which命令</h3>\r\n<p>　　which命令用来查找可执行文件的绝对路径。which命令只能用来查找PATH环境变量中出现的路径下的可执行文件。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost chtest]# which ls\r\nalias ls=\'ls --color=auto\'\r\n        /usr/bin/ls\r\n[root@localhost chtest]# which cd\r\n/usr/bin/cd\r\n[root@localhost chtest]# \r\n</pre>\r\n</div>\r\n<h3>　　whereis命令</h3>\r\n<p>　　whereis通过预先生成的一个文件列表库去查找跟给出的文件名相关的文件。</p>\r\n<p>　　语法：whereis [-bmsu] [文件名称]</p>\r\n<p>　　-b：只找binary文件；</p>\r\n<p>　　-m：只找在说明文件manual路径下的文件；</p>\r\n<p>　　-s：只找source来源文件；</p>\r\n<p>　　-u：没有说明文档的文件；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost chtest]# whereis passwd\r\npasswd: /usr/bin/passwd /etc/passwd /usr/share/man/man1/passwd.1.gz\r\n[root@localhost chtest]# whereis -b passwd\r\npasswd: /usr/bin/passwd /etc/passwd\r\n[root@localhost chtest]# whereis -m passwd\r\npasswd: /usr/share/man/man1/passwd.1.gz\r\n[root@localhost chtest]#\r\n</pre>\r\n</div>\r\n<h3>　　locate命令</h3>\r\n<p>　　locate类似whereis，也是通过查找预先生成的文件列表库来告诉用户要查找的文件在哪里。后面直接跟文件名。如果你的linux没有这个命令，请安装软件包mlocate，这个软件包在你的系统安装盘里，后缀名是RPM，随后介绍find命令会告诉你如何查找这个包。如果你装的CentOS你可以使用这个安装米宁来安装yum install -y mlocate。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost chtest]# yum install -y mlocate\r\nLoaded plugins: fastestmirror\r\nDetermining fastest mirrors\r\n * base: mirrors.shu.edu.cn\r\n * extras: mirrors.shu.edu.cn\r\n * updates: mirrors.shu.edu.cn\r\nbase                                                                                | 3.6 kB  00:00:00     \r\nextras                                                                              | 3.4 kB  00:00:00     \r\nupdates                                                                             | 3.4 kB  00:00:00     \r\n(1/2): extras/7/x86_64/primary_db                                                   | 187 kB  00:00:00     \r\n(2/2): updates/7/x86_64/primary_db                                                  | 5.2 MB  00:00:09     \r\nResolving Dependencies\r\n--> Running transaction check\r\n---> Package mlocate.x86_64 0:0.26-8.el7 will be installed\r\n--> Finished Dependency Resolution\r\n\r\nDependencies Resolved\r\n\r\n===========================================================================================================\r\n Package                  Arch                    Version                      Repository             Size\r\n===========================================================================================================\r\nInstalling:\r\n mlocate                  x86_64                  0.26-8.el7                   base                  113 k\r\n\r\nTransaction Summary\r\n===========================================================================================================\r\nInstall  1 Package\r\n\r\nTotal download size: 113 k\r\nInstalled size: 379 k\r\nDownloading packages:\r\nmlocate-0.26-8.el7.x86_64.rpm                                                       | 113 kB  00:00:00     \r\nRunning transaction check\r\nRunning transaction test\r\nTransaction test succeeded\r\nRunning transaction\r\n  Installing : mlocate-0.26-8.el7.x86_64                                                               1/1 \r\n  Verifying  : mlocate-0.26-8.el7.x86_64                                                               1/1 \r\n\r\nInstalled:\r\n  mlocate.x86_64 0:0.26-8.el7                                                                              \r\n\r\nComplete!\r\n[root@localhost chtest]# locate passwd\r\nlocate: can not stat () `/var/lib/mlocate/mlocate.db\': No such file or directory\r\n[root@localhost chtest]# \r\n</pre>\r\n</div>\r\n<p>　　这是因为系统没有生成那个文件列表库，你可以使用updatedb命令立即生成（更新）这个库。如果你的服务器上正跑着重要的业务，那么你最好不要去运行这个命令，因为一旦运行，服务器的压力会变大。这个数据库默认情况下每周更新一次。所以你用locate命令去搜索一个文件，正好是在两次更新时间段内，那你肯定是得不到结果的。你可以到/etc/updated.cnf去配置这个数据库生成（更新）规则。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost chtest]# updatedb\r\n[root@localhost chtest]# locate passwd\r\n/etc/passwd\r\n/etc/passwd-\r\n/etc/pam.d/passwd\r\n/etc/security/opasswd\r\n/usr/bin/gpasswd\r\n/usr/bin/grub2-mkpasswd-pbkdf2\r\n/usr/bin/passwd\r\n/usr/include/rpcsvc/yppasswd.h\r\n/usr/include/rpcsvc/yppasswd.x\r\n/usr/lib/firewalld/services/kpasswd.xml\r\n/usr/lib64/security/pam_unix_passwd.so\r\n/usr/local/openssl-1.1.1-pre8/apps/passwd.c\r\n/usr/local/openssl-1.1.1-pre8/apps/passwd.d\r\n/usr/local/openssl-1.1.1-pre8/apps/passwd.o\r\n/usr/local/openssl-1.1.1-pre8/doc/man1/passwd.pod\r\n/usr/local/openssl-1.1.1-pre8/doc/man3/SSL_CTX_set_default_passwd_cb.pod\r\n/usr/local/openssl-1.1.1-pre8/test/recipes/20-test_passwd.t\r\n/usr/local/openssl-1.1.1-pre8/test/recipes/90-test_sslapi_data/passwd.txt\r\n/usr/local/share/doc/openssl/html/man1/openssl-passwd.html\r\n/usr/local/share/doc/openssl/html/man1/passwd.html\r\n/usr/local/share/doc/openssl/html/man3/SSL_CTX_get_default_passwd_cb.html\r\n/usr/local/share/doc/openssl/html/man3/SSL_CTX_get_default_passwd_cb_userdata.html\r\n/usr/local/share/doc/openssl/html/man3/SSL_CTX_set_default_passwd_cb.html\r\n/usr/local/share/doc/openssl/html/man3/SSL_CTX_set_default_passwd_cb_userdata.html\r\n/usr/local/share/doc/openssl/html/man3/SSL_get_default_passwd_cb.html</pre>\r\n</div>\r\n<h3>　　find命令</h3>\r\n<p>　　find这个搜索工具是笔者用的最多的一个，所以请你务必熟悉它。</p>\r\n<p>　　语法：find [路径] [参数]</p>\r\n<p>　　-atime +n：访问或者执行时间大于n天的文件；</p>\r\n<p>　　-ctime +n：写入、更改inode属性（例如更改所有者、权限或者连接）时间大于n天定的文件；</p>\r\n<p>　　-mtime +n：写入时间大于n天的文件；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# find /root -atime 1\r\n/root/cptest/111\r\n/root/cptest/222\r\n/root/mvtest/1.txt\r\n[root@localhost ~]# find /root -ctime 1\r\n/root/cptest\r\n/root/cptest/111\r\n/root/cptest/222\r\n/root/.lesshst\r\n/root/test\r\n/root/mvtest\r\n/root/mvtest/1.txt\r\n[root@localhost ~]# find /root -mtime 1\r\n/root/cptest\r\n/root/cptest/111\r\n/root/cptest/222\r\n/root/.lesshst\r\n/root/test\r\n/root/mvtest\r\n/root/mvtest/1.txt\r\n[root@localhost ~]# </pre>\r\n</div>\r\n<p>　　看到这里，你对这三个time是不是有些晕了，那么笔者就先给你介绍一下这三个time属性。</p>\r\n<p>　　文件Access time，atime是在读取文件呢或者执行文件时更改的。</p>\r\n<p>　　文件的Modified time，mtime是在写入文件时随文件内容的更改而更改的 。</p>\r\n<p>　　文件Cteate time，ctime是在写入文件、更改所有者、权限或者链接设置时随inode的内容更改而更改的。</p>\r\n<p>　　因此，更改文件的内容即会更改mtime和ctime，但是文件的ctime可能会在mtime未发生任何变化时更改，例如，更改了文件的权限，但文件呢内容并没有变化</p>\r\n<p>　　ls -l命令可用来列出文件的atime、ctime和mtime。</p>\r\n<p>　　ls -lc filename：列出文件的ctime</p>\r\n<p>　　ls -lu filename：列出文件的atime</p>\r\n<p>　　ls -l filename：列出文件的mtime</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# ls -ldc file1\r\ndrwxr-xr-x. 3 root root 32 Sep 12 18:11 file1\r\n[root@localhost ~]# ls -ldu file1\r\ndrwxr-xr-x. 3 root root 32 Sep 12 18:12 file1\r\n[root@localhost ~]# ls -ld file1\r\ndrwxr-xr-x. 3 root root 32 Sep 12 18:11 file1\r\n[root@localhost ~]# </pre>\r\n</div>\r\n<p>　　-name filename：直接查找该文件名的文件，这个是使用最多的了。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# find /root -name test3.sh \r\n/root/test3.sh\r\n/root/test/test3.sh\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　-type type：通过文件的类型查找。type包含了f、b、c、d、l、s等等。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# mkdir file1\r\n[root@localhost ~]# mkdir file1/file2\r\n[root@localhost ~]# touch file1/file3\r\n[root@localhost ~]# touch file1/file2/file4\r\n[root@localhost ~]# find ./file1 -type d\r\n./file1\r\n./file1/file2\r\n[root@localhost ~]# find ./file1 -type f\r\n./file1/file2/file4\r\n./file1/file3\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<h3>　　linux文件类型</h3>\r\n<p>　　在前面的内容中年简单介绍了普通文件（-）、目录（d）等，在linux文件系统中，主要有以下几种类型的文件。</p>\r\n<p>　　1）、正规文件（regular file）：就是一般类型的文件，当用ls -l查看某个目录时，第一个属性为&ldquo;-&rdquo;的文件就是正规文件，或者叫普通文件。正规文件又可分成纯文字文件（ascii）或者二进制文件（binary）。纯文本文件时可以通过cat、more、less等工具直接查看内容的，而二进制文件并不能。例如我们用的命令/bin/ls这就是一个二进制文件。</p>\r\n<p>　　2）、目录（directory）：这个容易理解，就是目录，跟windows下的文件夹一个意思，只不过在linux中我们不叫文件夹，而是叫目录。ls -l查看第一个属性为&ldquo;d&rdquo;。</p>\r\n<p>　　3）、连接档（link）：ls -l查看第一个属性为&ldquo;l&rdquo;，类似windows下的快捷方式。这种文件在linux中很常见，而且笔者在日常的系统维护运维工作中用的很多。</p>\r\n<p>　　4）、设备档（device）：与系统周边相关的一些档案，通常都集中在/dev这个目录之下。通常又分为两种：</p>\r\n<p>　　　　区块（block）设备档：就只一些存储数据，以提供系统存取的接口设备，简单的说就是硬盘啦。例如你的一号硬盘的代码是/dev/hda1等等的档案。第一个属性是&ldquo;b&rdquo;。</p>\r\n<p>　　　　字符（character）设备档：即是一些串行端口的接口设备，例如键盘、鼠标等等。第一个属性是&ldquo;c&rdquo;。</p>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/31/9566213.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('21', '0', 'SHELL脚本基础', '', '', '', '<p>　　shell首先它是一个脚本，并不能作为正式的编程语言。因为是跑在linux的shell中，所以叫shell脚本。说白了，shell脚本就是一些命令的集合。举个例子，我想要实现这样的操作：</p>\r\n<p>　　1）进入到/tmp/目录；</p>\r\n<p>　　2）列出当前目录中所有的文件名；</p>\r\n<p>　　3）把所有当前的文件拷贝到/root/目录下；</p>\r\n<p>　　4）删除当前目录下的所有文件；</p>\r\n<p>　　简单的4步在shell窗口中需要你敲4次命令，按4次回车。这样是不是很麻烦？当然这4步操作非常简单，如果是更加复杂的命令设置需要几十次操作呢？那样的话一次一次敲键盘会很麻烦。所以不妨把所有的操作都记录到一个文档中，然后去调用文档中的命令，这样一步操作就可以完成。其实这个文档就是shell脚本，只是这个shell脚本有它特殊的格式。</p>\r\n<p>　　shell脚本能帮助我们很方便的去管理服务器，因为我们可以指定一个任务计划定时去执行某一个shell脚本实现我们想要需求。这对于linux系统管理员来说是一件非常值得自豪的事情。</p>\r\n<p>　　有一个问题需要约定一下，凡是自定义的脚本建议放到/usr/local/sbin/目录下，这样做的目的是，一来可以更好的管理文档；二来以后接管你的管理员都知道自定义脚本在哪里，方便维护。</p>\r\n<h3>shell脚本的基本结构以及如何执行</h3>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi test.sh</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash<br /># This is my first shell script.\r\ndate\r\necho \"Hello World!\"\r\n</pre>\r\n</div>\r\n<p>　　shell脚本通常都是以.sh为后缀名的，这个并不是说不带.sh这个脚本就不能执行，只是大家的一个习惯而已。所以，以后你发现了.sh为后缀的文件那么它一定会是一个shell脚本了。test.sh中第一行&ldquo;#!/bin/bash&rdquo;它代表的意思是，该文件使用的是bash语法。如果不设置该行，那么你的shell脚本就不能执行。&ldquo;#&rdquo;表示注释，后面跟一些脚本相关的注释内容。当然这些注释并非必须的，如果你懒得很，可以省略，但是笔者不建议省略。因为随着你工作时间的增加，你写的shell脚本会越来越多，如果有一天你回头查看你写的某个脚本时，很可能忘记该脚本时用来干什么的以及什么时候写的。所以写上注释是有必要的。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh test.sh\r\nWed Sep  5 23:33:17 CST 2018\r\nHello World!\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　shell脚本的执行很简单，直接&ldquo;sh filename&rdquo;即可，另外你还可以这样执行。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# chmod +x test.sh\r\n[root@localhost ~]# ./test.sh\r\nWed Sep  5 23:34:55 CST 2018\r\nHello World!\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　默认我们用vim编辑的文档是不带有执行权限的，所以需要加一个执行权限，那样就可以直接使用&ldquo;./filename&rdquo;执行这个脚本了。另外使用sh命令去执行一个shell脚本的时候是可以加-x选项来查看这个脚本执行过程的，这样有利于我们调试这个脚本哪里出问题了。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh -x test.sh\r\n+ date\r\nWed Sep  5 23:38:44 CST 2018\r\n+ echo \'Hello World!\'\r\nHello World!\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　该shell脚本中用到了&ldquo;date&rdquo;这个命令，它的作用就是来打印当前系统的时间。其实在shell脚本中date使用率非常高。有几个选项笔者常常在shell脚本中用到：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# date \"+%Y %m %d %H:%M:%S\"\r\n2018 09 06 00:20:31\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　%Y表示年，%m表示月，%d表示日期，%H表示小时，%M表示分钟，%S表示秒</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# date \"+%y %m %d\"\r\n18 09 06\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　注意%Y和%y的区别。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# date -d \"-1 day\" \"+%Y %m %d\"\r\n2018 09 05\r\n[root@localhost ~]# date -d \"+1 day\" \"+%Y %m %d\"\r\n2018 09 07\r\n[root@localhost ~]# date -d \"-1 month\" \"+%Y %m %d\"\r\n2018 08 06\r\n[root@localhost ~]# date -d \"-1 year\" \"+%Y %m %d\"\r\n2017 09 06\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　-d选项也是经常要用到的，它可以打印n天前或者n天后的日期，当然也可以打印n个月/年前或者后的日期。</p>\r\n<h3> shell脚本中的变量</h3>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi test2.sh</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nd=`date +%H:%M:%S`\r\necho \"the script begin at $d\"\r\necho \"now we will sleep 2 seconds.\"\r\nsleep 2\r\nd1=`date +%H:%M:%S`\r\necho \"the script end at $d1\"\r\n</pre>\r\n</div>\r\n<p>　　在test2.sh中使用到了反引号，你是否还记得它的作用？&ldquo;d&rdquo;和&ldquo;d1&rdquo;在脚本中作为变量出现，定义变量的格式为&ldquo;变量名=变量值&rdquo;。当在脚本中引用变量时需要加上&ldquo;$&rdquo;符号。下面看看脚本执行的结果吧。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh test2.sh \r\nthe script begin at 00:43:40\r\nnow we will sleep 2 seconds.\r\nthe script end at 00:43:42\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　下面我们用shell计算两个数的和。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi test3.sh </pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\na=1\r\nb=2\r\nsum=$[$a+$b]\r\necho \"sum is $sum\"\r\n</pre>\r\n</div>\r\n<p>　　数学计算药用&ldquo;[]&rdquo;括起来并且外面要带一个&ldquo;$&rdquo;。脚本结果为：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh test3.sh \r\nsum is 3\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　shell脚本还可以和用户交互。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi test4.sh</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\necho \"Please input a number:\"\r\nread x\r\necho \"Please input another number:\"\r\nread y\r\nsum=$[$x+$y]\r\necho \"The sum of two numbers is:$sum\"\r\n</pre>\r\n</div>\r\n<p>　　这就用到了read命令了，它可以从标准输入获得变量的值，后跟变量名。&ldquo;read x&rdquo;表示x变量的值需要用户通过键盘输入的到。脚本执行过程如下：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh test4.sh \r\nPlease input a number:\r\n5\r\nPlease input another number:\r\n6\r\nThe sum of two numbers is:11\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　我们不妨加上-x选项再来看一下这个执行过程：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh -x test4.sh \r\n+ echo \'Please input a number:\'\r\nPlease input a number:\r\n+ read x\r\n3\r\n+ echo \'Please input another number:\'\r\nPlease input another number:\r\n+ read y\r\n4\r\n+ sum=7\r\n+ echo \'The sum of two numbers is:7\'\r\nThe sum of two numbers is:7\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　在test4.sh中还有更加简洁的方式。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi test5.sh</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nread -p \"Please input a number: \" x\r\nread -p \"Please input another number: \" y\r\nsum=$[$x+$y]\r\necho \"The sum of two numbers is:$sum\"\r\n</pre>\r\n</div>\r\n<p>　　read -p选项类似echo的作用。执行如下：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh test5.sh \r\nPlease input a number: 3\r\nPlease input another number: 5\r\nThe sum of two numbers is:8\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　你有没有用过这样的命令&ldquo;/etc/init.d/iptables restart&rdquo;前面的/etc/init.d/iptables文件其实就是一个shell脚本，为什么后面可以跟一个&ldquo;restart&rdquo;？这里就涉及到了shell脚本的预设变量。实际上，shell脚本在执行的时候后边可以跟变量的，而且还可以跟多个。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi test6.sh</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nsum=$[$1+$2]\r\necho $sum\r\n</pre>\r\n</div>\r\n<p>　　执行过程如下：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh test6.sh 5 8\r\n13\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　在脚本中，你会不会奇怪，哪里来的$1和$2，这其实就是shell脚本的预设变量，其中$1的值就是在执行的时候输入的5，而$2的值就是执行的时候输入的8，当然一个shell脚本的预设变量是没有限制的，这回你明白了吧。另外还有一个$0，不过他代表的是脚本本身的名字。不妨把脚本修改一下。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi test6.sh</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\necho \"$0 $1 $2\"\r\n</pre>\r\n</div>\r\n<p>　　执行结果想必你也猜到了吧。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh test6.sh 5 8\r\ntest6.sh 5 8\r\n[root@localhost ~]# </pre>\r\n</div>\r\n<h3> shell脚本中的逻辑判断</h3>\r\n<p>　　如果你学过C语言或者其他语言，相信你不会对if陌生，在shell脚本中我们同样可以使用if逻辑判断。在shell中if判断的基本语法为：</p>\r\n<p>　　1）不带else</p>\r\n<p>　　if 判断语句; then</p>\r\n<p>　　command</p>\r\n<p>　　fi</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi if1.sh </pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nread -p \"Please input your score: \" a\r\nif((a<60));then\r\n        echo \"you didn\'t pass the exam.\"\r\nfi\r\n</pre>\r\n</div>\r\n<p>　　在if1.sh中出现呢了((a<60))这样的形式，这是shell脚本中特有的格式，用一个小括号或者不用都会报错，请记住这个格式，即可。执行结果为：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh if1.sh \r\nPlease input your score: 36\r\nyou didn\'t pass the exam.\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　2）带有else</p>\r\n<p>　　if 判断语句;then</p>\r\n<p>　　command</p>\r\n<p>　　else</p>\r\n<p>　　command</p>\r\n<p>　　fi</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi if2.sh </pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nread -p \"Please input your score: \" a\r\nif((a<60));then\r\n        echo \"you didn\'t pass the exam.\"\r\nelse\r\n        echo \"Good! you passed the exam.\"\r\nfi\r\n</pre>\r\n</div>\r\n<p>　　执行结果为：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh if2.sh \r\nPlease input your score: 98\r\nGood! you passed the exam.\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　3）带有elif</p>\r\n<p>　　if 判断语句;then</p>\r\n<p>　　command</p>\r\n<p>　　elif 判断语句;then</p>\r\n<p>　　command</p>\r\n<p>　　else</p>\r\n<p>　　command</p>\r\n<p>　　fi</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi if3.sh</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nread -p \"Please input your score: \" a\r\nif((a<60));then\r\n        echo \"you didn\'t pass the exam.\"\r\nelif ((a>60)) && ((a<85));then\r\n        echo \"Good! you passed the exam.\"\r\nelse\r\n        echo \"Very good! your score is very high!\"\r\nfi\r\n</pre>\r\n</div>\r\n<p>　　这里的&amp;&表示&ldquo;并且&rdquo;的意思，当前你也可以使用||表示&ldquo;或者&rdquo;，执行结果：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh if3.sh \r\nPlease input your score: 98\r\nVery good! your score is very high!\r\n[root@localhost ~]# sh if3.sh \r\nPlease input your score: 50\r\nyou didn\'t pass the exam.\r\n[root@localhost ~]# sh if3.sh \r\nPlease input your score: 75\r\nGood! you passed the exam.\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　以上只是简单的介绍了if语句的结构。在判断数字大小除了可以使用&ldquo;(())&rdquo;的形式外，还可以使用&ldquo;[]&rdquo;。但是就不能使用>，&lt;，=这样的符号了，要使用-lt（小于）、-gt（大于）、-ge（大于等于）、-le（小于等于）、-eq（等于）、-ne（不等于）。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# a=10;if [ $a -lt 5 ];then echo ok;fi\r\n[root@localhost ~]# a=10;if [ $a -gt 5 ];then echo ok;fi\r\nok\r\n[root@localhost ~]# a=10;if [ $a -ge 5 ];then echo ok;fi\r\nok\r\n[root@localhost ~]# a=10;if [ $a -le 5 ];then echo ok;fi\r\n[root@localhost ~]# a=10;if [ $a -eq 5 ];then echo ok;fi\r\n[root@localhost ~]# a=10;if [ $a -ne 5 ];then echo ok;fi\r\nok\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　再看看if使用&&和||的情况。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# a=10;if [ $a -lt 1 ] || [ $a -gt 10 ];then echo ok;fi\r\n[root@localhost ~]# a=8;if [ $a -gt 1 ] && [ $a -lt 10 ];then echo ok;fi\r\nok\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　shell脚本中if还经常判断文档属性，比如判断是普通文件还是目录，判断文件是否有读写执行权限，常用的也就几个选项：</p>\r\n<p>　　-e：判断文件或目录是否存在；</p>\r\n<p>　　-d：判断是不是目录，并是否存在；</p>\r\n<p>　　-f：判断是否是普通文件，并存在；</p>\r\n<p>　　-r：判断文档是否有可读权限；</p>\r\n<p>　　-w：判断文档是否有可写权限；</p>\r\n<p>　　-x：判断是否可执行；</p>\r\n<p>　　使用if判断时，具体格式为：if [-e filename];then</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# if [ -d /home ];then echo ok;fi\r\nok\r\n[root@localhost ~]# if [ -f /home ];then echo ok;fi\r\n[root@localhost ~]# if [ -f test.txt ];then echo ok;fi\r\nok\r\n[root@localhost ~]# if [ -e test.txt ];then echo ok;fi\r\nok\r\n[root@localhost ~]# if [ -e test1.txt ];then echo ok;fi\r\n[root@localhost ~]# if [ -r test.txt ];then echo ok;fi\r\nok\r\n[root@localhost ~]# if [ -w test.txt ];then echo ok;fi\r\nok\r\n[root@localhost ~]# if [ -x test.txt ];then echo ok;fi\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　在shell脚本中，除了用if来判断逻辑外，还有一种常用的方式，那就是case了。具体格式为：</p>\r\n<p>　　case 变量 in</p>\r\n<p>　　value1)</p>\r\n<p>　　command</p>\r\n<p>　　;;</p>\r\n<p>　　vaule2)</p>\r\n<p>　　command</p>\r\n<p>　　;;</p>\r\n<p>　　value3)</p>\r\n<p>　　command</p>\r\n<p>　　;;</p>\r\n<p>　　*)</p>\r\n<p>　　command</p>\r\n<p>　　;;</p>\r\n<p>　　esac</p>\r\n<p>　　上面的结构中，不限制value的个数，*则代表除了上面的value外的其他值。下面笔者写了一个判断输入值时奇数或者偶数的脚本。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi case.sh</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nread -p \"Please input a number: \" n\r\na=$[$n%2]\r\ncase $a in\r\n        1)\r\n                echo \"The number is odd\"\r\n        ;;\r\n        0)\r\n                echo \"The number is even\"\r\n        ;;\r\nesac\r\n</pre>\r\n</div>\r\n<p>　　执行结果是：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh case.sh \r\nPlease input a number: 3\r\nThe number is odd\r\n[root@localhost ~]# sh case.sh \r\nPlease input a number: 8\r\nThe number is even\r\n[root@localhost ~]#　　</pre>\r\n</div>\r\n<h3>shell脚本中的循环</h3>\r\n<p> 　　shell脚本中也算是一门简易的编程语言了，当然循环是不能缺少的。常用到的循环有for循环和while循环。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi for.sh</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nfor i in `seq 1 5`;do\r\n        echo $i\r\ndone\r\n</pre>\r\n</div>\r\n<p>　　脚本中的seq 1 5表示从1到5的一个序列。你可以直接运行这个命令试一下。脚本执行结果为：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh for.sh \r\n1\r\n2\r\n3\r\n4\r\n5\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　通过这个脚本就可以看到for循环的基本结构：</p>\r\n<p>　　for 变量名 in 循环条件;do</p>\r\n<p>　　command</p>\r\n<p>　　done</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# for i in 1 2 3 4 5;do echo $i;done\r\n1\r\n2\r\n3\r\n4\r\n5\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　循环的条件那一部分也可以写成这样的形式，中间用空格隔开即可。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# for i in `ls`;do echo $i;done\r\n1.txt\r\nanaconda-ks.cfg\r\nbreak2.sh\r\nbreak.sh\r\ncase1.sh\r\ncase2.sh\r\ncase.sh\r\ncode\r\ncontinue2.sh\r\ncontinue.sh\r\nfor1.sh\r\nfor2.sh\r\nfor3.sh\r\nfor.sh\r\nfunction1.sh\r\nfunction2.sh\r\nif1.sh\r\nif2.sh\r\nif3.sh\r\nmyfile\r\ntest1.sh\r\ntest2.sh\r\ntest3.sh\r\ntest4.sh\r\ntest5.sh\r\ntest6.sh\r\ntest.sh\r\ntest.txt\r\nuntil.sh\r\nusers\r\nwc\r\nwhile2.sh\r\nwhile.sh\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　再来看一下这个while循环，基本格式是：</p>\r\n<p>　　while 条件;do</p>\r\n<p>　　command</p>\r\n<p>　　done</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi while.sh</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\na=10\r\nwhile [ $a -ge 1 ];do\r\n        echo \"$a\"\r\n        a=$[$a-1]\r\ndone\r\n</pre>\r\n</div>\r\n<p>　　脚本执行结果为：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh while.sh \r\n10\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<h3>shell脚本中的函数</h3>\r\n<p>　　如果你学过开发，肯定知道函数的作用。如果你是刚刚接触到这个概念的话，也没有关系，其实很好理解的。函数就是把一段带啊整理到一个小单元中，并给这个小单元起一个名字，当用到这段代码时直接调用这个小单元的名字即可。有时候脚本中的某段代码总是重复使用，如果写成函数，每次用到时直接用函数名代替即可，这样就节省了时间还节省了空间。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# vi fun.sh </pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nfunction sum(){\r\n        sum=$[$1+$2]\r\n        echo $sum\r\n}\r\n\r\nsum $1 $2\r\n</pre>\r\n</div>\r\n<p>　　fun.sh中的sum()为自定义的函数，在shell脚本中要用这样的格式去定义函数。</p>\r\n<p>　　function 函数名(){</p>\r\n<p>　　command</p>\r\n<p>　　}</p>\r\n<p>　　上个脚本的执行结果为：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sh fun.sh 5 8\r\n13\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　在shell脚本中，函数一定要在最前面，不能出现在中间或者最后，因为函数是要被调用的，如果还没出现就被调用，肯定是会出错的。</p>\r\n<h3>练习题</h3>\r\n<p>　　1、编写shell脚本，计算1-100的和；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nsum=0\r\nfor i in `seq 1 100`;do\r\n        sum=$[$sum+$i]\r\ndone\r\n\r\necho $sum</pre>\r\n</div>\r\n<p>　　2、编写shell脚本，要求输入一下数字，然后计算出从1到这个数字的和。要求，如果输入的数字小于1，则重新输入，知道输入正确的数字为止；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nwhile :;do\r\n        read -p \"Input a number: \" a\r\n        sum=0\r\n        if ((a>1));then\r\n                while [ $a -ge 1 ];do\r\n                        sum=$[$sum+$a]\r\n                        a=$[$a-1]\r\n                done\r\n                echo $sum\r\n                break\r\n        else\r\n                continue\r\n        fi\r\ndone</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\nn=0\r\nwhile [ $n -lt 1 ];do\r\n        read -p \"Please input a number, it must greater than 1: \" n\r\ndone\r\n\r\nsum=0\r\nfor i in `seq 1 $n`;do\r\n        sum=$[$sum+$i]\r\ndone\r\n\r\necho $sum</pre>\r\n</div>\r\n<p>　　3、编写shell脚本，把/root/目录下的所有目录（只需要一级）拷贝到/tmp/目录下；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\ndir=\"/root/\"\r\nfor f in `ls $dir`;do\r\n        tmp_dir=${dir}${f}\r\n        if [ -d $tmp_dir ];then\r\n                cp -r $tmp_dir /tmp/\r\n        fi\r\ndone</pre>\r\n</div>\r\n<p>　　4、编写shell脚本，批量建立用户user_00，user_01，...，user_100并且所有用户属于users组；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">#!/bin/bash\r\n\r\ngroup=users\r\negrep \"^$group\" /etc/group >& /dev/null\r\nif [ $? -ne 0 ];then\r\n        groupadd $group\r\nfi\r\n\r\nfor i in `seq 0 100`;do\r\n        if [ $i -lt 10 ];then\r\n                user=\"user_0${i}\"\r\n        else\r\n                user=\"user_${i}\"\r\n        fi\r\n\r\n        egrep \"^$user\" /etc/passwd >& /dev/null\r\n        if [ $? -ne 0 ];then\r\n                useradd -g $group $user\r\n        fi\r\ndone</pre>\r\n</div>\r\n<p>　　5、编写shell脚本，截取文件test.log中的包含关键词&lsquo;abc&rsquo;的行中第一列（假设分隔符为&ldquo;:&rdquo;），然后把截取的数字排序（假设第一列为数字），然后打印出重复次数超过10次的列；</p>\r\n<p>　　6、编写shell脚本，判断输入的IP是否正确（IP的规则是：n1.n2.n3.n4，其中1<n1<255,0<n2<255,0<n3<255,0<n4<255）。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/28/9548322.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('22', '0', 'Web服务器对比介绍', '', '', '', '<h3>1、Apache</h3>\r\n<p>Apache是非常强大的老牌Web服务器，具有模块化结构，拥有众多非常成熟稳定的模块，目前仍是使用非常广泛的服务器，但它是基于多进程HTTPServer，需要对每个用户请求创建一个子进程/线程来响应，当访问较大时，会占用较多的系统资源（主要事实CPU和内存），所以高并发的处理并不是Apache的强项。</p>\r\n<h3>2、Nginx</h3>\r\n<p>      Nginx是一款十分轻量级的HTTP服务器，同时也是一款非常不错的反向代理、负载均衡服务器。Nginx以事件驱动，专为性能优化而开发，支持内核Poll模型，能经受高负载的考验，并且在高负载下具有很高的稳定性。其他HTTP服务器在遇到访问的峰值或恶意攻击时，很可能会因为服务器内存频繁交换而导致内存耗尽，最终导致服务器失去响应，而Nginx采取了分阶段资源分配技术，是的它的CPU与内存占用率非常低。Nginx官方表示保持10000个没有活动的连接，只占2.5MB内存，所以在抵御类似DOS攻击时，Nginx有非常出色的表现。除此之外，就稳定性而言，Nginx比Lighttpd更胜一筹。</p>\r\n<p>      Nginx支持热部署，启动非常容易，并且几乎可以做到不间断运行，即使运行数月也不需要重新启动。Nginx还可以在不间断服务的情况下进行版本升级。</p>\r\n<h3>3、Lighttpd</h3>\r\n<p>      Lighttpd是一款轻量级的Web服务器，占用内存小且CPU负荷低，是服务于静态内容的不错选择。</p>\r\n<h3>4、IIS</h3>\r\n<p>      IIS作为运行在Windows环境下的Web服务器软件，可以对.NET、PHP等进行解析。IIS只能运行于Windows下，而绝大多数开源框架或软件最佳搭配环境为Linux/UNIX，这是因为IIS不具有开源软件低成本、以扩展的特点。从开源、投入、扩展、性能等方面考虑，IIS均不是优先考虑对象。</p>\r\n<h3>5、Tomcat</h3>\r\n<p>      Tomcat服务器时一个免费的开源的Web应用服务器，属于轻量级应用服务器，是开发和调试JSP程序的首选。Tomcat和IIS等Web服务器一样，具有处理HTML页面的功能，但处理静态页面的能力较差。</p>\r\n<p>      Lighttpd是一个单进程模型的Web服务器，内存使用量很少。Nginx在内存分配方面表现良好，使用多线程来处理请求，这使得多个线程之间可以共享内存资源，从而使内存使用量大大减少。此外Nginx使用分段内存分配策略，按需分配及时释放，总体占用内存很少，可支持较大的并发连接。Apache在运行时使用较大的内存，是多进程模型，使用基于内存池策略的内存管理方法，使得在运行开始时便一次性申请大片内存作为内存池，这=这样在随后需要的时候只在内存池中直接获取，不需要再分配，因此不适合大并发的情况。Nginx作为一个后起之秀，发展速度非常迅猛，目前各大网站纷纷采用Nginx就说明它的优势是不言而喻的。</p>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/24/9529393.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('23', '0', '作为一名技术人员，我们应该如何践行呢？', '', '', '', '<p>原则，犹如指引行动的&ldquo;灯塔&rdquo;，它连接着我们的价值与行动。</p>\r\n<p>每个人都应该有自己的原则，当我们需要作出选择时，一定要坚持以原则为中心。</p>\r\n<h3>原则一：Owner意识</h3>\r\n<p>1、认真负责的态度</p>\r\n<p>认真负责是工作的底线。首先，要对我们交付的结果负责。项目中每一个设计文档、每一行代码都要认真完成，要对它的质量负责。</p>\r\n<p>其次，我们要对开发的系统负责。系统的架构是否需要完善，接口文档是否完善，日志是否完善，数据库是否需要扩容，缓存空间够不够等等，这些都是需要落实的事情。</p>\r\n<p>2、积极主动的精神</p>\r\n<p>我们在做好自己分内工作的同时，也应该积极主动地投入到&ldquo;分外&rdquo;的工作中去。一份耕耘一份收获，不要给自己设限，努力成为一个更加优秀的人</p>\r\n<h3>原则二：时间观念</h3>\r\n<p>项目的按期交付是一项很重要的执行能力，在很大程度上决定着领导和同事对自己靠谱度的评价。</p>\r\n<p>1、 做事有计划</p>\r\n<p>凡是预则立，不预则废。在制定计划过程中，要尽可能把每一项拆细一点。</p>\r\n<p>事实证明，粒度越细，计划越精准，实际开发时间与计划之间的误差就会越小。</p>\r\n<p>此外，务必要规定明确的可检查，并在计划中设置一些关键的时间点进行核对。</p>\r\n<p>2、工作分主次</p>\r\n<p>优先做重要紧急的事情</p>\r\n<p>重要不紧急的事情可以暂缓做，但是要持续推进</p>\r\n<p>紧急不重要的事情可以酌情委托给最适合的人做</p>\r\n<p>不重要不紧急的事情可以考虑不做</p>\r\n<h3>原则三：以终为始</h3>\r\n<p>先想清楚目标，然后努力实现。</p>\r\n<p>在学习之前，我们一定要先问自己，这次学习的目标是什么？</p>\r\n<h3>原则四：闭环思维</h3>\r\n<p>一个人是否靠谱，就看他能否做到凡事有交代，件件有着落，事事有回音。</p>\r\n<p>这就是闭环思维的重要性。他强调的是一种及时的反馈闭环，如果别人给我们分配了一个任务，不管完成结果如何，一定要在规定的时间内给出明确的反馈。</p>\r\n<p>真正的闭环，要求我们队工作中的事情都能够养成良好的思维习惯，沟通要有结论，通知要有反馈，To Do要有验收。</p>\r\n<h3>原则五：保持敬畏</h3>\r\n<p>&ldquo;君子之心，常怀敬畏&rdquo;，保持敬畏之心能够让我们烧饭错误。在工作中存在各种各样的规范，例如代码规范、设计规范、上线规范等等。</p>\r\n<p>我们必须明白，这些规范的制定一定是基于某些客观原因的，它们都是历史无数Case积累而来的经验。</p>\r\n<p>当我们进入一个新的团队，请先暂时忘掉之前的习惯，要尽快学习团队既有的规范，而且让自己与团队保持一致。</p>\r\n<p>保持敬畏之心并不意味着要&ldquo;因循守旧&rdquo;。在我们充分了解这些规范和规定之后，如果觉得存在不妥之处，可以跟全组同学讨论，是否采纳新的建议，然后及时去更新迭代。</p>\r\n<h3>原则六：事不过二</h3>\r\n<p>&ldquo;所有的评审与问题讨论，不要超过两次&rdquo;。之所以这样要求，是因为我们发现，很多开发都把时间花费在一些无休止的评审与问题讨论中，真正投入到实际开发中的时间反而很少。</p>\r\n<p>所有的评审最多两次。通过这种方式，倒逼利益相关方尽可能做好需求与方案设计。</p>\r\n<p>&ldquo;同样的错误不能犯第二次&rdquo;。每次故障之后，Casestudy都必须进行深刻的总结复盘，对故障原因进行5Why分析，给出明确可执行的To Do List。</p>\r\n<h3>原则七：设计优先</h3>\r\n<p>架构设计，并不仅仅关系到质量，还关乎团队的效能问题。很多团队也明文规定，开发周期在3pd以上的项目必须有设计文档，开发周期在5pd以上的项目必须有设计评审。</p>\r\n<p>在具体的执行过程中，由于各种原因，设计往往并不能达到预期的效果。究其原因，有的是因为项目周期紧，来不及设计的足够详细；有的原因时开发主观上认为项目比较简单，设计草草了事。</p>\r\n<p>无数事实证明，忽略了前期设计，往往会导致后续开发周期被大幅拉长，给项目带来了很大的Delay风险。</p>\r\n<p>&ldquo;设计优先&rdquo;这一原则，要求写别人看得懂的设计。</p>\r\n<p>在设计过程中，要以需求为出发点，通过合理的抽象把问题简化，讲清楚各个模块之间的关系，再详细分述模块的实现细节。</p>\r\n<h3>原则八：P/PC平衡</h3>\r\n<p>&ldquo;P/PC平衡&rdquo;原则，即产出与产能平衡原则。</p>\r\n<p>从系统的角度看，每一个系统都是通过持续不断地叠加功能，来实现其产出，而系统的产能是通过系统架构的可扩展性、稳定性等一系列特征来表征。</p>\r\n<p>为了达到产出与产能的平衡，需要在不断支持业务需求的过程中，持续进行技术架构层面的优化。</p>\r\n<p>如果一味地做业务需求，经过一定的时间，系统会越来越慢，最终影响业务的稳定性；反之，一个没有任何业务产出的系统，最终会消失。</p>\r\n<p>在日常工作中，我们发现很多RD往往只重视产出。他们也在很努力地做项目，但是每个项目所使用的方法，还是沿用自己先前一贯的思路。最终，不仅项目做的一般，还会抱怨自己得不到任何成长。</p>\r\n<p>如果能在做项目的过程中，通过学习总结持续提升自己的技术能力和软素质，并将其应用于项目实施交付中，相信一定会取得双赢的结果。</p>\r\n<h3>原则九：善于提问</h3>\r\n<p>&ldquo;善于提问&rdquo;，首先要勤于提问。求知欲源于好奇心，是人的一种本能。在工作中药养成勤于提问的好习惯，不懂就要问，不要因为自己一时懒惰或者碍于面子，就放弃提问的机会。</p>\r\n<p>当遇到不同的观点时，也要礼貌地问出来。</p>\r\n<p>在设计评审、代码评审这类体现集体智慧的活动中，遇到有问题的地方一定要提出来。</p>\r\n<p>&ldquo;善于提问&rdquo;，还要懂得如何提问。为什么同样是参加设计评审，有的同学能提问出来很好的问题，而有的同学却提不出任何问题？除了知识储备、专业技能、经验等反面的差异外，还有一点很重要：这就是批判思维。</p>\r\n<p>批判思维主张通过批判思维达到理性思维，即对事物本质的认知和掌握。</p>\r\n<h3>原则十：空杯心态</h3>\r\n<p>&ldquo;满招损，谦受益&ldquo;</p>\r\n<p>自满的人，往往表现为工作中把别人的建议当成批评，不接受任何反对意见。学习上也缺乏求知的动力，总是拿自己的长处跟别人的短处做比较。</p>\r\n<p>保持&ldquo;空杯心态&rdquo;这一原则要求我们时刻进行自我监视与反省。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/23/9524956.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('24', '0', 'linux系统用户以及用户组管理', '', '', '', '<h3>认识/etc/passwd和/etc/shadow</h3>\r\n<p>　　这两个文件可以说是linux系统中最重要的文件之一。如果没有这两个文件或者这两个文件出问题，则你是无法正常登录linux系统的。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# cat /etc/passwd | head\r\nroot:x:0:0:root:/root:/bin/bash\r\nbin:x:1:1:bin:/bin:/sbin/nologin\r\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\r\nadm:x:3:4:adm:/var/adm:/sbin/nologin\r\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\nsync:x:5:0:sync:/sbin:/bin/sync\r\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\nhalt:x:7:0:halt:/sbin:/sbin/halt\r\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　/etc/passwd由&ldquo;：&rdquo;分割成7个字段，每个字段的具体含义是：</p>\r\n<p>　　1）用户名（如第一行中的root就是用户名），代表用户账号的字符串。用户名字符可以是大小写字母、数字、减号（不能出现在首位）、点以及下划线，其他字符不合法。虽然用户名中可以出现点，但不建议使用，尤其是首位为点时，另外减号也不建议使用，因为容易造成混淆。</p>\r\n<p>　　2）存放的就是该账号的口令，为什么是&lsquo;x&rsquo;呢？早期的linux系统口令确实是存放在这里，但基于安全因素，后来就将其存放到/etc/shadow中了，在这里只用一个&lsquo;x&rsquo;代替。</p>\r\n<p>　　3）这个数字代表户标识号，也叫做uid。系统识别用户身份就是通过这个数字来的，0就是root，也就是说你可以修改test用户的uid为0，那么系统会认为root和test为同一账户。</p>\r\n<p>　　4）表示组标识号，也叫做gid。这个字段对应着/etc/group中的一条记录，其实/etc/group和/etc/passwd基本上类似。</p>\r\n<p>　　5）注释说明，该字段没有实际意义，通常记录该用户的一些属性，例如姓名、电话、地址等等。不过，当你使用finger的功能时会显示这些信息的。</p>\r\n<p>　　6）用户的家目录，当用户登录时就处在这个目录下。root的家目录是/root，普通用户的家目录为/home/username，这个字段是可以自定义的，比如你建立一个普通用户test1，要想让test1的家目录在/data目录下，只要修改/etc/passwd文件中test1那行中的该字段为/data即可。</p>\r\n<p>　　7）shell，用户登录后要启动一个进程，用来将用户下达的指令给内核，这就是shell。linux的shell有很多种sh、csh、ksh、tcsh和bash等。查看/etc/passwd文件，该字段中除了/bin/bash外还有/sbin/nologin比较多，它表示不允许该账号登录。如果你想建立一个账号不让他登录，那么就可以把该字段该成/sbin/nologin，默认是/bin/bash。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# cat /etc/shadow\r\nroot:$6$YeN8c9qp$kF/ccExwxWD56sKqq0fDZDGO5D4.OLivV2v3L.2wvG8uDlb9sK2zQtw9gij37AOeAE/8gdAObi8sU0A7YE.tC0:17753:0:99999:7:::\r\nbin:*:17632:0:99999:7:::\r\ndaemon:*:17632:0:99999:7:::\r\nadm:*:17632:0:99999:7:::\r\nlp:*:17632:0:99999:7:::\r\nsync:*:17632:0:99999:7:::\r\nshutdown:*:17632:0:99999:7:::\r\nhalt:*:17632:0:99999:7:::\r\nmail:*:17632:0:99999:7:::\r\noperator:*:17632:0:99999:7:::\r\ngames:*:17632:0:99999:7:::\r\nftp:*:17632:0:99999:7:::\r\nnobody:*:17632:0:99999:7:::\r\nsystemd-network:!!:17743::::::\r\ndbus:!!:17743::::::\r\npolkitd:!!:17743::::::\r\nsshd:!!:17743::::::\r\npostfix:!!:17743::::::\r\nmysql:!!:17745:0:99999:7:::\r\nwww:!!:17746:0:99999:7:::\r\n</pre>\r\n</div>\r\n<p>　　再来看看/etc/shadow这个文件，和/etc/passwd类似，用&ldquo;：&rdquo;分割成9个字段。</p>\r\n<p>　　1）用户名，跟/etc/passwd对应</p>\r\n<p>　　2）用户密码，这个才是该账号的真正的密码，不过这个密码已经加密过了，但是有些黑客还是能够解密的。所以为了安全，这个文件属性设置为600，只允许root读写。</p>\r\n<p>　　3）上次更改面的日期，这个数字是这样计算得来的，距离1970年1月1日到上次更改密码的日期，例如上次更改密码的日期是2012年1月1日，则这个值就是365*（2012-1970）+1=15331。</p>\r\n<p>　　4）要过多少天才可以更改密码，默认是0，即不限制。</p>\r\n<p>　　5）密码多少天后到期。即在多少天内必须更改密码，例如这里设置成30，则30天内必须更改一次密码，否则将不能登录，默认是99999，可以理解为永远不需要改。</p>\r\n<p>　　6）密码到期前的警告期限，若这个值成7，则表示当7天后密码过期时，系统就发出警告告诉用户，提醒用户的密码将在7天后到期。</p>\r\n<p>　　7）账号失效期限。你可以这样理解，如果设置这个值为3，则表示：密码已经到期，然而用户并没有在到期前修改密码，那么再过3天，则这个账号就失效了，即锁定了。</p>\r\n<p>　　8）账号的生命周期。跟第三段一样，是按距离1970年1月1日多少天算的。它表示的含义是，账号在这个日期前可以使用，到期后账号作废。</p>\r\n<p>　　9）作为保留用的，没有什么意义。</p>\r\n<h3> 新增、删除用户和用户组</h3>\r\n<p>　　1、新增一个组 groupadd [-g GID] groupname</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# groupadd grptest1\r\n[root@localhost ~]# tail -n 5 /etc/group\r\npostfix:x:89:\r\nmysql:x:1000:\r\nwww:x:1001:\r\nzhouguowei:x:1002:\r\ngrptest1:x:1003:\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　不加-g则按照系统默认的gid创建组。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# groupadd -g 1004 grptest2\r\n[root@localhost ~]# tail -n 5 /etc/group\r\nmysql:x:1000:\r\nwww:x:1001:\r\nzhouguowei:x:1002:\r\ngrptest1:x:1003:\r\ngrptest2:x:1004:\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　-g选项可以自定义gid</p>\r\n<p>　　2、删除组 groupdel groupname</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# groupdel grptest1\r\n[root@localhost ~]# groupdel grptest2\r\n[root@localhost ~]# tail -n 5 /etc/group\r\npostdrop:x:90:\r\npostfix:x:89:\r\nmysql:x:1000:\r\nwww:x:1001:\r\nzhouguowei:x:1002:\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　3、增加用户 useradd [-u UID] [-g GID] [-d HOME] [-M] [-s]</p>\r\n<p>　　-u自定义UID</p>\r\n<p>　　-g使其属于已经存在的某个GID</p>\r\n<p>　　-d自定义用户的家目录</p>\r\n<p>　　-M不建立家目录</p>\r\n<p>　　-s自定义shell</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# useradd test10\r\n[root@localhost ~]# tail -n 5 /etc/passwd\r\npostfix:x:89:89::/var/spool/postfix:/sbin/nologin\r\nmysql:x:1000:1000::/home/mysql:/bin/bash\r\nwww:x:1001:1001::/home/www:/bin/bash\r\nzhouguowei:x:1002:1002::/home/zhouguowei:/bin/bash\r\ntest10:x:1003:1003::/home/test10:/bin/bash</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# useradd -u 1004 -g 1004 -M -s /sbin/nologin test11\r\n[root@localhost ~]# tail -n 5 /etc/passwd\r\nmysql:x:1000:1000::/home/mysql:/bin/bash\r\nwww:x:1001:1001::/home/www:/bin/bash\r\nzhouguowei:x:1002:1002::/home/zhouguowei:/bin/bash\r\ntest10:x:1003:1003::/home/test10:/bin/bash\r\ntest11:x:1004:1004::/home/test11:/sbin/nologin</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# cd /home\r\n[root@localhost home]# ls\r\nmysql  test10  www  zhouguowei\r\n[root@localhost home]# \r\n</pre>\r\n</div>\r\n<p>　　你会发现，创建test11时，加上了-M选项后，在/etc/passwd文件中test11那行的第六字段依然有/home/test11.可是ls查看该目录是，会提示该目录不存在。</p>\r\n<p>　　4、删除用户userdel [-r] username</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost home]# userdel test11\r\n[root@localhost home]# userdel -r test10\r\n[root@localhost home]# ls /home/test10\r\nls: cannot access /home/test10: No such file or directory\r\n[root@localhost home]# \r\n</pre>\r\n</div>\r\n<p>　　-r选项的作用是删除用户时，连同用户的加目录一起删除。</p>\r\n<h3> chfn更改用户finger</h3>\r\n<p>　　前面内容中提到了finger，即在/etc/passwd文件中的第5个字段中所显示的信息，那么如何去设定这个信息呢？</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost home]# chfn test\r\nChanging finger information for test.\r\nName []: test\r\nOffice []: test\'office\r\nOffice Phone []: 123456789\r\nHome Phone []: 123654789\r\n\r\nFinger information changed.\r\n[root@localhost home]# tail -n 5 /etc/passwd\r\npostfix:x:89:89::/var/spool/postfix:/sbin/nologin\r\nmysql:x:1000:1000::/home/mysql:/bin/bash\r\nwww:x:1001:1001::/home/www:/bin/bash\r\nzhouguowei:x:1002:1002::/home/zhouguowei:/bin/bash\r\ntest:x:1003:1003:test,test\'office,123456789,123654789:/home/test:/bin/bash\r\n[root@localhost home]# \r\n</pre>\r\n</div>\r\n<p>　　就是chfn这个命令。修改完后，就会在/etc/passwd文件中的那一行第5个字段中看到相关信息了，默认是空的。</p>\r\n<h3>创建、修改一个用户的密码 passwd [username]</h3>\r\n<p>　　等创建完账户后，默认是没有设置密码的，虽然没有密码，但该账户同样登录不了系统。只有设置好密码后方可登录系统。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost home]# passwd\r\nChanging password for user root.\r\nNew password: \r\nBAD PASSWORD: The password is shorter than 8 characters\r\nRetype new password: \r\npasswd: all authentication tokens updated successfully.</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost home]# passwd test\r\nChanging password for user test.\r\nNew password: \r\nBAD PASSWORD: The password is shorter than 8 characters\r\nRetype new password: \r\npasswd: all authentication tokens updated successfully.\r\n[root@localhost home]# \r\n</pre>\r\n</div>\r\n<p>　　passwd后面不跟用户名则是更改当前用户的密码，当前用户为root，所以此时修改的是root的密码，后面跟test，则修改的是test的密码。</p>\r\n<h3>用户身份切换</h3>\r\n<p>　　在linux系统中，有时候普通用户有些事情是不能做的，除非是root用户才能做到。这是就需要切换到root身份来做事了。</p>\r\n<p>　　用test账号登录linux系统，然后使用su -就可以切换成root身份，前提是知道root的密码。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">Last login: Wed Sep  5 22:22:05 2018\r\n[test@localhost ~]$ su -\r\nPassword: \r\nLast login: Wed Sep  5 22:23:20 CST 2018 on pts/0\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　你可以使用echo $LOGNAME来查看当前登录的用户名</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# echo $LOGNAME\r\nroot\r\n[root@localhost ~]# su - test\r\nLast login: Wed Sep  5 22:24:37 CST 2018 from 10.0.30.1 on pts/0\r\n[test@localhost ~]$ echo $LOGNAME\r\ntest\r\n[test@localhost ~]$ \r\n</pre>\r\n</div>\r\n<p>　　su的语法为：su [-] username</p>\r\n<p>　　后面可以跟&ldquo;-&rdquo;也可以不跟，普通用户su不加username时就是切换到root用户，当前root用户同样可以su到普通用户。</p>\r\n<p>　　加&ldquo;-&rdquo;后会连同用户的环境变量一起切换过来。su test后虽然切换到了test用户，但是当前目录还是切换前的/root目录，然后当用su - test时切换用户后则到了test的家目录/home/test。当用root切换普通用户时，是不需要输入密码的。这也体现了root用户至高无上的权利。</p>\r\n<p>　　用su是可以切换用户身份，如果每个普通用户都能切换到root身份，如果某个用户不小心泄露了root的密码，那岂不是系统非常的不安全？没有错，为了改进这个问题，产生了sudo这个命令。使用sudo执行一个root才能执行的命令是可以办到的，但是需要输入密码，这个密码并不是root的密码而是用户自己的密码，默认只有root用户能使用sudo命令，普通用户想要使用sudo，则需要root预先设定的，即，使用visudo命令去相关的配置文件/etc/sudoers，如果没有visudo这个命令，请先会用yum install -y sudo安装。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">root    ALL=(ALL)       ALL\r\ntest    ALL=(ALL)       ALL\r\n</pre>\r\n</div>\r\n<p>　　默认root能够sudo是因为这个文件中有一行&ldquo;root ALL=(ALL) ALL&rdquo;，在该行下面加入&ldquo;test ALL=(ALL) ALL&rdquo;，就可以让test用户拥有sudo的权利。如果没增加一个用户就设置一行，这样太麻烦了，所以你可以这样设置。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">## Allows people in group wheel to run all commands\r\n%wheel  ALL=(ALL)       ALL\r\n</pre>\r\n</div>\r\n<p>　　把这一行前面的&ldquo;#&rdquo;去掉，这一行生效。它的意思是，wheel这个组下面的所有用户拥有了sudo的权限。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# su test\r\n[test@localhost root]$ touch 1.txt\r\ntouch: cannot touch 鈥.txt鈥 Permission denied\r\n[test@localhost root]$ sudo touch 1.txt\r\n\r\nWe trust you have received the usual lecture from the local System\r\nAdministrator. It usually boils down to these three things:\r\n\r\n    #1) Respect the privacy of others.\r\n    #2) Think before you type.\r\n    #3) With great power comes great responsibility.\r\n\r\n[sudo] password for test: \r\n[test@localhost root]$ ls -l 1.txt\r\nls: cannot access 1.txt: Permission denied\r\n[test@localhost root]$ sudo ls -l 1.txt\r\n-rw-r--r--. 1 root root 0 Sep  5 22:51 1.txt\r\n[test@localhost root]$ \r\n</pre>\r\n</div>\r\n<p>　　</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/22/9517813.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('25', '0', 'SHELL脚本之正则表达式', '', '', '', '<p>　　这部分内容可以说是学习shell脚本之前必学的内容。如果你这部分内容学的越好，那么你的shell脚本编写能力就会越强。所以不要嫌弃这部分内容啰嗦，也不要怕麻烦，要用心学习。一定要多加练习，练习多了就能熟练掌握了。</p>\r\n<p>　　在计算机科学中，正则表达式是这样解释的：它是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。在很多文本编辑器或者其他工具里，正则表达式通常被用来检索或者替换那些符合模式的文本内容。</p>\r\n<p>　　其实正则表达式，只是一种思想，一种表示方法。只要我们使用的工具支持表示这种思想那么这个工具就可以处理正则表达式的字符串。常用的工具有grep、sed和awk等。</p>\r\n<h3>grep/egrep</h3>\r\n<p>　　语法：grep [-cinvABC] \'word\' filename</p>\r\n<p>　　-c：打印符合要求的行数；</p>\r\n<p>　　-i：忽略大小写；</p>\r\n<p>　　-n：在输出符合要求的行的同时连行号一起输出；</p>\r\n<p>　　-v：打印不符合要求的行；</p>\r\n<p>　　-A：后跟一个数字（有无空格都可以），例如-A2则表示打印符合要求的行以及下面的两行；</p>\r\n<p>　　-B：后跟一个数字，例如-B2则表示打印符合要求的行以及上面的两行；</p>\r\n<p>　　-C：后跟一个数字，例如-C2则表示打印符合要求的行以及上下各两行；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost test]# grep -A2 halt /etc/passwd\r\nhalt:x:7:0:halt:/sbin:/sbin/halt\r\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\n[root@localhost test]# grep -B2 halt /etc/passwd\r\nsync:x:5:0:sync:/sbin:/bin/sync\r\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\nhalt:x:7:0:halt:/sbin:/sbin/halt\r\n[root@localhost test]# grep -C2 halt /etc/passwd\r\nsync:x:5:0:sync:/sbin:/bin/sync\r\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\nhalt:x:7:0:halt:/sbin:/sbin/halt\r\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\n[root@localhost test]#\r\n</pre>\r\n</div>\r\n<p>　　1、过滤出带有某个关键词的行，并输出行号</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost test]# grep -n \'root\' /etc/passwd\r\n1:root:x:0:0:root:/root:/bin/bash\r\n10:operator:x:11:0:operator:/root:/sbin/nologin\r\n[root@localhost test]# \r\n</pre>\r\n</div>\r\n<p>　　2、过滤不带某个关键词的行，并输出行号</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost test]# grep -vn \'user_\' /etc/passwd\r\n1:root:x:0:0:root:/root:/bin/bash\r\n2:bin:x:1:1:bin:/bin:/sbin/nologin\r\n3:daemon:x:2:2:daemon:/sbin:/sbin/nologin\r\n4:adm:x:3:4:adm:/var/adm:/sbin/nologin\r\n5:lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\n6:sync:x:5:0:sync:/sbin:/bin/sync\r\n7:shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\n8:halt:x:7:0:halt:/sbin:/sbin/halt\r\n9:mail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\n10:operator:x:11:0:operator:/root:/sbin/nologin\r\n11:games:x:12:100:games:/usr/games:/sbin/nologin\r\n12:ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin\r\n13:nobody:x:99:99:Nobody:/:/sbin/nologin\r\n14:systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin\r\n15:dbus:x:81:81:System message bus:/:/sbin/nologin\r\n16:polkitd:x:999:998:User for polkitd:/:/sbin/nologin\r\n17:sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin\r\n18:postfix:x:89:89::/var/spool/postfix:/sbin/nologin\r\n19:mysql:x:1000:1000::/home/mysql:/bin/bash\r\n20:www:x:1001:1001::/home/www:/bin/bash\r\n21:zhouguowei:x:1002:1002::/home/zhouguowei:/bin/bash\r\n22:test:x:1003:1003:test,test\'office,123456789,123654789:/home/test:/bin/bash\r\n</pre>\r\n</div>\r\n<p>　　3、过滤出所有包含数字的行</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# echo aaaaaaaaaaaaaaaa > test.txt\r\n[root@localhost ~]# echo 1212222aaaaaaaaaaaa >> test.txt\r\n[root@localhost ~]# echo 2334242423423472934792 >> test.txt\r\n[root@localhost ~]# echo bbbbbbbbbbbbnbbb >> test.txt\r\n[root@localhost ~]# echo 43345345fdfgdfgdfg >> test.txt\r\n[root@localhost ~]# cat test.txt \r\naaaaaaaaaaaaaaaa\r\n1212222aaaaaaaaaaaa\r\n2334242423423472934792\r\nbbbbbbbbbbbbnbbb\r\n43345345fdfgdfgdfg\r\n[root@localhost ~]# grep [0-9] test.txt \r\n1212222aaaaaaaaaaaa\r\n2334242423423472934792\r\n43345345fdfgdfgdfg\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　这里提到了&ldquo;[]&rdquo;的应用，如果是数字的话就用[0-9]这样的形式，当然有时候也可以用这样的形式[15]即只包含1或者5，注意，它不会认为是15。如果要过滤出数字以及大小写字母则要这样[0-9a-zA-Z]。另外[]还有一种形式，就是[^字符]表示除[]内的字符之外的字符。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# grep \'[^r]oo\' /etc/passwd\r\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\npostfix:x:89:89::/var/spool/postfix:/sbin/nologin\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　这就表示筛选包含oo字符串，但是不包含r的字符。</p>\r\n<p>　　4、过滤出文档中以某个字符开头或者某个字符结尾的行</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# grep \'^r\' /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\n[root@localhost ~]# grep \'n$\' /etc/passwd\r\nbin:x:1:1:bin:/bin:/sbin/nologin\r\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\r\nadm:x:3:4:adm:/var/adm:/sbin/nologin\r\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\ngames:x:12:100:games:/usr/games:/sbin/nologin\r\nftp:x:14:50:FTP User:/var/ftp:/sbin/nologin\r\nnobody:x:99:99:Nobody:/:/sbin/nologin\r\nsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologin\r\ndbus:x:81:81:System message bus:/:/sbin/nologin\r\npolkitd:x:999:998:User for polkitd:/:/sbin/nologin\r\nsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin\r\npostfix:x:89:89::/var/spool/postfix:/sbin/nologin\r\n</pre>\r\n</div>\r\n<p>　　在正则表达式中，&ldquo;^&rdquo;表示行的开始，&ldquo;$&rdquo;表示行的结尾，那么空行则表示&ldquo;^$&rdquo;，如果你只想筛选出非空行，则可以使用&ldquo;grep -v \'^$\' filename&rdquo;得到你想要的结果。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# echo 12344 > test.txt \r\n[root@localhost ~]# echo sdfsadffa >> test.txt \r\n[root@localhost ~]# echo \'\' >> test.txt \r\n[root@localhost ~]# echo \'ssss32323\' >> test.txt \r\n[root@localhost ~]# cat test.txt \r\n12344\r\nsdfsadffa\r\n\r\nssss32323\r\n[root@localhost ~]# grep \'^$\' test.txt \r\n\r\n[root@localhost ~]# grep -C2 \'^$\' test.txt \r\n12344\r\nsdfsadffa\r\n\r\nssss32323\r\n[root@localhost ~]# grep \'^[a-zA-Z]\' test.txt \r\nsdfsadffa\r\nssss32323\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　5、过滤任意一个字符与重复字符</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# grep \'r..t\' /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\nftp:x:14:50:FTP User:/var/ftp:/sbin/nologin\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　&ldquo;.&rdquo;表示任意一个字符，上例中，就是把符合r与o之间有两个任意字符的行过滤出来。</p>\r\n<p>　　&ldquo;*&rdquo;表示零个或多个前面的字符。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# grep \'ooo*\' /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\npostfix:x:89:89::/var/spool/postfix:/sbin/nologin\r\n[root@localhost ~]# </pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# grep \'.*\' /etc/passwd | wc -l\r\n123\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　&ldquo;.*&rdquo;表示另个或者或者多个任意字符，空行也包含在内。</p>\r\n<p>　　6、指定要过滤字符出现的次数</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# grep \'o\\{2\\}\' /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\npostfix:x:89:89::/var/spool/postfix:/sbin/nologin\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　这里用到了&ldquo;{}&rdquo;，其内部为数字，表示前面的数字要重复的次数。上例中表示包含有两个o即&lsquo;oo&rsquo;的行。注意，&ldquo;{}&rdquo;左右都要加上转义字符&ldquo;\\&rdquo;。另外，使用&ldquo;{}&rdquo;我们还可以表示一个范围的，具体格式是&ldquo;\\{n1,n2\\}&rdquo;，其中n1<n2，表示重复n1到n2次数前面的字符，n2还可以为空，则表示大于等于n1次。</p>\r\n<p>　　上面部分讲的grep，另外笔者常常用到egrep这个工具，简单点讲，后者是前者的扩展版本，我们可以用egrep完成grep不能完成的工作，当然了grep能完成的egrep完全可以完成。如果你嫌麻烦，egrep了解一下即可。因为grep的功能已经足够可以胜任你的日常工作了。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# cat test.txt \r\nrot:x:0:0:/rot:/bin/bash\r\n\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\n\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\n\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n\r\n1111111111111111111111111111111\r\n\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　1、筛选一个或一个以上前面的字符</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# egrep \'o+\' test.txt \r\nrot:x:0:0:/rot:/bin/bash\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n[root@localhost ~]# egrep \'o+\' test.txt \r\nrot:x:0:0:/rot:/bin/bash\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n[root@localhost ~]# egrep \'oo+\' test.txt \r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n[root@localhost ~]# egrep \'ooo+\' test.txt \r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n[root@localhost ~]#</pre>\r\n</div>\r\n<p>　　2、筛选零个或者一个前面的字符</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# egrep \'o?\' test.txt \r\nrot:x:0:0:/rot:/bin/bash\r\n\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\n\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\n\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n\r\n1111111111111111111111111111111\r\n\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# egrep \'oo?\' test.txt \r\nrot:x:0:0:/rot:/bin/bash\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n[root@localhost ~]# egrep \'ooo?\' test.txt \r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　3、筛选字符串1或者字符串2</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# egrep \'111|aaa\' test.txt \r\n1111111111111111111111111111111\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　4、egrep中的&ldquo;()&rdquo;的应用</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# egrep \'r(oo)|(at)o\' test.txt \r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　用&ldquo;()&rdquo;表示一个整体，例如(oo)+就表示1个oo或者多个oo。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# egrep \'(oo)+\' test.txt \r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<h3>sed工具的使用</h3>\r\n<p> 　　grep工具的功能其实还不够强大，其实说白看，grep实现的只是查找功能，而他却不能实现把查找的内容替换掉。sed工具以及下面要讲的awk工具就能实现把替换的文本输出到屏幕上的功能了，而且还有其他更丰富的功能。sed和awk都是流式编辑器，是针对文档的行来操作的。</p>\r\n<p>　　1、打印某行sed -n \'n\'p filename单引号内的n是一个数字，表示第几行</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# cat test.txt \r\nrot:x:0:0:/rot:/bin/bash\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n1111111111111111111111111111111\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# sed -n \'2\'p test.txt \r\noperator:x:11:0:operator:/root:/sbin/nologin\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　2、打印多行，打印整个文档用 -n \'1,$\'p</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed -n \'2,4\'p test.txt \r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n[root@localhost ~]# sed -n \'1,$\'p test.txt \r\nrot:x:0:0:/rot:/bin/bash\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n1111111111111111111111111111111\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　3、打印包含某个字符的行</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed -n \'/root/\'p test.txt \r\noperator:x:11:0:operator:/root:/sbin/nologin\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　上面grep中使用的特殊字符，如&ldquo;^&rdquo;、&ldquo;$&rdquo;，&ldquo;.&rdquo;、&ldquo;*&rdquo;等，同样也能在sed中使用。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed -n \'/^1/\'p test.txt \r\n1111111111111111111111111111111\r\n[root@localhost ~]# sed -n \'/in$/\'p test.txt \r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\n[root@localhost ~]# sed -n \'/r..t/\'p test.txt \r\noperator:x:11:0:operator:/root:/sbin/nologin\r\n[root@localhost ~]# sed -n \'/ooo*/\'p test.txt \r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　4、-e可以实现多个行为</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed -e \'1\'p  -e \'/111/\'p -n test.txt \r\nrot:x:0:0:/rot:/bin/bash\r\n1111111111111111111111111111111\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　5、删除某行或者多行</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'1\'d test.txt \r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n1111111111111111111111111111111\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# sed \'1,3\'d test.txt \r\nroooot:x:0:0:/rooooot:/bin/bash\r\n1111111111111111111111111111111\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# sed \'/oot/\'d test.txt \r\nrot:x:0:0:/rot:/bin/bash\r\n1111111111111111111111111111111\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　&ldquo;d&rdquo;这个字符就是删除的动作了，不仅可以删除指定的单行以及多行，而且还可以删除匹配某个字符的行，另外还可以删除从某一行到文档末尾。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'2,$\'d test.txt \r\nrot:x:0:0:/rot:/bin/bash\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　6、替换字符或字符串</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'1,2s/ot/to/g\' test.txt \r\nrto:x:0:0:/rto:/bin/bash\r\noperator:x:11:0:operator:/roto:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n1111111111111111111111111111111\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　上例中的&ldquo;s&rdquo;就是替换的命令，&ldquo;g&rdquo;为本行中全局替换，如果不加&ldquo;g&rdquo;，只换该行中出现的第一次。</p>\r\n<p>　　除了可以使用&ldquo;/&rdquo;外，还可以使用其他特殊字符，例如&ldquo;#&rdquo;或者&ldquo;@&rdquo;都没有问题。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'1,2s#ot#to#g\' test.txt \r\nrto:x:0:0:/rto:/bin/bash\r\noperator:x:11:0:operator:/roto:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n1111111111111111111111111111111\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# sed \'1,2s@ot@to@g\' test.txt \r\nrto:x:0:0:/rto:/bin/bash\r\noperator:x:11:0:operator:/roto:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n1111111111111111111111111111111\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　现在思考一下，如何删除文档中的所有数字或者字母？</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'1,$s/[0-9]//g\' test.txt \r\nrot:x:::/rot:/bin/bash\r\noperator:x:::operator:/root:/sbin/nologin\r\noperator:x:::operator:/rooot:/sbin/nologin\r\nroooot:x:::/rooooot:/bin/bash\r\n\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# sed \'s/[0-9]//g\' test.txt \r\nrot:x:::/rot:/bin/bash\r\noperator:x:::operator:/root:/sbin/nologin\r\noperator:x:::operator:/rooot:/sbin/nologin\r\nroooot:x:::/rooooot:/bin/bash\r\n\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# </pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'s/[a-zA-Z]//g\' test.txt \r\n::0:0:/://\r\n::11:0::/://\r\n::11:0::/://\r\n::0:0:/://\r\n1111111111111111111111111111111\r\n\r\n[root@localhost ~]# sed \'s/[0-9a-zA-Z]//g\' test.txt \r\n::::/://\r\n:::::/://\r\n:::::/://\r\n::::/://\r\n\r\n\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　7、调换两个字符串的位置</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'s/\\(rot\\)\\(.*\\)\\(bash\\)/\\3\\2\\1/\' test.txt\r\nbash:x:0:0:/rot:/bin/rot\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\noperator:x:11:0:operator:/rooot:/sbin/nologin\r\nroooot:x:0:0:/rooooot:/bin/bash\r\n1111111111111111111111111111111\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　这就需要解释一下了，上例中用&ldquo;()&rdquo;把所想要替换的字符括起来成为一个整体，因为括号在sed中属于特殊字符，所以需要在前面加上转义字符&ldquo;\\&rdquo;，替换时则写成&ldquo;\\1&rdquo;，&ldquo;\\2&rdquo;，&ldquo;\\3&rdquo;的形式。</p>\r\n<p> 　　在某一行前或者后增加指定内容。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'s/^.*$/123&/\' test.txt \r\n123rot:x:0:0:/rot:/bin/bash\r\n123operator:x:11:0:operator:/root:/sbin/nologin\r\n123operator:x:11:0:operator:/rooot:/sbin/nologin\r\n123roooot:x:0:0:/rooooot:/bin/bash\r\n1231111111111111111111111111111111\r\n123aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[root@localhost ~]# </pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'s/^.*/&123/\' test.txt \r\nrot:x:0:0:/rot:/bin/bash123\r\noperator:x:11:0:operator:/root:/sbin/nologin123\r\noperator:x:11:0:operator:/rooot:/sbin/nologin123\r\nroooot:x:0:0:/rooooot:/bin/bash123\r\n1111111111111111111111111111111123\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa123\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　8、直接修改文件内容</p>\r\n<p>　　sed -i \'s/:/#/g\' test.txt，这样就可以直接更改test.txt文件的内容了。由于这个命令可以直接把文件修改，所以在修改前最好先复制一下文件以免改错。</p>\r\n<h3>sed练习</h3>\r\n<p>　　1、把/etc/passwd复制到/root/test.txt，用sed打印所有行；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# cp /etc/passwd /root/test.txt;sed -n \'1,$\'p test.txt</pre>\r\n</div>\r\n<p>　　2、打印test.txt的3到10行；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed -n \'3,10\'p test.txt</pre>\r\n</div>\r\n<p>　　3、打印test.txt中包含&lsquo;root&rsquo;的行；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed -n \'/root/\'p test.txt</pre>\r\n</div>\r\n<p>　　4、删除test.txt的15行以及后边所有行；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'15,$\'d test.txt</pre>\r\n</div>\r\n<p>　　5、删除test.txt中包含&lsquo;bash&rsquo;的行；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'/bash/\'d test.txt</pre>\r\n</div>\r\n<p>　　6、替换test.txt中的&lsquo;root&rsquo;为&lsquo;toor&rsquo;；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'s/root/toor/g\' test.txt</pre>\r\n</div>\r\n<p>　　7、替换test.txt中的&lsquo;/sbin/nologin&rsquo;为&lsquo;/bin/login&rsquo;；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'s/\\/sbin\\/nologin/\\/bin\\/login/g\' test.txt </pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'s#/sbin/nologin#/bin/login#g\' test.txt</pre>\r\n</div>\r\n<p>　　8、删除test.txt中5到10行中的所有数字；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'5,10s/[0-9]//g\' test.txt</pre>\r\n</div>\r\n<p>　　9、删除test.txt中所有特殊字符（除了数字以及大小写字母）；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'s/[^0-9a-zA-Z]//g\' test.txt </pre>\r\n</div>\r\n<p>　　10、把test.txt中第一个单词和最后一个单词调换位置；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'s/\\(^[a-zA-Z][a-zA-Z]*\\)\\([^a-zA-Z].*\\)\\([^a-zA-Z]\\)\\([a-zA-Z][a-zA-Z]*$\\)/\\4\\2\\3\\1/\' test.txt</pre>\r\n</div>\r\n<p>　　11、把test.txt中出现的第一个数字和最后一个单词替换位置；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'s#\\([^0-9][^0-9]*\\)\\([0-9][0-9]*\\)\\([^0-9].*\\)\\([^a-zA-Z]\\)\\([a-zA-Z][a-zA-Z]*$\\)#\\1\\5\\3\\4\\2#\' test.txt</pre>\r\n</div>\r\n<p>　　12、把test.txt中第一个数字移动到行的末尾；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'s#\\([^0-9][^0-9]*\\)\\([0-9][0-9]*\\)\\([^0-9].*$\\)#\\1\\3\\2#\' test.txt</pre>\r\n</div>\r\n<p>　　13、在test.txt20行到末尾行最前面加&lsquo;aaa&rsquo;；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# sed \'20,$s/^.*$/aaa:&/\' test.txt\r\n</pre>\r\n</div>\r\n<h3>awk工具使用</h3>\r\n<p>　　上面也提到了awk和sed一样是流式编辑器，也是针对文档中的行来操作的，一行一行的去指向。awk比sed更加强大，他能做到sed能做到的，同样也能做到sed不能做到的。awk工具其实是很复杂的，有专门的书籍来介绍它的应用。</p>\r\n<p>　　1、截取文档中的某个段　</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# head -n2 test.txt | awk -F \':\' \'{print $1}\'\r\nroot\r\nbin\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　解释一下，-F选项的作用是指定分隔符，如果不加-F指定，则以空格或者tab为分隔符。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# head -n2 /etc/inittab \r\n# inittab is no longer used when using systemd.\r\n#\r\n[root@localhost ~]# head -n2 /etc/inittab | awk \'{print $2,$3}\'\r\ninittab is\r\n \r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　print为打印动作，用来打印某个字段。$1为第一个字段，$2为第二个字段，以此类推，有一个特殊的那就是$0，它代表整行。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# head -n2 test.txt | awk -F \':\' \'{print $0}\'\r\nroot:x:0:0:root:/root:/bin/bash\r\nbin:x:1:1:bin:/bin:/sbin/nologin\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　注意awk的格式，-F后紧跟单引号，然后里面为分隔符，print的动作要用&lsquo;{}&rsquo;括起来，否则会报错。print还可以打印自定义的内容，但是自定义的内容要用双括号括起来。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# head -n2 test.txt | awk -F \':\' \'{print $1\"@\"$2\"@\"$3}\'\r\nroot@x@0\r\nbin@x@1\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　2、匹配字符或字符串</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk \'/root/\' test.txt \r\nroot:x:0:0:root:/root:/bin/bash\r\noperator:x:11:0:operator:/root:/sbin/nologin\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　跟sed很类似吧，不过还有比sed更强大的匹配</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'$1~/root/\' test.txt \r\nroot:x:0:0:root:/root:/bin/bash\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　可以让某个段去匹配，这里的&lsquo;~&rsquo;就是匹配的意思。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'/root/ {print $3} /test/ {print $3}\' test.txt \r\n0\r\n11\r\n1003\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　awk还可以多次匹配，如上例中匹配完root，再匹配test，还可以只打印所匹配的字段。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'$1~/root/ {print $1}\' test.txt \r\nroot\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　3、条件操作符</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'$3==\"0\"\' test.txt \r\nroot:x:0:0:root:/root:/bin/bash\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　awk中是可以逻辑符号判断的，比如&lsquo;==&rsquo;就是等于，也可以理解为&ldquo;精确匹配&rdquo;。另外也有&ldquo;>&rdquo;、&ldquo;>=&rdquo;、&ldquo;<&rdquo;、&ldquo;<=&rdquo;、&ldquo;!=&rdquo;等等，值得注意的是，即使$3为数字，awk也不会把它当做是一个数字。所以不要妄图拿$3当做数字和数字做比较。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# cat test.txt | awk -F \':\' \'$3>=\"500\"\'\r\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\nhalt:x:7:0:halt:/sbin:/sbin/halt\r\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\nnobody:x:99:99:Nobody:/:/sbin/nologin\r\ndbus:x:81:81:System message bus:/:/sbin/nologin\r\npolkitd:x:999:998:User for polkitd:/:/sbin/nologin\r\nsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin\r\npostfix:x:89:89::/var/spool/postfix:/sbin/nologin\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　这样是得不到我们想要对的效果的。这里只是字符与字符之间的比较，&lsquo;6&rsquo;是&gt;&lsquo;500&rsquo;的。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# cat test.txt | awk -F \':\' \'$7!=\"/sbin/nologin\"\'\r\nroot:x:0:0:root:/root:/bin/bash\r\nsync:x:5:0:sync:/sbin:/bin/sync\r\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\nhalt:x:7:0:halt:/sbin:/sbin/halt\r\nmysql:x:1000:1000::/home/mysql:/bin/bash\r\nwww:x:1001:1001::/home/www:/bin/bash\r\nzhouguowei:x:1002:1002::/home/zhouguowei:/bin/bash\r\ntest:x:1003:1003:test,test\'office,123456789,123654789:/home/test:/bin/bash\r\n</pre>\r\n</div>\r\n<p>　　上例中用的是&lsquo;!=&rsquo;即不匹配。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'$3<$4\' test.txt \r\nadm:x:3:4:adm:/var/adm:/sbin/nologin\r\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\r\ngames:x:12:100:games:/usr/games:/sbin/nologin\r\nftp:x:14:50:FTP User:/var/ftp:/sbin/nologin\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　另外还可以使用&lsquo;&&&rsquo;和&lsquo;||&rsquo;表示&ldquo;并且&rdquo;和&ldquo;或者&rdquo;的意思。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'$3>\"5\" && $3<\"7\"\' test.txt \r\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\n[root@localhost ~]#</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'$3<\"1\" || $3 >\"8\"\' test.txt \r\nroot:x:0:0:root:/root:/bin/bash\r\nnobody:x:99:99:Nobody:/:/sbin/nologin\r\ndbus:x:81:81:System message bus:/:/sbin/nologin\r\npolkitd:x:999:998:User for polkitd:/:/sbin/nologin\r\npostfix:x:89:89::/var/spool/postfix:/sbin/nologin\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　4、awk的内置变量</p>\r\n<p>　　NF：用分隔符分割后一共多少段；</p>\r\n<p>　　NR：行数</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# head -n5 test.txt | awk -F \':\' \'{print NF}\'\r\n7\r\n7\r\n7\r\n7\r\n7\r\n[root@localhost ~]# head -n5 test.txt | awk -F \':\' \'{print $NF}\'\r\n/bin/bash\r\n/sbin/nologin\r\n/sbin/nologin\r\n/sbin/nologin\r\n/sbin/nologin\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　上例中，打印总共的段数以及最后一段的值。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk \'NR>=20\' test.txt \r\nwww:x:1001:1001::/home/www:/bin/bash\r\nzhouguowei:x:1002:1002::/home/zhouguowei:/bin/bash\r\ntest:x:1003:1003:test,test\'office,123456789,123654789:/home/test:/bin/bash\r\nuser_00:x:1004:100::/home/user_00:/bin/bash\r\nuser_01:x:1005:100::/home/user_01:/bin/bash\r\nuser_02:x:1006:100::/home/user_02:/bin/bash\r\nuser_03:x:1007:100::/home/user_03:/bin/bash\r\nuser_04:x:1008:100::/home/user_04:/bin/bash\r\nuser_05:x:1009:100::/home/user_05:/bin/bash\r\nuser_06:x:1010:100::/home/user_06:/bin/bash\r\nuser_07:x:1011:100::/home/user_07:/bin/bash\r\nuser_08:x:1012:100::/home/user_08:/bin/bash\r\nuser_09:x:1013:100::/home/user_09:/bin/bash\r\nuser_10:x:1014:100::/home/user_10:/bin/bash\r\nuser_11:x:1015:100::/home/user_11:/bin/bash\r\n</pre>\r\n</div>\r\n<p>　　可以使用NR作为条件，来打印指定的行。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'NR>=20 && $1~/test/\' test.txt \r\ntest:x:1003:1003:test,test\'office,123456789,123654789:/home/test:/bin/bash\r\n[root@localhost ~]#\r\n</pre>\r\n</div>\r\n<p>　　5、awk中的数学运算</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# head -n5 test.txt | awk -F \':\' \'$1=\"root\"\'\r\nroot x 0 0 root /root /bin/bash\r\nroot x 1 1 bin /bin /sbin/nologin\r\nroot x 2 2 daemon /sbin /sbin/nologin\r\nroot x 3 4 adm /var/adm /sbin/nologin\r\nroot x 4 7 lp /var/spool/lpd /sbin/nologin\r\n[root@localhost ~]#</pre>\r\n</div>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# head -n2 test.txt | awk -F \':\' \'{$7=$3+$4;print $3,$4,$7}\'\r\n0 0 0\r\n1 1 2\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　当然还可以计算某个段的总和。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# cat test.txt | awk -F \':\' \'{(tot+=$3)};END {print tot}\'\r\n112067\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<p>　　这里的END做注意一下，表示所有的行都已经执行，这是awk特有的语法，其实awk连同sed都可以写成一个脚本文件，而且有它们特有的语法，在awk中使用if判断、for循环都是可以的。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'{if ($1==\"root\") print $0}\' test.txt \r\nroot:x:0:0:root:/root:/bin/bash\r\n[root@localhost ~]# \r\n</pre>\r\n</div>\r\n<h3>awk练习</h3>\r\n<p>　　1、用awk打印整个test.txt；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk \'{print $0}\' test.txt</pre>\r\n</div>\r\n<p>　　2、查找所有包含&lsquo;bash&rsquo;的行；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk \'/bash/\' test.txt</pre>\r\n</div>\r\n<p>　　3、用&lsquo;:&rsquo;作为分隔符，查找第三段等于0的行；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'$3==0\' test.txt</pre>\r\n</div>\r\n<p>　　4、用&lsquo;:&rsquo;作为分隔符，查找第一段为root的行，并把该段的root换成toor；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F\':\' \'$1==\"root\"\' test.txt |sed \'s/root/toor/\'</pre>\r\n</div>\r\n<p>　　5、用&lsquo;:&rsquo;作为分隔符，打印最后一段；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'{print $NF}\' test.txt </pre>\r\n</div>\r\n<p>　　6、打印行数大于20的所有行；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk \'NR>20\' test.txt</pre>\r\n</div>\r\n<p>　　7、用&lsquo;:&rsquo;作为分隔符，打印所有第三段小于第四段的行；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'$3<$4\' test.txt</pre>\r\n</div>\r\n<p>　　8、用&lsquo;:&rsquo;作为分隔符，打印第一段以及最后一段，并且中间中&lsquo;@&rsquo;连接；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'{print $1\"@\"$NF}\' test.txt </pre>\r\n</div>\r\n<p>　　9、用&lsquo;:&rsquo;作为分隔符，把整个文档的第四段相加，求和；</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">[root@localhost ~]# awk -F \':\' \'{(tot+=$4)};END {print tot}\' test.txt\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n<p>　　</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/22/9516043.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('26', '0', '会话控制Session的应用', '', '', '', '<p>　　Session技术与Cookie相似，都是用来存储使用者的相关资料。但是最大不同之处在于Cookie是将数据存放于客户端计算机中，而Session则是将数据存放于服务器系统下。</p>\r\n<p>　　在Web技术发展史上，虽然Cookie技术的出现是一个重大的变革，但Cookie是在客户端计算机中保存资料，所以引起了一个争议。用户有权阻止Cookie的使用，使Web服务器无法通过Cookie来跟踪用户信息。而Session技术是将使用者相关的资料存放在服务器的系统之下，所以使用者无法停止Session的使用。</p>\r\n<p>　　可以把Cookie比喻成第一次去商场时为你提供的会员卡，并有用户自己保存。如果用户下次再去商场购物时忘记带卡了，或者是把卡弄丢了，这样用户就不能再以会员的身份购物了。但是如果商场在为用户办理会员卡以后，再由商场保存这张卡，用户就不用每天都把卡放在身上了。但是商场的会员特别多，你每次来时，商场怎么知道你是这里的会员呢？所以在用户办理会员卡时，商场会要求用户保存会员卡的卡号。下次这个用户再来购物时，商场就可以通过用户提供的卡号查询到会员的登记信息。</p>\r\n<p>　　Session就是这样，在客户端仅需要保存由服务器为用户创建的一个Session标识符（相当于会员卡卡号），称为Session ID，而在服务器端（文件/数据库/Memcache中）保存Session变量的值。Session ID是一个既不会重复，又不容易找到规律的，由32位十六进制数组成的字符串。Session ID会被保存在客户端的Cookie里，如果用户阻止Cookie的使用，则可以将Session ID保存在用户浏览器地址栏的URL中。当用户请求Web服务器时，就会把Session ID发送给服务器，再通过Session ID提取保存在服务器中的Session变量。可以把Session中保存的变量，当做是这个用户的全局变量，同一个用户对每个脚本的访问都共享这些变量。</p>\r\n<p>　　当某个用户想Web服务器发送请求时，服务器首先检查这个客户端的请求是否已经包含了一个Session ID。如果包含，说明之前已经为此用户创建国Session ID，服务器则按该Session ID把Session检索出来使用。如果客户端请求不包含Session ID，则为该用户创建一个Session，并且生成一个与此Session关联的Session ID，在本次相应中被传送给客户端保存。</p>\r\n<h3>配置SESSION</h3>\r\n<p>　　在PHP配置文件中，有一组和Session相关的配置选项。通过对一些选项重新设置新值，就可以对Session进行配置，否则使用默认的Session配置。在php.ini文件中和Session有关的，一些有意义选项及其描述如下表所示。</p>\r\n<table style=\"height: 452px; width: 873px;\" border=\"0\">\r\n<tbody>\r\n<tr>\r\n<td style=\"width: 180px; text-align: center;\"><strong>选项名</strong></td>\r\n<td style=\"text-align: center;\"><strong>描述</strong></td>\r\n<td style=\"text-align: center; width: 130px;\"><strong>默认值</strong></td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.auto_start</td>\r\n<td>在客户访问任何页面时自动开启并初始化Session，默认禁止（因为类定义必须在会话之前被载入，所以若打开这个选项，你就不能在会话中存放对象）</td>\r\n<td style=\"width: 100px;\">禁用（0）</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.cookie_domain</td>\r\n<td>传递会话ID的Cookie作用域（默认为空时会根据Cookie规范去自动生成主机名）</td>\r\n<td style=\"width: 100px;\">none</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.cookie_lifetime</td>\r\n<td>Cookie中Session ID在客户机上保存的有效期（秒），0表示延续到浏览器关闭时</td>\r\n<td style=\"width: 100px;\">0</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.cookie_path</td>\r\n<td>传递会话ID的Cookie作用路径</td>\r\n<td style=\"width: 100px;\">/</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.name</td>\r\n<td>会话的名称，用在客户端Cookie里会话ID标识名，只能包含字母和数字</td>\r\n<td style=\"width: 100px;\">PHPSESSID</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.save_path</td>\r\n<td>对于files处理器，此值是创建会话数据文件的路径</td>\r\n<td style=\"width: 100px;\">/tmp</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.use_cookies</td>\r\n<td>是否使用Cookie在客户端保存会话ID，1表示允许</td>\r\n<td style=\"width: 100px;\">1</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.use_trans_sid</td>\r\n<td>是否使用明码在URL中显示SID（会话ID）。（基于URL的会话管理总是比基于Cookie的会话管理有更多的风险，所以应当禁用）</td>\r\n<td style=\"width: 100px;\">默认禁止（false）</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.gc_probability</td>\r\n<td rowspan=\"2\">\r\n<p>定义在每次初始化会话时，启动垃圾回收程序的概率，这个概率计算公式如下：</p>\r\n<p>session.gc_probability/session.gc_divisor</p>\r\n<p>对会话页面访问频繁，概率就越小。建议值为1/1000~5000</p>\r\n</td>\r\n<td style=\"width: 100px;\" rowspan=\"2\">1/1000</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.gc_divisor</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.gc_maxlifetime</td>\r\n<td>超过此参数所指的秒数后，保存的数据将被视为&lsquo;垃圾&rsquo;并由垃圾回收程序清理</td>\r\n<td style=\"width: 100px;\">1440（24分钟）</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 150px;\">session.save_handler</td>\r\n<td>存储和检索与会话关联的数据的处理器名字，可以使用（files、user、sqlite、memcache）中的一个值，默认为文件（files），如果想要使用自定义的处理器（如基于数据库或者Memcache的处理器），可用&ldquo;user&rdquo;</td>\r\n<td style=\"width: 100px;\">files</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3>Session的声明与使用</h3>\r\n<p>　　Session的设置不同于Cookie，必须先启动，在PHP中必须调用session_start()函数，以便让PHP核心程序，将和Session相关的内建环境变量预先载入至内存中。</p>\r\n<p>　　bool session_start(void)</p>\r\n<p>　　这个函数没有参数，且返回值均为TRUE。有两个主要作用，一是开始一个会话，二是返回已经存在的会话。</p>\r\n<p>　　当第一次访问网站时，session_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存在客户端Cookie中。同时，也在服务器端创建一个以这个Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将客户端Cookie中保存的Session ID再携带过来，这时session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘上去寻找和这个Session ID同名的Session文件，将之前为这个用户保存的会话信息读出，在当前脚本应用达到跟踪这个用户的目的。所以在会话期间，同一个用户在访问服务器上的任何页面时，都是同一个Session ID。</p>\r\n<p>　　如果你是使用基于Cookie的Session，在使用该函数开启Session之前，不能有任何输出的内容。因为基于Cookie的Session是在开启的时候，调用session_start()函数会生成一个唯一的Session ID，需要保存在客户端计算机的Cookie中，和setcookie()函数一样，有头信息的设置过程，所以在调用之前不能有任何的输出，空格或空行也不行。</p>\r\n<p>　　如果不想在每个脚本都使用session_start()函数开启Session，可以在php.ini里设置&ldquo;session.auto_start=1&rdquo;，则无须每次使用Session之前调用session_start()函数。但启用该选项也有一些限制，即不能将对象放入Session中，因为类定义必须在启动Session之前加载。所以不建立使用php.ini的session.auto_start属性来开启Session。</p>\r\n<h3>注册一个会话变量和读取Session</h3>\r\n<p>　　在PHP中使用Session变量，除了必须要启动之外，还要经过注册的过程。注册和读取Session变量，都要通过访问 $_SESSION数组完成。但必须在调用session_start()函数开启Session之后才能使用。$_SESSION总是具有全局范围，因此不需要对$_SESSION使用global关键字。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">session_start();\r\n$_SESSION[\'username\'] = \"skygao\";\r\n$_SESSION[\'uid\'] = 1;</pre>\r\n</div>\r\n<p>　　执行该脚本后，两个Session变量就会被保存在服务器端的某个文件中，该文件的位置是通过php.ini文件，在session.save_path属性执行的目录下，为这个访问的用户单独创建的文件，用来保存注册的Session值。例如，某个保存Session变量的文件名为&ldquo;sess_1uebcnr0cd3ocbjg36s8ep0105&rdquo;，文件名中含Session ID，所以每个访问用户在服务器都有自己的保存Session变量的文件。该文件的内容结构如下所示：</p>\r\n<p>　　变量名|类型:长度:值;</p>\r\n<p>　　本例在Session中注册了两个变量，如果在服务器找中找到为该用户保存Session变量的文件，打开后可以看到如下内容：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">username|s:6:\"skygao\";uid|i:1;\r\n</pre>\r\n</div>\r\n<h3>注销变量与销毁Session</h3>\r\n<p>　　当使用完一个Session变量后，可以将其删除，当完成一个会话后，也可以将其销毁。销毁和当前Session有关的所有资料，可以调用session_destroy()函数结束当前的会话，并清空会话中所有资源。</p>\r\n<p>　　bool session_destroy(void)</p>\r\n<p>　　相对于session_start()函数（创建Session文件），该函数用来关闭Session的运作（删除Session文件），如果成功则传回TRUE，销毁Session资料失败则返回false。但该函数并不会释放和当前Session相关的变量，也不会删除保存在客户端Cookie中的Session ID。因为$_SESSION数组和自定义的数组在使用上是相同的，所以我们可以使用unset()函数来释放Session中注册的单个变量。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">unset($_SESSION[\'username\']);\r\nunset($_SESSION[\'uid\']);\r\n</pre>\r\n</div>\r\n<p>　　一定要注意，不要使用unset($_SESSION)删除整个$_SESSION数组，这样将不能再通过$_SESSION超全局数组注册变量。但如果想把某个用户在Session中注册的所有变量都删除，可以直接将数组变量$_SESSION赋上一个空数组。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$_SESSION = array();\r\n</pre>\r\n</div>\r\n<p>　　PHP默认的Session是基于Cookie的，Session ID被服务器存储在客户端的Cookie中，所以销毁Session时也要清除Cookie中保存的Session ID，而这就必须借助setcookie()函数完成。在Cookie中，保存Session ID的Cookie标示名称就是Session的名称，这个名称是php.ini中，通过session.name属性指定的值。在PHP脚本中，可以通过调用session_name()函数获取Session名称。删除保存在客户端Cookie中的Session ID，代码如下：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">if(isset($_COOKIE[session_name()])){\r\n    setcookie(session_name(),\'\',time() - 3600,\'/\');\r\n}\r\n</pre>\r\n</div>\r\n<p>　　通过前面的介绍可以总结出，Session的注销过程共需要4个步骤，在下例中，提供完整的4个步骤代码，运行该脚本就可以关闭Session，并销毁与本次会话相关的所有资源，代码如下所示：</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">session_start();\r\n//第一步：开启Session并初始化\r\n\r\n$_SESSION = array();\r\n//第二步：删除所有Session变量，也可以用unset($_SESSION[xxx])逐个删除\r\n\r\nif(isset($_COOKIE[session_name()])){\r\n    setcookie(session_name(),\'\',time() - 3600 ,\'/\');\r\n}\r\n//第三步：如果使用基于Cookie的Session，使用setcookie()删除包含SESSION ID的Cookie\r\n\r\nsession_destroy();\r\n//第四步：最后彻底销毁Session\r\n</pre>\r\n</div>\r\n<p>　　使用&ldquo;$_SESSION = array();&rdquo;清空$_SESSION数组的同时，也将这个用户在服务器端对应的Session文件内容清空，而使用session_destroy()时，则是将这个用户在服务器端对应的Session文件删除。</p>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/21/9513109.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('27', '0', '会话控制Cookie的应用', '', '', '', '<p>　　Cookie是一种由服务器发送给客户端的片段信息，存储在客户端浏览器的内存或者硬盘上，在客户端对服务器的请求中发回它。PHP透明地支持HTTP Cookie。可以利用他在远程浏览器端存储数据并以此来跟踪和识别用户的机制。</p>\r\n<p>　　Cookie是用来将使用者资料记录在客户端的技术，这种技术让Web服务器能将一些只需存放于客户端，或者可以在客户端进行运算的资料，存放于用户的计算机系统中。就不需要在连接服务器时，再通过网络传输、处理这些资料，进而提高网页处理的效率，降低服务器的负担。</p>\r\n<h3>向客户端计算机中设置Cookie</h3>\r\n<p>　　Cookie的建立十分简单，只要用户的浏览器支持Cookie功能，就可以使用PHP内建的setcookie()函数来新建立一个Cookie。Cookie是HTTP标头的一部分，因此setcookie()函数必须在其他信息被输出到浏览器前调用，所以即使是空格或空行，都不要在调用setcookie()函数之前输出，这和调用header()函数的限制类似。</p>\r\n<p>　　bool setcookie(string $name [,string $value [,int $expire [,string $path [,string $domain [,bool $secure]]]]])</p>\r\n<p>　　setcookie()函数定义一个和其余的HTTP标头一起发送的Cookie，它的所有参数是对应HTTP标头Cookie资料的属性。</p>\r\n<table style=\"height: 257px; width: 854px;\" border=\"0\">\r\n<tbody>\r\n<tr align=\"center\">\r\n<td style=\"text-align: center; width: 100px;\"><strong>参数</strong></td>\r\n<td style=\"text-align: center;\"><strong>描述</strong></td>\r\n<td style=\"text-align: center;\"><strong>示例</strong></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">$name</td>\r\n<td>Cookie的识别名称</td>\r\n<td>使用$_COOKIE[\'cookiename\']调用名为cookiename的Cookie</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">$value</td>\r\n<td>\r\n<p>Cookie的值，可以为数值或者字符串形态，此值保存在客户端，不要用来保存敏感数据</p>\r\n</td>\r\n<td>假定第一个参数为&ldquo;cookiename&rdquo;，可以通过$_COOKIE[\'cookiename\']获取其值</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">$expire</td>\r\n<td>\r\n<p>Cookie的生存期限，这个是UNIX时间戳，即从UNIX纪元开始的秒数</p>\r\n</td>\r\n<td>\r\n<p>如time()+60*60*24*7将设定Cookie在一周后失效，如果未设定Cookie，则会在会话结束后就立即失效</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">$path</td>\r\n<td>\r\n<p>Cookie在服务器的指定路径，当设定此值时，服务器中只有指定路径下的网页或程序可以存取此Cookie</p>\r\n</td>\r\n<td>\r\n<p>如果该参数设为&ldquo;/&rdquo;，Cookie在整个domain内有效，如果设为&ldquo;/foo/&rdquo;，Cookie就只在domain下的/foo/目录及其及目录内有效，默认值为设定Cookie的当前目录</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">$domain</td>\r\n<td>\r\n<p>指定此Cookie所属服务器的网址名称，预设是建立此Cookie服务器的网址</p>\r\n</td>\r\n<td>\r\n<p>要使Cookie能在example.com域名下的所有子域名都有效的话，该参数应该设为&ldquo;.example.com&rdquo;。虽然&ldquo;.&rdquo;并不是必须的，但加上他会兼容更多的浏览器。如果该参数设为www.example.com的话，就只有www子域内有效</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">$secure</td>\r\n<td>\r\n<p>指明Cookie是否仅通过安全的HTTPS连接传送，Cookie中的安全识别常数，如果设定瓷质代表只有在某些情况下，才能在客户端与服务器之间传递</p>\r\n</td>\r\n<td>当设为TRUE时，Cookie仅在安全的连接中被设置，默认为FALSE</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>　　如果只有$name这一个参数，则原有此名称的Cookie选项将会被删除，你也可以使用空字符串（&ldquo; &rdquo;）来略过此参数。参数$expire和$secure是个整数，你可以使用0来略过此参数，而不是使用空字符串。但参数$expire是一个正规的UNIX时间整数。有time()或mktime()函数传回。参数$secure指出此Cookie将只有在安全HTTPS连接时传送。在实际建立Cookie是通常仅使用前三项参数。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">setcookie(\"username\",\"skygao\",time() + 60*60*24*7);\r\n//向客户端发送一个Cookie，将变量username值为skygao，保存客户端一周的时间\r\n</pre>\r\n</div>\r\n<p>　　如果访问改脚本就会设置Cookie，并将用户名添加到访问者电脑的Cookie中去。上例表示建立一个识别名称位&ldquo;username&rdquo;的Cookie，其内容为字符串&ldquo;skygao&rdquo;，而在客户端有效的存储期限则指定为一周。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">setcookie(\"username\",\"skygao\",time() + 60*60*24*7,\'/test/\',\'.example.com\'，1);\r\n</pre>\r\n</div>\r\n<p>　　在上例中，参数&ldquo;/test/&rdquo;表示Cookie只有在服务器的这个目录或子目录中有效。参数&ldquo;.example.com&rdquo;是Cookie能在如example.com域名下的所有子域名都有效，虽然&ldquo;.&rdquo;并不必需的，但加上它会兼容更多的浏览器。当最后一个参数设置为1时，则Cookie仅在安全的连接中才能被设置。如果需要向客户端设置多个Cookie，可以通过调用多次setcookie()函数实现。但如果两次设置相同的Cookie识别名称，则后设置的Cookie会把值赋给与自己同名的Cookie变量，如果原来的值不为空，则会被覆盖。</p>\r\n<h3>在PHP脚本中读取Cookie的资料内容</h3>\r\n<p> 　　如果Cookie设置成功，客户端就拥有了Cookie文件，用来保存Web服务器为其设置的用户信息。Cookie是一个以普通文本形式记录信息的，虽然直接使用文本编辑器就可以打开浏览，但直接去阅读Cookie文件中的信息没有意义。而是当客户再次访问该网站时，浏览器会自动把与该站点对应的Cookie信息全部发回给服务器。自PHP5以后，任何从客户端发送过来的Cookie信息，都会被自动保存在$_COOKIE全局数组中，所以在每个PHP脚本中都可以从该数组中读取对应的Cookie信息。</p>\r\n<p>　　在设置Cookie的脚本中，第一次读取它的信息并不会生效，必须刷新或者到下一个页面才可以看到Cookie值。因为Cookie要先被设置到客户端，再次访问时才能被发送回来，这是才能被获取。</p>\r\n<h3>数组形态的Cookie应用</h3>\r\n<p>　　Cookie也可以利用多维数组的形式，将多个内容值存储在相同Cookie名称标识符下。但不能直接使用setcookie()函数，将数组变量插入到第二个参数作为Cookie的值，因为setcookie()函数的第二个参数必须传入一个字符串的值。如果需要将数组变量设置到Cookie中，可以在setcookie()函数的第一个参数中，通过在Cookie标识名称指定数组下标的形式设置。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">setcookie(\"user[username]\",\"skygao\");\r\nsetcookie(\"user[password]\",md5(\'123456\'));\r\nsetcookie(\"user[email]\",\'skygao@example.com\');\r\n</pre>\r\n</div>\r\n<p>　　在上面一段程序中，建立了一个标识名称为&ldquo;user&rdquo;的Cookie，但其中包含了三个数据，这样就形成了Cookie的关联数组形态。设置成功后，如果需要在PHP脚本中获取其值，同样是使用$_COOKIE超级全局数组。但这时的$_COOKIE数组并不是唯一的了，而是变成了一个二维数组，一维的下标变量是&ldquo;user&rdquo;。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">foreach($_COOKIE[\'user\'] as $key=>$value){\r\n    echo $key.\"：\".$value.\"\\n\";\r\n}</pre>\r\n</div>\r\n<h3> 删除Cookie</h3>\r\n<p>　　如果需要删除保存在客户端的Cookie，可以使用两种方法。而这两种方法和设置Cookie一样，也是调用setcookie()函数实现删除的动作：第一种方式，省略setcookie()函数的所有参数列，仅导入飞一个参数Cookie识别名称参数，来删除指定名称的Cookie资料；第二种方式，利用setcookie()函数把目标Cookie设定为&ldquo;已过期&rdquo;状态。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">setcookie(\'account\');\r\n//只指定Cookie识别名称一个参数，即删除客户端中这个指定名称的Cookie资料\r\n\r\nsetcookie(\'isLogin\',\"\",time() - 100);\r\n//设置Cookie在当前时间之前已经过期，因此系统会自动删除识别名称为isLogin的Cookie\r\n</pre>\r\n</div>\r\n<p>　　第一种方法将Cookie的生存时间默认设置为空，则生存期限与浏览器一样，浏览器关闭时Cookie就会被删除。而对于第二种删除Cookie的方法，Cookie的有效期限参数的含义指当超过设定时间时，系统会自动删除客户端的Cookie。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/17/9492487.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('28', '0', 'PHP文件系统处理', '', '', '', '<h3>文件类型</h3>\r\n<p>　　PHP是以UNIX的文件系统为模型的，因此在Window系统中我们只能获得&ldquo;file&rdquo;、&ldquo;dir&rdquo;、或者&ldquo;unknown&rdquo;三种文件类型。而在UNIX系统中，我们可以获得&ldquo;block&rdquo;、&ldquo;char&rdquo;、&ldquo;dir&rdquo;、&ldquo;fifo&rdquo;、&ldquo;file&rdquo;、&ldquo;link&rdquo;和&ldquo;unknown&rdquo;7种类型。</p>\r\n<table style=\"height: 147px; width: 788px;\" border=\"0\">\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\"><strong>文件类型</strong></td>\r\n<td style=\"text-align: center;\"><strong>描述</strong></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">Block</td>\r\n<td>块设备文件，如某个磁盘分区、软驱、光驱CD-ROM等</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">Char</td>\r\n<td>字符设备是指在I/O传输过程中以字符为单位进行传输的设备，例如键盘，打印机等</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">Dir</td>\r\n<td>目录类型，目录也是文件的一种</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">Fifo</td>\r\n<td>命名管道，常用于将信息从一个进程传递到另一个进程</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">File</td>\r\n<td>普通文件类型，如文本文件或可执行文件</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">Link</td>\r\n<td>符号链接，是指向文件指针的指针，类似Window中的快捷方式</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">Unknown</td>\r\n<td>位置类型</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>　　在PHP中可以使用filetype()函数获取文件的类型，该函数接收一个文件名作为参数，如果文件不存在将返回FALSE。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">/*\r\n * 获取Linux系统下文件类型\r\n */\r\necho filetype(\'/etc/passwd\');\r\n//输出file，/etc/passwd为普通文件\r\n\r\necho filetype(\'/etc/grub.conf\');\r\n//输出link，/etc/grub.conf为链接文件-》/boot/grub/grub.conf\r\n\r\necho filetype(\'/etc/\');\r\n//输出dir，/etc/为一个目录，即文件夹\r\n\r\necho filetype(\'/dev/sda1\');\r\n//输出block，/dev/sda1为块设备，它是一个分区\r\n\r\necho filetype(\'/dev/tty01\');\r\n//输出char，为字符设备，它是一个字符终端\r\n</pre>\r\n</div>\r\n<p>　　对于一个已知的文件，还可以使用is_file()函数判断给定的文件名是否为一个正常的文件。和它类似，使用is_dir()函数判断给定的文件名是否是一个目录，使用is_link()函数判断给定的文件名是否为一个符号链接。</p>\r\n<h3>文件属性</h3>\r\n<p>　　在进行编程时，需要使用到文件的一些常用的属性，如文件的大小、文件的类型、文件的修改时间、文件的访问时间和文件的权限。</p>\r\n<table style=\"height: 184px; width: 775px;\" border=\"0\">\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\"><strong>函数名</strong></td>\r\n<td style=\"text-align: center;\"><strong>作用</strong></td>\r\n<td style=\"text-align: center;\"><strong>参数</strong></td>\r\n<td style=\"text-align: center;\"><strong>返回值</strong></td>\r\n</tr>\r\n<tr>\r\n<td>file_exists()</td>\r\n<td>检查文件或目录是否存在</td>\r\n<td>文件名</td>\r\n<td>文件存在返回TRUE，不存在则返回FALSE</td>\r\n</tr>\r\n<tr>\r\n<td>filesize()</td>\r\n<td>获取文件大小</td>\r\n<td>文件名</td>\r\n<td>返回文件大小的自己数，出错返回FALSE</td>\r\n</tr>\r\n<tr>\r\n<td>is_readable()</td>\r\n<td>判断给定文件名是否可读</td>\r\n<td>文件名</td>\r\n<td>如果文件存在且可读则返回TRUE</td>\r\n</tr>\r\n<tr>\r\n<td>is_writable()</td>\r\n<td>判断给定文件名是否可写</td>\r\n<td>文件名</td>\r\n<td>如果文件存在且可读写则返回TRUE</td>\r\n</tr>\r\n<tr>\r\n<td>is_executable()</td>\r\n<td>判断给定文件名是否可执行</td>\r\n<td>文件名</td>\r\n<td>如果文件存在且可执行则返回TRUE</td>\r\n</tr>\r\n<tr>\r\n<td>filectime()</td>\r\n<td>获取文件的创建时间</td>\r\n<td>文件名</td>\r\n<td>返回UNIX时间戳格式</td>\r\n</tr>\r\n<tr>\r\n<td>filemtime()</td>\r\n<td>获取文件的修改时间</td>\r\n<td>文件名</td>\r\n<td>返回UNIX时间戳格式</td>\r\n</tr>\r\n<tr>\r\n<td>fileatime()</td>\r\n<td>获取文件的访问时间</td>\r\n<td>文件名</td>\r\n<td>返回UNIX时间戳格式</td>\r\n</tr>\r\n<tr>\r\n<td>stat()</td>\r\n<td>获取文件大部分属性值</td>\r\n<td>文件名</td>\r\n<td>返回关于给定文件有用的信息数组</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">header(\"Content-type:text/html;charset=utf-8\");\r\ndate_default_timezone_set(\"Asia/Shanghai\");\r\n/*\r\n * 声明一个函数，通过传入一个文件名称获取文件的部分属性\r\n * @param string $filename 文件名称\r\n */\r\nfunction getFilePro($filename){\r\n    if(!file_exists($filename)){\r\n        echo \'目标文件不存在！！&lt;br />\';\r\n        return;\r\n    }\r\n    if(is_file($filename)){\r\n        echo $filename.\'是一个文件&lt;br />\';\r\n    }\r\n    if(is_dir($filename)){\r\n        echo $filename.\'是一个目录&lt;br />\';\r\n    }\r\n\r\n    echo \'文件的类型：\'.getFileType($filename).\'<br />\';\r\n    echo \'文件的大小：\'.getFileSize(filesize($filename)).\'<br />\';\r\n\r\n    if(is_readable($filename)){\r\n        echo \'文件可读<br />\';\r\n    }\r\n    if(is_writable($filename)){\r\n        echo \'文件可写<br />\';\r\n    }\r\n    if(is_executable($filename)){\r\n        echo \'文件可执行.<br />\';\r\n    }\r\n\r\n    echo \'文件建立时间：\'.date(\'Y-m-d H:i:s\',filectime($filename)).\'<br />\';\r\n    echo \'文件最后修改时间：\'.date(\'Y-m-d H:i:s\',filemtime($filename)).\'<br />\';\r\n    echo \'文件最后访问时间：\'.date(\'Y-m-d H:i:s\',fileatime($filename)).\'<br />\';\r\n}\r\n\r\ngetFilePro(\'1111.txt\');\r\n/*\r\n * 声明一个函数用来返回文件的类型\r\n * @param string $filename 文件名称\r\n */\r\nfunction getFileType($filename){\r\n    switch(filetype($filename)){\r\n        case \'file\':\r\n            $type = \"普通文件\";\r\n            break;\r\n        case \'dir\':\r\n            $type = \'目录文件\';\r\n            break;\r\n        case \'block\':\r\n            $type = \'块设备文件\';\r\n            break;\r\n        case \'char\':\r\n            $type = \'字符设备文件\';\r\n            break;\r\n        case \'fifo\':\r\n            $type = \'命名管道文件\';\r\n            break;\r\n        case \'link\':\r\n            $type = \'符号链接\';\r\n            break;\r\n        case \'unknown\':\r\n            $type = \'位置类型\';\r\n            break;\r\n        default;\r\n            $type = \'没有检测到文件类型\';\r\n    }\r\n    return $type;\r\n}\r\n/*\r\n * 自定义一个文件大小单位转换函数\r\n * @param int $bytes 文件大小的字节数\r\n * @return string 转换后带有单位的尺寸字符串\r\n */\r\nfunction getFileSize($bytes){\r\n    if($bytes >= pow(2,40)){\r\n        $return = round($bytes/pow(1024,4),2);\r\n        $suffix = \'TB\';\r\n    }else if($bytes >= pow(2,30)){\r\n        $return = round($bytes/pow(1024,3),2);\r\n        $suffix = \'GB\';\r\n    }else if($bytes >= pow(2,20)){\r\n        $return = round($bytes/pow(1024,2),2);\r\n        $suffix = \'MB\';\r\n    }else if($bytes >= pow(2,10)){\r\n        $return = round($bytes/pow(1024,1),2);\r\n        $suffix = \'KB\';\r\n    }else{\r\n        $return = $bytes;\r\n        $suffix = \'Byte\';\r\n    }\r\n    return $return.\" \".$suffix;\r\n}\r\n</pre>\r\n</div>\r\n<h3>目录的基本操作</h3>\r\n<p>　　要描述一个文件的位置，可以使用绝对路径和相对路径。绝对路径是从根开始一级一级地进入各个子目录，最后指定该文件名或者目录名。而相对路径是从当前目录进入某个目录，最后指定该文件名或目录名。在系统的每个目录下都有两个特殊的目录&ldquo;.&rdquo;和&ldquo;..&rdquo;,分别指示当前目录和当前目录的父目录（上一级目录）。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$unixPath = \'/var/www/html/index.php\';\r\n$winPath = \'C:\\\\Appserv\\\\www\\\\index.php\';\r\n$winPath2 = \'C:/Appserv/www/index.php\';\r\n\r\n$fileName1 = \'file.txt\';\r\n$fileName2 = \'javascript/common.js\';\r\n$fileName3 = \'../image/logo.gif\';</pre>\r\n</div>\r\n<p>　　在UNIX系统中必须使用正斜线&ldquo;/&rdquo;作为路径分隔符，而在Windows系统中默认使用反斜线&ldquo;\\&rdquo;作为路径分割线，在程序中表示时还要将&ldquo;\\&rdquo;转义，但也接受正斜线&ldquo;/&rdquo;作为分割线的写法。为了程序可以有很好的移植性，建议都是用&ldquo;/&rdquo;作为文件的路径分隔符。另外，也可以使用PHP内部的常量DIRECTORY_SEPARATOR，其值为当前操作系统的默认文件路径分隔符。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$fileName2 = \'javascript\'.DIRECTORY_SEPARATOR.\'common.js\';\r\n</pre>\r\n</div>\r\n<p>　　将目录路径中的各个属性分离开通常很有用，如末尾的扩展名、目录部分和基本名。可以通过PHP的系统函数basename()、dirname()和pathinfo()函数完成这些任务。</p>\r\n<p>　　1、basename()</p>\r\n<p>　　basename()返回路径中的文件名部分。该函数的原型如下所示：</p>\r\n<p>　　string basename(string path [,string suffix])</p>\r\n<p>　　该函数给出一个包含有指向一个文件全路径的字符串，本函数返回基本的文件名。第二个参数是可选参数，规定文件的扩展名。如果提供了则不会输出这个扩展名。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$path = \'/var/www/html/page.php\';\r\necho basename($path);\r\n//显示带有文件扩展名的文件名，输出page.php\r\n\r\necho basename($path,\'.php\');\r\n//显示不带文件扩展名的文件名，输出page\r\n</pre>\r\n</div>\r\n<p>　　2、dirname()</p>\r\n<p>　　该函数恰好与basename()相反，只需要一个参数，给出一个包含有指向一个文件的全路径的字符串，本函数返回去掉文件名后的目录名。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$path = \'/var/www/html/page.php\';\r\necho dirname($path);\r\n//返回目录名/var/www/html\r\n</pre>\r\n</div>\r\n<p>　　3、pathinfo()</p>\r\n<p>　　函数pathinfo()返回一个关联数组，其中包括制定路径中的目录名、基本名和扩展名三个部分。分别通过数组键dirname、basename和extension来引用。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$path = \'/var/www/html/index.php\';\r\n$path_parts = pathinfo($path);\r\necho $path_parts[\'dirname\'];\r\n//输出目录名/var/www/html\r\necho $path_parts[\'basename\'];\r\n//输出基本名index.php\r\necho $path_parts[\'extension\'];\r\n//输出扩展名php\r\n</pre>\r\n</div>\r\n<h3>遍历目录</h3>\r\n<p>　　在进行PHP编程时，需要对服务器某个目录下面的文件进行浏览，通常称为遍历目录。取得一个目录下的文件和子目录，就需要用到opendir()函数、readdir()函数、closedir()函数和rewinddir()函数。</p>\r\n<ul>\r\n<li>函数opendir()用于打开指定目录，接受一个目录的路径作为参数，函数返回值为可供其他目录函数使用的目录句柄（资源类型）。如果目录不存在或者没有访问权限，则返回FALSE。</li>\r\n<li>函数readdir()用于读取指定的目录，接受已经用opendir()函数打开的可操作目录句柄作为参数，函数返回当前目录指针位置的一个文件名，并将目录指针向后移动一位。当指针位于目录的结尾时，因为没有文件存在则返回FALSE。</li>\r\n<li>函数closedir()关闭指定目录，接收已经用opendir()函数打开的可操作句柄作为参数。函数无返回值，运行后将关闭打开的目录。</li>\r\n<li>函数rewinddir()倒回目录句柄，接收已经用opendir()函数打开的可操作目录句柄作为参数。将目录指针重置目录到开始处，即倒回目录的开头。</li>\r\n</ul>\r\n<h3> 统计目录大小</h3>\r\n<p>　　计算文件、磁盘分区和目录的大小在各种应用程序中都是常见任务。计算文件的大小可以通过前面介绍的filesize()函数完成，统计磁盘大小也可以使用disk_free_space()和disk_total_space()两个函数实现。但是PHP目前没有提供目录总大小的标准函数，因此我们需要自定义一个函数来完成任务。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">/*\r\n * 自定义一个函数，统计传入的目录大小\r\n * @param string $directory 目录名称\r\n * @return double 目录的尺寸大小\r\n */\r\nfunction dirSize($directory){\r\n    $dir_size = 0;\r\n    if($dir_handle = @opendir($directory)){\r\n        while($filename = readdir($dir_handle)){\r\n            if($filename != \'.\' && $filename != \'..\'){\r\n                $subFile = $directory.DIRECTORY_SEPARATOR.$filename;\r\n                if(is_dir($subFile)){\r\n                    $dir_size += dirSize($subFile);\r\n                }\r\n                if(is_file($subFile)){\r\n                    $dir_size += filesize($subFile);\r\n                }\r\n            }\r\n        }\r\n        closedir($dir_handle);\r\n        return $dir_size;\r\n    }\r\n}\r\n\r\n$dir_size = dirSize(\'D:/phpStudy/WWW/demo\');\r\necho round($dir_size/pow(1024,1),2).\'KB\';\r\n</pre>\r\n</div>\r\n<h3>建立和删除目录</h3>\r\n<p>　　在PHP中，使用mkdir()函数只需传入一个目录名即可很容易地建立一个新目录。但是删除目录所用到的函数rmdir()，只能删除一个空目录并且目录必须存在。如果是非空的目录就需要先进入到目录中，使用unlink()函数将这个目录中的文件都删除掉，再回来将这个空目录删除。如果目录中还存在子目录，而且子目录也非空，就要使用递归的方法了。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">/*\r\n * 自定义函数递归删除整个目录\r\n * @param string $directory 目录名\r\n */\r\nfunction delDir($directory){\r\n    if(file_exists($directory)){\r\n        if($dir_handle = @opendir($directory)){\r\n            while($filename = readdir($dir_handle)){\r\n                if($filename != \'.\' && $filename != \'..\'){\r\n                    $subFile = $directory.DIRECTORY_SEPARATOR.$filename;\r\n                    if(is_dir($subFile)){\r\n                        delDir($subFile);\r\n                    }\r\n                    if(is_file($subFile)){\r\n                        unlink($subFile);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        closedir($dir_handle);\r\n        rmdir($directory);\r\n    }\r\n}\r\ndelDir(\'D:\\phpStudy\\WWW\\demo\\file\\demo\');\r\n</pre>\r\n</div>\r\n<h3>复制目录</h3>\r\n<p>　　要复制一个文件可以通过PHP提供的copy()函数完成，创建目录可以使用mkdir()函数，定义函数时，首先对源目录进行遍历，如果遇到的是普通文件，直接使用copy()函数进行复制。如果遍历时遇到一个目录，则必须建立该目录，然后再对该目录下的文件进行复制操作，如果还有子目录，则使用递归重复操作，最终将整个目录复制完成。</p>\r\n<p> </p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">/*\r\n * 自定义函数递归复制带有子目录的目录\r\n * @param string $dirSrc 源目录名字字符串\r\n * @param string $dirTo 目标目录名字字符串\r\n */\r\nfunction copyDir($dirSrc,$dirTo){\r\n    if(!file_exists($dirTo)){\r\n        mkdir($dirTo);\r\n    }\r\n    if($dir_handle = @opendir($dirSrc)){\r\n        while($filename = readdir($dir_handle)){\r\n            if($filename != \'.\' && $filename != \'..\'){\r\n                $subSrcFile = $dirSrc.DIRECTORY_SEPARATOR.$filename;\r\n                $subToFile = $dirTo.DIRECTORY_SEPARATOR.$filename;\r\n                if(is_dir($subSrcFile)){\r\n                    copyDir($subSrcFile,$subToFile);\r\n                }\r\n                if(is_file($subSrcFile)){\r\n                    copy($subSrcFile,$subToFile);\r\n                }\r\n            }\r\n        }\r\n        closedir($dir_handle);\r\n    }\r\n}\r\ncopyDir(\'./dirSrc\',\'./dirTo\');\r\n</pre>\r\n</div>\r\n<h3>文件的打开与关闭</h3>\r\n<p>　　在处理文件内容之前，通常需要建立与文件资源的连接，即打开文件。同样，结束该资源的操作之后，应当关闭连接资源。所谓打开文件，实际上是建立文件的各种有关信息，并使文件指针指向该文件，就可以将发起输入或输出流的实体联系在一起，以便进行其他操作。关闭文件则断开指针与文件的联系，也就禁止再对文件进行操作。</p>\r\n<p>　　1、函数fopen()</p>\r\n<p>　　该函数用来打开一个文件，并在打开一个文件时，还需要指定如何使用它。也就是以哪种文件模式打开文件资源。</p>\r\n<p>　　resource fopen(string filename,string mode [,bool use_include_path [,resource zcontext]])</p>\r\n<p>　　第一个参数需要提供要被打开文件的URL。这个URL可以是脚本所在服务器中的绝对路径，也可以是相对路径，还可以是网络资源中的文件。</p>\r\n<p>　　第二个参数需要提供文件模式，文件模式可以告诉操作系统如何处理来自其他人或脚本的访问请求，以及一种用来检查你是否有权限访问这个特定文件的方法。当在打开文件时有三种选择：</p>\r\n<ul>\r\n<li>打开一个文件为了只读、只写或者是读和写。</li>\r\n<li>如果要写一个文件，可以覆盖所有已有的文件内容，或者需要将新数据追加到文件末尾。</li>\r\n<li>如果在一个区分二进制文件和纯文本文件的系统上写一个文件，还必须制定采用的方式。</li>\r\n</ul>\r\n<p>　　函数fopen()也支持以上三种方式的组合，只需要在第二个参数中提供一个字符串，指定将对文件进行的操作即可。</p>\r\n<table style=\"height: 327px; width: 913px;\" border=\"0\">\r\n<tbody>\r\n<tr>\r\n<td style=\"width: 100px; text-align: center;\"><strong>模式</strong></td>\r\n<td style=\"text-align: center;\"><strong>描述</strong></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">r</td>\r\n<td>只读方式打开文件，从文件开头开始读</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">r+</td>\r\n<td>读写方式打开文件，从文件开头开始读写</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">w</td>\r\n<td>\r\n<p>只写方式打开文件，从文件开头开始写。如果文件已经存在，将文件指针指向文件头并将文件大小截为零，即删除所有文件已有内容，如果该文件不存在，函数将创建这个文件</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">w+</td>\r\n<td>\r\n<p>读写方式打开文件，从文件开头开始读写。如果文件已经存在，将文件指针指向文件头并将文件大小截为零，即删除所有文件已有内容。如果文件不存在，函数将创建这个文件</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">x</td>\r\n<td>\r\n<p>创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则fopen()调用失败并返回FALSE，并生成一条E_WARNING级别的错误信息。如果文件不存在则尝试创建。仅能用于本地文件</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">x+</td>\r\n<td>\r\n<p>创建并以读写方式打开，将文件指针指向文件头。如果文件已存在，则fopen()调用失败并返回FALSE，并生成一条E_WARNING级别的错误信息。如果文件不存在则尝试创建。仅能用于本地文件</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">a</td>\r\n<td>\r\n<p>写入方式打开，将文件指针指向文件末尾。如果该文件已有内容，将从该文件末尾开始追加。如果该文件不存在，函数将创建这个文件</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">a+</td>\r\n<td>\r\n<p>写入方式打开，将文件指针指向文件末尾。如果文件已有内容，将从文件末尾开始追加或者读。如果文件不存在，函数将创建这个文件</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">b</td>\r\n<td>\r\n<p>以二进制模式打开文件，用于与其他模式进行连接。如果文件系统能够区分二进制文件和文本文件，你可能会使用它。例如Windows系统中可以区分，而UNIX系统则不区分。这个模式是默认的模式</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">t</td>\r\n<td>以文本模式打开文件，这个模式也只能是Windows系统下一个选项，不推荐使用</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>　　如果open()函数成功地打开一个文件，该函数将返回一个指向这个文件的文件指针。对该文件进行操作所使用的读、写以及其他的文件操作函数，都要使用这个资源来访问该文件。如果打开文件失败，则返回FALSE。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$handle = fopen(\'/home/rasmus/file.txt\',\'r\');\r\n//使用绝对路径打开file.txt文件，选择只读模式，并返回资源$handle\r\n\r\n$handle = fopen(\"{$_SERVER[\'DOCUMENT_ROOT\']}/data/info.txt\",\'r\');\r\n//访问文档根目录下的文件，也以只读模式打开\r\n\r\n$handle = fopen(\'C:\\\\data\\\\file.gif\',\'wb\');\r\n//在Windows平台上，转义文件路径中的每个反斜线，或者用斜线，以二进制和只写模式组合\r\n\r\n$handle = fopen(\'../data/info.txt\',\'r\');\r\n//使用相对路径打开info.txt文件，选择只读模式，并返回资源$handle\r\n\r\n$handle = fopen(\"http://www.demo.com\",\'r\');\r\n//打开远程文件，使用http协议只能以只读的模式打开\r\n\r\n$handle = fopen(\"ftp://user:password@example.com/somefile.txt\",\'w\');\r\n//使用ftp协议打开远程文件，如果ftp服务器可写，则可以以写模式打开\r\n</pre>\r\n</div>\r\n<p>　　2、函数fclose()</p>\r\n<p>　　资源类型属于PHP的基本类型，一旦完成资源的处理，一定要将其关闭，否则可能会出现一些预料不到的错误。函数fclose()就会撤销fopen()打开的资源类型，成功时返回TRUE，否则返回FALSE。参数必须是使用fopen()或fsockopen()函数打开已存在的文件指针。</p>\r\n<h3> 写入文件</h3>\r\n<p>　　将程序中的数据保存到文件中比较容易，使用fwrite() 函数就可以将字符串内容写入到文件中。在文件中通过字符序列\\n表示换行符，表示文件中一行的结尾。当需要一次输入或输出一行时，请记住这一点。不同的操作系统具有不同的结束符号，基于UNIX的系统使用&ldquo;\\n&rdquo;作为行结束符号，基于Windows的操作系统使用&ldquo;\\r\\n&rdquo;作为行结束符号，基于Mac的系统使用&ldquo;\\r&rdquo;作为行结束字符。当要写入一个文本文件并想插入一个新行时，需要使用相应操作系统的行结束符号。</p>\r\n<p>　　int fwrite(resource handle,string string [,int length])</p>\r\n<p>　　第一个参数需要提供fopen()函数打开的文件资源，该函数将第二个参数提供的字符串内容输出到第一个参数指定的资源中。如果给出了第三个可选参数length，fwrite()将在写入了length个字符是停止。否则将一直写入，直到到达内容结尾才停止。如果写入的内容少于length个字节，该函数也会在写完全部内容后停止。函数fwrite()执行完成以后会返回写入的字符数，出现错误则返回FALSE。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$fileName = \'data.txt\';\r\n$handle = fopen($fileName,\'w\') or die(\'打开<b>\'.$fileName.\'</b>文件失败\');\r\nfor($row = 0; $row < 10; $row++){\r\n    fwrite($handle,$row.\": www.demo.com\\r\\n\");\r\n}\r\nfclose($handle);\r\n</pre>\r\n</div>\r\n<p>　　该程序执行后，如果当前目录下存在data.txt文件，则清空该文件并写入10行数据。如果不存在data.txt文件，则会创建该文件并将10行数据写入。另外，写入文件还可以使用fput()函数，该函数是fwrite()函数的别名函数。如果需要快速写入文件，可以使用file_put_contents()函数。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$fileName = \'data.txt\';\r\n$data = \"共10行数据\\n\";\r\nfor($row = 0; $row < 10; $row++){\r\n    $data .= $row.\": www.demo11.com\\n\";\r\n}\r\nfile_put_contents($fileName,$data);\r\n</pre>\r\n</div>\r\n<p>　　该函数可以将数据直接写入到指定的文件中。如果同时调用多次时，并向同一文件中写入数据，则文件中只保存最后一次调用该函数写入的数据。因为在每次调用时都会重新打开文件并将文件原有的数据清空，所以不能像第一个程序一样连续多次写入多行数据。</p>\r\n<h3>读取文件内容</h3>\r\n<table style=\"height: 129px; width: 790px;\" border=\"0\">\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\"><strong>函数</strong></td>\r\n<td style=\"text-align: center;\"><strong>描述</strong></td>\r\n</tr>\r\n<tr>\r\n<td>fread()</td>\r\n<td>读取打开的文件</td>\r\n</tr>\r\n<tr>\r\n<td>file_get_contents()</td>\r\n<td>将文件读入字符串</td>\r\n</tr>\r\n<tr>\r\n<td>fgets()</td>\r\n<td>从打开的文件中返回一行</td>\r\n</tr>\r\n<tr>\r\n<td>fgetc()</td>\r\n<td>从打开的文件中返回字符</td>\r\n</tr>\r\n<tr>\r\n<td>file()</td>\r\n<td>把文件读入一个数组中</td>\r\n</tr>\r\n<tr>\r\n<td>readfile()</td>\r\n<td>读取一个文件，并输出到输出缓存</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>　　在读取文件时，不仅要注意行结束符号&ldquo;\\n&rdquo;，程序也需要一种标准的方式来识别何时到达文件的结尾，这个标准通常称为EOF（End Of File）字符。在PHP中，使用feof()函数。该函数接受一个打开的文件资源，判断一个文件指针是否位于文件的结束处，如果在文件结尾处，则返回TRUE。</p>\r\n<p>　　1、函数fread()</p>\r\n<p>　　该函数用来在打开的文件中读取指定长度的字符串。也可以安全用于二进制文件，在区分二进制文件和文本文件的系统上（如Windows）打开文件时，fopen()函数的mode参数要加上&ldquo;b&rdquo;。</p>\r\n<p>　　string fread(int handle,int length)</p>\r\n<p>　　该函数从文件指针资源handle中读取最多length个字节。该函数返回读取的内容字符串，如果失败则返回FALSE。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$fileName = \'data.txt\';\r\n$handle = fopen($fileName,\'r\') or die(\"文件打开失败\");\r\n$content = fread($handle,100);\r\nfclose($handle);\r\necho $content;\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$fileName = \'1.jpg\';\r\n$handle = fopen($fileName,\'rb\');\r\n$content = \"\";\r\nwhile(!feof($handle)){\r\n    $content .= fread($handle,1024);\r\n}\r\nfclose($handle);\r\necho $content;\r\n</pre>\r\n</div>\r\n<p>　　如果你只是想将一个文件的内容读入到一个字符串中，可以用file_get_contents()函数，它的性能比上面的代码好的多。file_get_contents()函数时用来将文件的内容读入到一个字符串中的首选方法。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">echo file_get_contents(\'data.txt\');\r\necho file_get_contents(\'1.jpg\');\r\n</pre>\r\n</div>\r\n<p>　　2、函数fgets()、fgetc()</p>\r\n<p>　　该函数一次至多从打开的文件资源中读取一行内容。</p>\r\n<p>　　string fgets(int handle[ ,int length])</p>\r\n<p>　　第一个参数提供使用fopen()函数打开的资源。如果提供了第二个可选参数length，该函数返回length-1个字符。或者返回遇到换行或EOF之前读取的所有内容。如果忽略可选参数的length参数，默认为1024个字符。在大多数情况下，这意味着fgets() 函数将读取到1024个字符前遇到换行符号，因此每次成功调用都会返回下一行。如果读取失败则返回FALSE。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$handle = fopen(\'data.txt\',\'r\') or die(\'打开文件失败\');\r\nwhile(!feof($handle)){\r\n    $buffer = fgets($handle,1024);\r\n    echo $buffer.\'----\';\r\n}\r\nfclose($handle);\r\n</pre>\r\n</div>\r\n<p>　　函数fgetc()在打开的文件资源中只读取当前指针位置处的一个字符。如果遇到文件结束标志EOF，将返回FALSE值。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$handle = fopen(\'data.txt\',\'r\') or die(\'打开文件失败\');\r\nwhile(false !== ($char = fgetc($handle))){\r\n    echo $char.\'----\';\r\n}\r\nfclose($handle);\r\n</pre>\r\n</div>\r\n<p>　　3、函数file()</p>\r\n<p>　　该函数非常有用，与file_get_contents()类似，不需要使用fopen()函数打开文件，不同的是file() 函数可以把整个文件读入到一个数组中。数组中的每个元素对应着文件中相应的行，个元素由换行符隔开，同时换行符仍附加在每个元素的末尾。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">echo \'<pre>\';\r\nprint_r(file(\'data.txt\'));\r\n</pre>\r\n</div>\r\n<p>　　4、函数readfile()</p>\r\n<p>　　该函数可以读取指定的整个文件，立即输出到输出缓存区，并返回读取的字节数。该函数也不需要使用fopen()函数打开文件。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">echo readfile(\'data.txt\');\r\n</pre>\r\n</div>\r\n<p>　　</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/17/9492422.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('29', '0', '数据库抽象层PDO', '', '', '', '<p>　　PHP与流行的开放源代码的MySQL数据库服务器之间总是很默契。它们的合作使它们各自取得了广受推崇的地位。很多PHP应用程序开发人员都习惯于PHP与MySQL这对组合，以至于PHP对其他数据库的支持常常模仿处理MySQL的函数库。然而，并不是所有的数据库处理函数库都一样，也不是所有的数据库都提供相同的特性。虽然存在模仿，但不同的PHP数据库扩展都有它们各自的怪癖和不同之处，所以从一种数据库迁移到另外一种数据库时会有一些困难。虽然PHP一直都拥有很好的数据库连接，但PDO（PHP Data Object的缩写）的出现让PHP达到一个新的高度。PDO扩展类库为PHP访问数据库定义了一个轻量级的、一致性的接口，它提供了一个数据库访问抽象层，这样，无论你使用什么数据库，都可以通过一致性的函数执行查询和获取数据。大大简化了数据库的操作，并能够屏蔽不同数据库之间的差异。使用PDO可以很方便地进行跨数据库程序的开发，以及不同数据库之前的移植，是将来PHP在数据库处理方面的主要方向。</p>\r\n<h3>　　一、PDO所支持的数据库</h3>\r\n<p>　　使用PHP可以处理各种数据库系统，包括MySql、PostgreSQL、Oracle，MsSQL等，但访问不同的数据库系统时，其所使用的PHP扩展也是不同的。应用每种数据库时都要学习特定的函数库，这样是比较麻烦的，更重要的是这使得数据库之间的移植难以实现。</p>\r\n<p style=\"text-align: center;\"><img src=\"https://img2018.cnblogs.com/blog/854257/201809/854257-20180914145345329-1631966578.png\" alt=\"\" /></p>\r\n<p>　　为了解决这样的难题，就需要一种&ldquo;数据库抽象层&rdquo;。它能解决应用程序逻辑与数据库通信逻辑之间的耦合，通过这个通用接口传递所有与数据库相关的命令，应用程序就能使用多种数据库解决方案中的某一种，只要该数据库支持应用程序所需要的特性，而且抽象层提供了与该数据库兼容的驱动程序。</p>\r\n<p style=\"text-align: center;\"><img src=\"https://img2018.cnblogs.com/blog/854257/201809/854257-20180914145509849-1378853047.png\" alt=\"\" /></p>\r\n<p>　　PDO就是一个&ldquo;数据库访问抽象层&rdquo;，作用是统一各种数据库的访问接口，能够轻松地在不同数据库之间进行切换，使得数据库的移植容易实现。与mysql和mysqli的函数库相比，PDO让数据库的使用更具亲和力；与ADODB和MDB2等同类数据库访问抽象层相比，PDO更高效。另外PDO与PHP支持的所有数据库扩展都非常相似，因为PDO借鉴了以往数据库扩展的最好特性。</p>\r\n<p> 　　对数据库的操作，并不是使用PDO扩展本身执行的，必须针对不同的数据库服务器使用特定的PDO驱动程序访问。驱动程序扩展则为PDO和本地RDBMS客户机API库架起一座桥梁，用来访问指定的数据库系统。这能大大提高PDO的灵活性，因为PDO在运行时才加载必需的数据库驱动程序，所以不需要在每次使用不同的数据库时重新配置和重新编译PHP。例如，如果数据库服务器需要从MySQL切换到Oracle，只需要重新加载PDO_OCI驱动程序就可以了。</p>\r\n<h3>　　二、PDO的安装</h3>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/17/9492418.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('30', '0', 'PHP异常处理', '', '', '', '<p>　　异常是OOP应用程序中的一个关键部分，PHP5对其进行了介绍。&ldquo;异常&rdquo;这一术语表示了由try、catch和throw等语句和Exception类组成的整个处理机制。这一机制是用来帮助定义问题发生的时间，以及在问题发生时代码处理问题的方法。</p>\r\n<p>　　异常提供了控制应用程序生成和处理错误的方法。还通过提供的异常发生的场景细节，使得我们能够更加轻松地编写程序。另外，通过使用异常，能够创建具有容错特性的更加稳定的应用程序，并且在发生问题时，异常也能够通知到管理员。</p>\r\n<h3>　　实现异常</h3>\r\n<p>　　异常应用被用来处理不应该在正常的代码执行中发生的任何类型的错误。例如，你可能会在连接一个外部数据库的代码中实现一个异常，以处理可能发生的数据库连接失败的情况。</p>\r\n<p>　　异常是通过增加try、catch和throw这三个关键词和内置的Exception基类来实现的。这些语言构造块允许运行可能发生错误的代码块并且能够从中恢复。</p>\r\n<p>　　1、try</p>\r\n<p>　　try关键字用来定义检测异常的代码块。与使用其他代码块语句一样，如if、while或者for，使用try语句块要加上大括号。try语句块具体有以下的形式。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">try{\r\n    //代码\r\n}\r\n</pre>\r\n</div>\r\n<p>　　try语句块中的代码可能一直运行到结束，也可能抛出异常。如果抛出了异常，代码的剩余部分就会被跳过，程序会调到catch语句块中重新执行。</p>\r\n<p>　　2、catch</p>\r\n<p>　　catch语句块定义了处理发生异常时的处理方法。它允许定义要捕捉的类型，并且可以访问捕捉到的异常的细节。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">catch(Exception $e){\r\n    echo $e;\r\n}\r\n</pre>\r\n</div>\r\n<p>　　在这个例子中，$e是Exception类的一个实例。Exception类是所有类型的异常祖先，所以捕捉Exception类会捕捉到任何类型的异常。</p>\r\n<p>　　为了处理不同类型的异常，你也许会定义多个catch语句块。应该先定义最特定的类型，这是因为catch是按照顺序来解析的，在前面的语句块会先执行。</p>\r\n<p>　　3、throw</p>\r\n<p>　　throw语句是用来触发异常发生并且在这一点上中断处理过程的。你必须给throw语句传递一个Exception类的实例。可以抛出一个存储在变量中的异常，也可以直接在throw语句中创建这个实例。</p>\r\n<p>　　以下几种形式都是等价的。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">$a = new Exception(\'Error message\');\r\nthrow $a;\r\n</pre>\r\n</div>\r\n<p>　　或者</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">throw new Exception(\'Error message\');\r\n</pre>\r\n</div>\r\n<p>　　4、Exception</p>\r\n<p>　　Exception类是所有异常类的基类。为了定义自定义异常类，可以从Exception类派生。</p>\r\n<p>　　Exception的构造函数可以接收一条错误信息和一个错误代码作为参数。错误信息很容易理解，但错误代码的含义就需要做一些解释。</p>\r\n<p>　　通过提供的错代码，在处理异常事件时，就可以灵活处理异常了。通过检查返回的代码，可以以数字的形式映射异常类型，而不是依赖于错误的字符串，因为错误的字符串可能会随时发生改变。</p>\r\n<p>　　构造好异常的实例后，异常就获得几个关键的信息，其中包括构造异常的代码所处于的位置、在构造时执行的代码、错误信息和错误代码。</p>\r\n<table style=\"height: 147px; width: 1048px;\" border=\"0\">\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\">方法</td>\r\n<td style=\"text-align: center;\">说明</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">getMessage()</td>\r\n<td>返回异常信息，此信息是描述错误状态的字符串</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">getCode()</td>\r\n<td>返回错误代码</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">getFile()</td>\r\n<td>返回发生错误所在的源文件。此信息对于查找异常抛出的位置是非常有用的</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">getLine()</td>\r\n<td>返回异常抛出位置在文件中的行号，需要和getFile()方法一起使用</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">getTrace()</td>\r\n<td>返回包含场景的一个数组，这是当前正在执行的方法以及执行顺序的一个列表</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">getTraceAsString()</td>\r\n<td>与getTrace()相同，不过这个函数返回的是字符串而不是数组</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">__toString()</td>\r\n<td>返回用字符串表达的整个异常信息</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p> 　　由于数组中的每个键值都包含了文件、行号、函数名称以及重要的信息，所以getTrace()方法非常有用。使用回溯信息，你可以看到导致问题发生的所有数据流。从而简化了调试工作。getTrace()方法与内置函数debug_backtrace()非常相似。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">function connectToDatabase($config){\r\n   if(!$conn = @mysqli_connect($config[\'host\'],$config[\'user\'],$config[\'password\'],$config[\'database\'],empty($config[\'port\']) ? \'\' : $config[\'port\'])){\r\n       throw new Exception(\'Could not connect to the database\');\r\n   }\r\n}\r\n\r\ntry{\r\n    $config = [\r\n        \'host\' => \'127.0.0.1\',\r\n        \'port\' => 3306,\r\n        \'user\' => \'root\',\r\n        \'password\' => \'root\',\r\n        \'database\' => \'deruimu11\'\r\n    ];\r\n    connectToDatabase($config);\r\n}catch(Exception $e){\r\n    echo $e->getMessage();\r\n}\r\n</pre>\r\n</div>\r\n<p>　　如果无法连接数据库，连接函数就会返回false，异常就会被抛出。throw关键字要和一个Exception类的对象一起使用，它会告诉应用程序什么时候发生了错误。一旦抛出了异常，这个函数就不会执行到最后，它会直接跳出到catch语句块。在catch语句块中，应用程序会打印出错误信息。</p>\r\n<h3>　　扩展异常</h3>\r\n<p>　　通用的异常非常好用，但异常也可以有更多的用处。在上面的代码中，如果可以获得数据库连接失败的原因，它将会更加有用。要获取这样的信息，需要为Exception类集成相应的函数。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">class DatabaseException extends Exception{\r\n    protected $databaseErrorMessage;\r\n\r\n    public function __construct($message = null,$code = 0){\r\n        $this->databaseErrorMessage = mysqli_connect_error();\r\n        parent::__construct($message,$code);\r\n    }\r\n\r\n    public function getDatabaseErrorMessage(){\r\n        return $this->databaseErrorMessage;\r\n    }\r\n\r\n}\r\n\r\nfunction connectToDatabase($config){\r\n   if(!$conn = @mysqli_connect($config[\'host\'],$config[\'user\'],$config[\'password\'],$config[\'database\'],empty($config[\'port\']) ? \'\' : $config[\'port\'])){\r\n       throw new DatabaseException(\'Friendly Message\');\r\n   }\r\n}\r\n\r\ntry{\r\n    $config = [\r\n        \'host\' => \'127.0.0.1\',\r\n        \'port\' => 3306,\r\n        \'user\' => \'root\',\r\n        \'password\' => \'root\',\r\n        \'database\' => \'deruimu11\'\r\n    ];\r\n    connectToDatabase($config);\r\n}catch(DatabaseException $e){\r\n    echo $e->getMessage();\r\n    echo $e->getDatabaseErrorMessage();\r\n}\r\n</pre>\r\n</div>\r\n<p>　　在创建这个类时，需要谨慎地调用基类的构造函数，这是因为错误的实现可能导致PHP中发生不可靠并且通常不稳定的行为。</p>\r\n<h3>　　记录异常日志</h3>\r\n<p>　　通常，将异常记录到日志文件中以便日后回顾是很有好处的。使用以下两种方法之一可以做到这一点。</p>\r\n<ul>\r\n<li>为应用程序创建一个自定义的异常基类。</li>\r\n<li>定义一个未捕获的异常处理程序。</li>\r\n</ul>\r\n<p>　　为了定义一个记录日志的异常基类，需要创建一个Exception类的子类并给它添加一个log()方法，然后在重新的构造函数中调用这个日志方法。</p>\r\n<p> </p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">class LoggedException extends Exception{\r\n\r\n    public function __construct($message = null,$code = 0,$file = \'./phpException.log\'){\r\n        $this->log($file);\r\n        parent::__construct($message,$code);\r\n    }\r\n\r\n    protected function log($file){\r\n        file_put_contents($file,$this->__toString(),FILE_APPEND);\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>　　然后，在所有调用异常或者自定义异常的地方使用LoggedException类。这记录所有异常的日志，即使是那些被捕捉的异常。但这并不一定符合我们的要求，因为我们可能希望只记录未被捕捉的异常，或者那些被catch语句块重新抛出的异常。在这些情况下，你希望使用PHP函数set_exception_handler()。</p>\r\n<p>　　set_exception_handler()函数定义了该如何处理当某个异常向上一直回溯到主函数入口都没有被捕捉的情况。</p>\r\n<p>　　要使用set_exception_handler()函数，必须声明一个接收一个参数的函数。然后，将这个函数的名称作为一个字符串传递给set_exception_handler()函数。然而，必须在调用set_exception_handler()函数之前声明这个函数。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">function exceptionLogger($exception){\r\n    $file = \'./exceptionLog.log\';\r\n    file_put_contents($file,$exception->__toString(),FILE_APPEND);\r\n}\r\n\r\nset_exception_handler(\'exceptionLogger\');\r\n</pre>\r\n</div>\r\n<p>　　现在，因为已经重写了默认的异常处理程序，所以应用程序中未捕捉的异常会被记录到日志中而不会显示在屏幕上。</p>\r\n<h3>　　异常产生的开销</h3>\r\n<p>　　虽然；异常机制的功能非常强大，但使用它要付出代价，在PHP中，当抛出一个异常时，许多机制必须被初始化，其中包括异常类实例和代码回溯信息。如果异常日志记录到文件中，就会增加更多的花销。异常的强大功能使得我们很容易过分地使用它。</p>\r\n<p>　　我们不应该使用异常来控制一般的应用程序流，只是因为这样做会大大降低应用程序的性能。例如，在数据库中搜索登录标识并且没有找到对应用户时，就不应该使用它。在这种情况下，应该只返回null或者false来表示失败信息。只是从PHP函数中返回混合结果的标准方法：有效的结果表示返回的数据，而false或者null表示发生错误。换句话说，在PHP函数没有找到希望查找的结果时，通常应该返回null或者false，而不是具体的值。</p>\r\n<h3>　　错误代码</h3>\r\n<p>　　之前提到过，你也希望使用错误代码来控制判断条件。然而，当应用程序的规模越来越大时，你将希望集中存放错误信息中的字符串，以便能够轻松地更新它们，甚至将它们翻译成别的文字。</p>\r\n<p>　　有很多方法可以做到这一点，但是它们有一个共同的特点，即将错误的代码映射到字符串上。你还可以创建一个从Exception类派生的子类，以便可以更加容易地处理具有错误代码的异常。</p>\r\n<p> </p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">class DatabaseException extends Exception{\r\n\r\n    const ConnectFailed = 1;\r\n    const LoginFailed = 2;\r\n    const PermissionDenied = 3;\r\n\r\n    public function __construct($code = 0){\r\n\r\n        switch($code){\r\n            case DatabaseException::ConnectFailed:\r\n                $message = \'Database connection failed\';\r\n                break;\r\n            case DatabaseException::LoginFailed:\r\n                $message = \'Login to the database was rejected\';\r\n                break;\r\n            case DatabaseException::PermissionDenied:\r\n                $message = \'Permission denied\';\r\n                break;\r\n            default;\r\n                $message = \'Unknown Error\';\r\n        }\r\n        parent::__construct($message,$code);\r\n    }\r\n}\r\n\r\ntry{\r\n    $config = [\r\n        \'host\' => \'127.0.0.1\',\r\n        \'port\' => 306,\r\n        \'user\' => \'root\',\r\n        \'password\' => \'root\',\r\n        \'database\' => \'deruimu11\'\r\n    ];\r\n    if(!$conn = @mysqli_connect($config[\'host\'],$config[\'user\'],$config[\'password\'],$config[\'database\'],empty($config[\'port\']) ? \'\' : $config[\'port\'])){\r\n        throw new DatabaseException(DatabaseException::ConnectFailed);\r\n    }\r\n}catch(DatabaseException $e){\r\n    echo $e->getMessage();\r\n}\r\n</pre>\r\n</div>\r\n<p>　　使用这个自定义异常，所有的错误信息字符串都会被集中到一个地方。这样就可以方便地更新数据库连接错误信息，而不需要在大量的代码中查找它。</p>\r\n<h3>　　类型提示和异常</h3>\r\n<p>　　在处理自定异常时，类型提示尤其的重要。通过使用类型提示和多个catch语句块，能够在捕捉其他错误之前捕捉某个特定类型的错误。</p>\r\n<p>　　我们在之前讲到过，catch语句块允许指定要捕捉的异常类型，并且还可以有多个catch语句块。</p>\r\n<div class=\"cnblogs_Highlighter\">\r\n<pre class=\"brush:php;gutter:true;\">class firstException extends Exception{\r\n\r\n}\r\n\r\nclass secondException extends Exception{\r\n\r\n}\r\n\r\ntry{\r\n    //抛出异常的代码\r\n}catch(firstException $e){\r\n    //处理抛出的异常类型是firstException的情况\r\n}catch(secondException $e){\r\n    //处理抛出的异常类型是secondException的情况\r\n}catch(Exception $e){\r\n    //处理所有其他的异常类型\r\n}</pre>\r\n</div>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/15/9482168.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('31', '0', 'require和require_once经济性能对比', '', '', '', '<p>require和require_once都是PHP函数，开发人员可以使用它们在某个特定的脚本中导入外部PHP文件。你可以根据应用程序的复杂度调用一次或若干次require_once/require。<strong><span style=\"color: #ff0000;\">使用require（而不是require_once）可以提高应用程序的性能</span></strong>。</p>\r\n<p><strong>测试前准备：</strong></p>\r\n<p>创建4个空的类来模拟主脚本要使用的外部PHP文件脚本。</p>\r\n<p>ClassA.php：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> ClassA\r\n{\r\n\r\n}</span></pre>\r\n</div>\r\n<p>ClassB.php：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> ClassB\r\n{\r\n\r\n}</span></pre>\r\n</div>\r\n<p>ClassC.php：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> ClassC\r\n{\r\n\r\n}</span></pre>\r\n</div>\r\n<p>ClassD.php：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> ClassD\r\n{\r\n\r\n}</span></pre>\r\n</div>\r\n<p><strong>使用require_once导入外部文件：</strong></p>\r\n<p>index.php：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">require_once</span> \'./ClassA.php\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #0000ff;\">require_once</span> \'./ClassB.php\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #0000ff;\">require_once</span> \'./ClassC.php\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #0000ff;\">require_once</span> \'./ClassD.php\'<span style=\"color: #000000;\">;\r\n\r\n</span><span style=\"color: #0000ff;\">echo</span> \"Only testing require_once\";</pre>\r\n</div>\r\n<p>重启服务器，使用ab压力测试工具模拟10000个请求，同一时间有5个并发请求。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>ab.exe -c 5 -n 10000 http:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">www.demo.com/optimization/index.php</span></pre>\r\n</div>\r\n<p>测试结果：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>D:\\phpStudy\\Apache\\bin>ab.exe -c 5 -n 10000 http:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">www.demo.com/optimization/index.php</span>\r\nThis is ApacheBench, Version 2.3 <<span style=\"color: #800080;\">$Revision</span>: 1748469 $><span style=\"color: #000000;\">\r\nCopyright </span>1996 Adam Twiss, Zeus Technology Ltd, http:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">www.zeustech.net/</span>\r\nLicensed to The Apache Software Foundation, http:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">www.apache.org/</span>\r\n<span style=\"color: #000000;\">\r\nBenchmarking www</span>.demo.<span style=\"color: #000000;\">com (be patient)\r\nCompleted </span>1000<span style=\"color: #000000;\"> requests\r\nCompleted </span>2000<span style=\"color: #000000;\"> requests\r\nCompleted </span>3000<span style=\"color: #000000;\"> requests\r\nCompleted </span>4000<span style=\"color: #000000;\"> requests\r\nCompleted </span>5000<span style=\"color: #000000;\"> requests\r\nCompleted </span>6000<span style=\"color: #000000;\"> requests\r\nCompleted </span>7000<span style=\"color: #000000;\"> requests\r\nCompleted </span>8000<span style=\"color: #000000;\"> requests\r\nCompleted </span>9000<span style=\"color: #000000;\"> requests\r\nCompleted </span>10000<span style=\"color: #000000;\"> requests\r\nFinished </span>10000<span style=\"color: #000000;\"> requests\r\n\r\n\r\nServer Software</span>:        Apache/2.4.23<span style=\"color: #000000;\">\r\nServer Hostname</span>:        www.demo.<span style=\"color: #000000;\">com\r\nServer Port</span>:            80<span style=\"color: #000000;\">\r\n\r\nDocument Path</span>:          /optimization/index.<span style=\"color: #000000;\">php\r\nDocument Length</span>:        25<span style=\"color: #000000;\"> bytes\r\n\r\nConcurrency Level</span>:      5\r\n<span style=\"color: #008080;\">Time</span> taken <span style=\"color: #0000ff;\">for</span> tests:   17.446<span style=\"color: #000000;\"> seconds\r\nComplete requests</span>:      10000<span style=\"color: #000000;\">\r\nFailed requests</span>:        0<span style=\"color: #000000;\">\r\nTotal transferred</span>:      2280000<span style=\"color: #000000;\"> bytes\r\nHTML transferred</span>:       250000<span style=\"color: #000000;\"> bytes\r\nRequests per second</span>:    573.20 [<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">/sec] (mean)</span>\r\n<span style=\"color: #008080;\">Time</span> per request:       8.723<span style=\"color: #000000;\"> [ms] (mean)\r\n</span><span style=\"color: #008080;\">Time</span> per request:       1.745 [ms] (mean,<span style=\"color: #000000;\"> across all concurrent requests)\r\nTransfer rate</span>:          127.63 [Kbytes/<span style=\"color: #000000;\">sec] received\r\n\r\nConnection Times (ms)\r\n              </span><span style=\"color: #008080;\">min</span>  mean[+/-sd] median   <span style=\"color: #008080;\">max</span><span style=\"color: #000000;\">\r\nConnect</span>:        0    0   0.4      0       2<span style=\"color: #000000;\">\r\nProcessing</span>:     2    8  90.4      4    2503<span style=\"color: #000000;\">\r\nWaiting</span>:        1    7  90.5      3    2503<span style=\"color: #000000;\">\r\nTotal</span>:          2    8  90.4      4    2504<span style=\"color: #000000;\">\r\n\r\nPercentage of the requests served within a certain </span><span style=\"color: #008080;\">time</span><span style=\"color: #000000;\"> (ms)\r\n  </span>50%      4\r\n  66%      5\r\n  75%      5\r\n  80%      5\r\n  90%      5\r\n  95%      5\r\n  98%      6\r\n  99%      6\r\n 100%   2504 (longest request)</pre>\r\n</div>\r\n<p><span style=\"color: #ff0000;\">使用ab工具测试require_once，可以看到相应时间是8.723ms，该脚本每秒支持573.20个请求。</span></p>\r\n<p> </p>\r\n<p><strong>使用require导入外部文件：</strong></p>\r\n<p>index_1.php：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">require</span> \'./ClassA.php\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #0000ff;\">require</span> \'./ClassB.php\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #0000ff;\">require</span> \'./ClassC.php\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #0000ff;\">require</span> \'./ClassD.php\'<span style=\"color: #000000;\">;\r\n\r\n</span><span style=\"color: #0000ff;\">echo</span> \"Only testing require\";</pre>\r\n</div>\r\n<p>重启服务器，使用ab压力测试工具模拟10000个请求，同一时间有5个并发请求。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>ab.exe -c 5 -n 10000 http:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">www.demo.com/optimization/index_1.php</span></pre>\r\n</div>\r\n<p>测试结果：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>D:\\phpStudy\\Apache\\bin>ab.exe -c 5 -n 10000 http:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">www.demo.com/optimization/index_1.php</span>\r\nThis is ApacheBench, Version 2.3 <<span style=\"color: #800080;\">$Revision</span>: 1748469 $><span style=\"color: #000000;\">\r\nCopyright </span>1996 Adam Twiss, Zeus Technology Ltd, http:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">www.zeustech.net/</span>\r\nLicensed to The Apache Software Foundation, http:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">www.apache.org/</span>\r\n<span style=\"color: #000000;\">\r\nBenchmarking www</span>.demo.<span style=\"color: #000000;\">com (be patient)\r\nCompleted </span>1000<span style=\"color: #000000;\"> requests\r\nCompleted </span>2000<span style=\"color: #000000;\"> requests\r\nCompleted </span>3000<span style=\"color: #000000;\"> requests\r\nCompleted </span>4000<span style=\"color: #000000;\"> requests\r\nCompleted </span>5000<span style=\"color: #000000;\"> requests\r\nCompleted </span>6000<span style=\"color: #000000;\"> requests\r\nCompleted </span>7000<span style=\"color: #000000;\"> requests\r\nCompleted </span>8000<span style=\"color: #000000;\"> requests\r\nCompleted </span>9000<span style=\"color: #000000;\"> requests\r\nCompleted </span>10000<span style=\"color: #000000;\"> requests\r\nFinished </span>10000<span style=\"color: #000000;\"> requests\r\n\r\n\r\nServer Software</span>:        Apache/2.4.23<span style=\"color: #000000;\">\r\nServer Hostname</span>:        www.demo.<span style=\"color: #000000;\">com\r\nServer Port</span>:            80<span style=\"color: #000000;\">\r\n\r\nDocument Path</span>:          /optimization/index_1.<span style=\"color: #000000;\">php\r\nDocument Length</span>:        20<span style=\"color: #000000;\"> bytes\r\n\r\nConcurrency Level</span>:      5\r\n<span style=\"color: #008080;\">Time</span> taken <span style=\"color: #0000ff;\">for</span> tests:   17.207<span style=\"color: #000000;\"> seconds\r\nComplete requests</span>:      10000<span style=\"color: #000000;\">\r\nFailed requests</span>:        0<span style=\"color: #000000;\">\r\nTotal transferred</span>:      2230000<span style=\"color: #000000;\"> bytes\r\nHTML transferred</span>:       200000<span style=\"color: #000000;\"> bytes\r\nRequests per second</span>:    581.16 [<span style=\"color: #008000;\">#</span><span style=\"color: #008000;\">/sec] (mean)</span>\r\n<span style=\"color: #008080;\">Time</span> per request:       8.604<span style=\"color: #000000;\"> [ms] (mean)\r\n</span><span style=\"color: #008080;\">Time</span> per request:       1.721 [ms] (mean,<span style=\"color: #000000;\"> across all concurrent requests)\r\nTransfer rate</span>:          126.56 [Kbytes/<span style=\"color: #000000;\">sec] received\r\n\r\nConnection Times (ms)\r\n              </span><span style=\"color: #008080;\">min</span>  mean[+/-sd] median   <span style=\"color: #008080;\">max</span><span style=\"color: #000000;\">\r\nConnect</span>:        0    0   0.4      0      21<span style=\"color: #000000;\">\r\nProcessing</span>:     1    8  86.5      4    2320<span style=\"color: #000000;\">\r\nWaiting</span>:        1    7  86.5      3    2320<span style=\"color: #000000;\">\r\nTotal</span>:          1    8  86.5      4    2320<span style=\"color: #000000;\">\r\n\r\nPercentage of the requests served within a certain </span><span style=\"color: #008080;\">time</span><span style=\"color: #000000;\"> (ms)\r\n  </span>50%      4\r\n  66%      5\r\n  75%      5\r\n  80%      5\r\n  90%      5\r\n  95%      6\r\n  98%      7\r\n  99%      7\r\n 100%   2320<span style=\"color: #000000;\"> (longest request)\r\n\r\nD</span>:\\phpStudy\\Apache\\bin>ab.exe -c 5 -n 10000 http:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">www.demo.com/optimization/index_1.php</span>\r\nThis is ApacheBench, Version 2.3 <<span style=\"color: #800080;\">$Revision</span>: 1748469 $><span style=\"color: #000000;\">\r\nCopyright </span>1996 Adam Twiss, Zeus Technology Ltd, http:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">www.zeustech.net/</span>\r\nLicensed to The Apache Software Foundation, http:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">www.apache.org/</span>\r\n<span style=\"color: #000000;\">\r\nBenchmarking www</span>.demo.<span style=\"color: #000000;\">com (be patient)\r\nCompleted </span>1000<span style=\"color: #000000;\"> requests\r\nCompleted </span>2000<span style=\"color: #000000;\"> requests\r\nCompleted </span>3000<span style=\"color: #000000;\"> requests\r\nCompleted </span>4000<span style=\"color: #000000;\"> requests\r\nCompleted </span>5000<span style=\"color: #000000;\"> requests\r\nCompleted </span>6000<span style=\"color: #000000;\"> requests\r\nCompleted </span>7000<span style=\"color: #000000;\"> requests\r\nCompleted </span>8000<span style=\"color: #000000;\"> requests\r\nCompleted </span>9000<span style=\"color: #000000;\"> requests\r\nCompleted </span>10000<span style=\"color: #000000;\"> requests\r\nFinished </span>10000 requests</pre>\r\n</div>\r\n<p><span style=\"color: #ff0000;\">使用ab工具测试require，可以看到相应时间是8.604ms，该脚本每秒支持581.16个请求。</span></p>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/08/9444085.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('32', '0', 'Linux中Nginx安装部署', '', '', '', '<p><strong>前言</strong></p>\r\n<p><span lang=\"EN-US\"><span style=\"font-family: Calibri;\">　　Nginx (\"engine x\") </span>是一个高性能的<span lang=\"EN-US\"><span style=\"font-family: Calibri;\"> HTTP </span>和<span style=\"font-family: Calibri;\"> </span>反向代理<span style=\"font-family: Calibri;\"> </span>服务器，也是一个<span lang=\"EN-US\"><span style=\"font-family: Calibri;\"> IMAP/POP3/SMTP </span>代理服务器。<span lang=\"EN-US\"><span style=\"font-family: Calibri;\"> Nginx </span>是由<span lang=\"EN-US\"><span style=\"font-family: Calibri;\"> Igor Sysoev </span>为俄罗斯访问量第二的<span lang=\"EN-US\"><span style=\"font-family: Calibri;\"> Rambler.ru </span>站点开发的，第一个公开版本<span lang=\"EN-US\"><span style=\"font-family: Calibri;\">0.1.0</span>发布于<span lang=\"EN-US\"><span style=\"font-family: Calibri;\">2004</span>年<span lang=\"EN-US\"><span style=\"font-family: Calibri;\">10</span>月<span lang=\"EN-US\"><span style=\"font-family: Calibri;\">4</span>日。其将源代码以类<span lang=\"EN-US\"><span style=\"font-family: Calibri;\">BSD</span>许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。</span></span></span></span></span></span></span></span></span></span></span></p>\r\n<p>　　Nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。</p>\r\n<p><strong>1、Nginx安装</strong></p>\r\n<p>　　nginx依赖一下模块</p>\r\n<p>　　a、gzip模块需要&nbsp;zlib 库</p>\r\n<p>　　b、&nbsp;rewrite模块需要&nbsp;pcre 库</p>\r\n<p>　　c、ssl 功能需要openssl库</p>\r\n<p>　　确保进行了安装了linux常用必备支持库。检查是否安装了g++、gcc。rpm -qa | grep gcc 之后需要出现3个包如下图所示。如果没有出现。需要安装g++、gcc。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost zlib-<span style=\"color: #800080;\">1.2</span>.<span style=\"color: #800080;\">11</span>]# yum install gcc-c++</pre>\r\n</div>\r\n<p>1.1、安装zlib</p>\r\n<p>　　<span lang=\"EN-US\"> 1.1.1、获取<span lang=\"EN-US\">zlib编译安装包，在<span lang=\"EN-US\"><a href=\"http://www.zlib.net/\">http://www.zlib.net/</a>上可以获取当前最新的版本。</span></span></span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost src]# wget www.zlib.net/zlib-<span style=\"color: #800080;\">1.2</span>.<span style=\"color: #800080;\">11</span>.tar.gz</pre>\r\n</div>\r\n<p>　　1.1.2、解压zlib-1.2.11.tar.gz到/usr/local/</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost src]# tar xvf zlib-<span style=\"color: #800080;\">1.2</span>.<span style=\"color: #800080;\">11</span>.tar.gz -C /usr/local/</pre>\r\n</div>\r\n<p>　　1.1.3、进入解压缩目录，执行<span lang=\"EN-US\">./configure</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost zlib-<span style=\"color: #800080;\">1.2</span>.<span style=\"color: #800080;\">11</span>]# ./configure</pre>\r\n</div>\r\n<p>　　1.1.4、编译</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost zlib-<span style=\"color: #800080;\">1.2</span>.<span style=\"color: #800080;\">11</span>]# make</pre>\r\n</div>\r\n<p>　　1.1.5、安装</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost zlib-<span style=\"color: #800080;\">1.2</span>.<span style=\"color: #800080;\">11</span>]# make install</pre>\r\n</div>\r\n<p> 1.2、安装openssl</p>\r\n<p>　　1.2.1、获取<span lang=\"EN-US\">openssl编译安装包，在<span lang=\"EN-US\"><a href=\"http://www.openssl.org/source/\">http://www.openssl.org/source/</a>上可以获取当前最新的版本。</span></span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost src]# wget www.openssl.org/source/openssl-<span style=\"color: #800080;\">1.1</span>.<span style=\"color: #800080;\">1</span>-pre8.tar.gz</pre>\r\n</div>\r\n<p><span lang=\"EN-US\"><span lang=\"EN-US\">　　1.2.2、解压</span></span>openssl-1.1.1-pre8.tar.gz到/usr/local/</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost src]# tar xvf openssl-<span style=\"color: #800080;\">1.1</span>.<span style=\"color: #800080;\">1</span>-pre8.tar.gz -C /usr/local/</pre>\r\n</div>\r\n<p><span lang=\"EN-US\"><span lang=\"EN-US\">　　1.2.3、进入解压缩目录，执行<span lang=\"EN-US\">./config</span></span></span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost openssl-<span style=\"color: #800080;\">1.1</span>.<span style=\"color: #800080;\">1</span>-pre8]# ./config</pre>\r\n</div>\r\n<p><span lang=\"EN-US\"><span lang=\"EN-US\">　　1.2.4、编译</span></span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost openssl-<span style=\"color: #800080;\">1.1</span>.<span style=\"color: #800080;\">1</span>-pre8]# make</pre>\r\n</div>\r\n<p><span lang=\"EN-US\"><span lang=\"EN-US\">　　1.2.5、安装</span></span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost openssl-<span style=\"color: #800080;\">1.1</span>.<span style=\"color: #800080;\">1</span>-pre8]# make install</pre>\r\n</div>\r\n<p> 1.3、安装pcre </p>\r\n<p>　　1.3.1、获取<span lang=\"EN-US\">pcre编译安装包，在<span lang=\"EN-US\"><a href=\"http://www.pcre.org/\">http://www.pcre.org/</a>上可以获取当前最新的版本</span></span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost src]# wget ftp.pcre.org/pub/pcre/pcre-<span style=\"color: #800080;\">8.42</span>.tar.gz</pre>\r\n</div>\r\n<p>　　1.3.2、解压pcre-8.42.tar.gz到/usr/local/</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost src]# tar xvf pcre-<span style=\"color: #800080;\">8.42</span>.tar.gz -C /usr/local/</pre>\r\n</div>\r\n<p>　　1.3.3、进入解压缩目录，执行<span lang=\"EN-US\">./</span>configure</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost pcre-<span style=\"color: #800080;\">8.42</span>]# ./configure</pre>\r\n</div>\r\n<p>　　1.3.4、编译</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost pcre-<span style=\"color: #800080;\">8.42</span>]# make</pre>\r\n</div>\r\n<p>　　1.3.5、安装</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost pcre-<span style=\"color: #800080;\">8.42</span>]# make install</pre>\r\n</div>\r\n<p> 1.4、安装Nginx</p>\r\n<p>　　1.4.1、获取<span lang=\"EN-US\">nginx，在<span lang=\"EN-US\"><a href=\"http://nginx.org/en/download.html\" target=\"_blank\">http://nginx.org/en/download.html</a>上可以获取当前最新的版本。</span></span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost src]# wget nginx.org/download/nginx-<span style=\"color: #800080;\">1.14</span>.<span style=\"color: #800080;\">0</span>.tar.gz</pre>\r\n</div>\r\n<p>　　1.4.2、解压nginx-1.14.0.tar.gz到/usr/local/</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost src]# tar xvf nginx-<span style=\"color: #800080;\">1.14</span>.<span style=\"color: #800080;\">0</span>.tar.gz -C /usr/local/</pre>\r\n</div>\r\n<p>　　1.4.3、进入解压缩目录，执行<span lang=\"EN-US\">./configure</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost nginx-<span style=\"color: #800080;\">1.14</span>.<span style=\"color: #800080;\">0</span>]# ./configure --prefix=/usr/local/nginx --with-pcre=/usr/local/pcre-<span style=\"color: #800080;\">8.42</span>/ --with-zlib=/usr/local/zlib-<span style=\"color: #800080;\">1.2</span>.<span style=\"color: #800080;\">11</span>/</pre>\r\n</div>\r\n<p>　　1.4.4、编译</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost nginx-<span style=\"color: #800080;\">1.14</span>.<span style=\"color: #800080;\">0</span>]# make</pre>\r\n</div>\r\n<p>　　1.4.5、安装</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost nginx-<span style=\"color: #800080;\">1.14</span>.<span style=\"color: #800080;\">0</span>]# make install</pre>\r\n</div>\r\n<p>1.5、启动</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost sbin]# ./nginx</pre>\r\n</div>\r\n<p>　　启动<span lang=\"EN-US\">nginx之后，浏览器中输入<span lang=\"EN-US\">http://localhost可以验证是否安装启动成功。</span></span></p>\r\n<p><span lang=\"EN-US\"><span lang=\"EN-US\"><img src=\"https://images2018.cnblogs.com/blog/854257/201808/854257-20180803164240898-2117092847.png\" alt=\"\" /></span></span></p>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/03/9414338.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('33', '0', 'MySQL数据库的主从同步复制配置', '', '', '', '<p><span style=\"font-size: 1.17em;\">一、主从同步机制原理</span></p>\r\n<p>　　MYSQL主从同步是在MySQL主从复制(Master-Slave Replication)基础上实现的，通过设置在Master MySQL上的binlog(使其处于打开状态)，Slave MySQL上通过一个I/O线程从Master MySQL上读取binlog，然后传输到Slave MySQL的中继日志中，然后Slave MySQL的SQL线程从中继日志中读取中继日志，然后应用到Slave MySQL的数据库中。这样实现了主从数据同步功能。</p>\r\n<p>　　主服务器将更新写入二进制日志文件，并维护文件的一个索引以跟踪日志循环。这些日志可以记录发送到从服务器的更新.当一个从服务器连接主服务器时，它通知主服务器从服务器在日志中读取的最后一次成功更新的位置。从服务器接收从那时起发生的任何更新，然后封锁并等待主服务器通知新的更新。</p>\r\n<p>二、主从同步复制的作用</p>\r\n<p>　　1、主数据库出现问题，可以切换到从数据库。</p>\r\n<p>　　2、可以进行数据库层面的读写分离，</p>\r\n<p>　　3、可以在从数据库上进行日常备份</p>\r\n<p>三、主从同步复制过程</p>\r\n<p><strong><img src=\"https://images2018.cnblogs.com/blog/854257/201808/854257-20180803103158300-2049411221.png\" alt=\"\" /></strong></p>\r\n<p>　　Binary log：主数据库的二进制日志</p>\r\n<p>　　Relay log：从服务器的中继日志</p>\r\n<p><strong>　　</strong>第一步：master在每个事务更新数据完成之前，将该操作记录串行地写入到binlog文件中。</p>\r\n<p><strong>　　</strong>第二步：salve开启一个I/O Thread，该线程在master打开一个普通连接，主要工作是binlog dump process。如果读取的进度已经跟上了master，就进入睡眠状态并等待master产生新的事件。I/O线程最终的目的是将这些事件写入到中继日志中。</p>\r\n<p><strong>　　</strong>第三步：SQL Thread会读取中继日志，并顺序执行该日志中的SQL事件，从而与主数据库中的数据保持一致。</p>\r\n<p>四、服务器准备</p>\r\n<p>　　Master(主)            IP：10.0.30. 131　　server_id：131</p>\r\n<p>　　Slave(从)             IP：192.168.2.102　　server_id：102</p>\r\n<p>　　Slave(从)             IP：192.168.2.103　　server_id：103</p>\r\n<p>五、主从同步复制具体操作</p>\r\n<p>　　主数据库master修改：</p>\r\n<p>　　1、修改主服务器数据库配置文件</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>server_id=<span style=\"color: #800080;\">131</span><span style=\"color: #000000;\">\r\nlog</span>-bin=mysql-bin</pre>\r\n</div>\r\n<p>　　2、主服务器上为服务器设置一个连接账户并授予REPLICATION SLAVE权限。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql> grant replication slave on *.* to <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">repl</span><span style=\"color: #800000;\">\'</span>@<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">%</span><span style=\"color: #800000;\">\'</span> identified by <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">;\r\nQuery OK, </span><span style=\"color: #800080;\">0</span> rows affected (<span style=\"color: #800080;\">0.01</span><span style=\"color: #000000;\"> sec)\r\nmysql</span>><span style=\"color: #000000;\"> flush privileges;\r\nQuery OK, </span><span style=\"color: #800080;\">0</span> rows affected (<span style=\"color: #800080;\">0.01</span> sec)</pre>\r\n</div>\r\n<p>　　3、查询master的状态</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql><span style=\"color: #000000;\"> show master status;\r\n</span>+------------------+----------+--------------+------------------+\r\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n+------------------+----------+--------------+------------------+\r\n| mysql-bin.<span style=\"color: #800080;\">000001</span> |      <span style=\"color: #800080;\">107</span> |              |                  |\r\n+------------------+----------+--------------+------------------+\r\n<span style=\"color: #800080;\">1</span> row <span style=\"color: #0000ff;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800080;\">0.00</span> sec)</pre>\r\n</div>\r\n<p> 　　从数据库slave修改：</p>\r\n<p>　　1、修改从数据库配置文件　　</p>\r\n<p>　　　服务器：192.168.2.102</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>server-id=<span style=\"color: #800080;\">102</span><span style=\"color: #000000;\">\r\nlog</span>-bin=mysql-bin</pre>\r\n</div>\r\n<p>　　服务器：192.168.2.103</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>server-id=<span style=\"color: #800080;\">103</span><span style=\"color: #000000;\">\r\nlog</span>-bin=mysql-bin</pre>\r\n</div>\r\n<p>　　2、执行同步命令</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql> change master to master_host=<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">10.0.30.131</span><span style=\"color: #800000;\">\'</span>,master_user=<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">repl</span><span style=\"color: #800000;\">\'</span>,master_password=<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\'</span>,master_log_file=<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">mysql-bin.000001</span><span style=\"color: #800000;\">\'</span>,master_log_pos=<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\nQuery OK, </span><span style=\"color: #800080;\">0</span> rows affected, <span style=\"color: #800080;\">2</span> warnings (<span style=\"color: #800080;\">0.03</span><span style=\"color: #000000;\"> sec)\r\nmysql</span>><span style=\"color: #000000;\"> start slave;\r\nQuery OK, </span><span style=\"color: #800080;\">0</span> rows affected (<span style=\"color: #800080;\">0.00</span> sec)</pre>\r\n</div>\r\n<p>　　3、查看从数据库的状态</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql><span style=\"color: #000000;\"> show slave status\\G\r\n</span>*************************** <span style=\"color: #800080;\">1</span>. row ***************************<span style=\"color: #000000;\">\r\n               Slave_IO_State: Waiting </span><span style=\"color: #0000ff;\">for</span> master to send <span style=\"color: #0000ff;\">event</span><span style=\"color: #000000;\">\r\n                  Master_Host: </span><span style=\"color: #800080;\">10.0</span>.<span style=\"color: #800080;\">30.131</span><span style=\"color: #000000;\">\r\n                  Master_User: repl\r\n                  Master_Port: </span><span style=\"color: #800080;\">3306</span><span style=\"color: #000000;\">\r\n                Connect_Retry: </span><span style=\"color: #800080;\">60</span><span style=\"color: #000000;\">\r\n              Master_Log_File: mysql</span>-bin.<span style=\"color: #800080;\">000001</span><span style=\"color: #000000;\">\r\n          Read_Master_Log_Pos: </span><span style=\"color: #800080;\">107</span><span style=\"color: #000000;\">\r\n               Relay_Log_File: localhost</span>-relay-bin.<span style=\"color: #800080;\">000002</span><span style=\"color: #000000;\">\r\n                Relay_Log_Pos: </span><span style=\"color: #800080;\">304</span><span style=\"color: #000000;\">\r\n        Relay_Master_Log_File: mysql</span>-bin.<span style=\"color: #800080;\">000001</span><span style=\"color: #000000;\">\r\n             Slave_IO_Running: Yes\r\n            Slave_SQL_Running: Yes\r\n              Replicate_Do_DB: \r\n          Replicate_Ignore_DB: \r\n           Replicate_Do_Table: \r\n       Replicate_Ignore_Table: \r\n      Replicate_Wild_Do_Table: \r\n  Replicate_Wild_Ignore_Table: \r\n                   Last_Errno: </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n                   Last_Error: \r\n                 Skip_Counter: </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n          Exec_Master_Log_Pos: </span><span style=\"color: #800080;\">107</span><span style=\"color: #000000;\">\r\n              Relay_Log_Space: </span><span style=\"color: #800080;\">515</span><span style=\"color: #000000;\">\r\n              Until_Condition: None\r\n               Until_Log_File: \r\n                Until_Log_Pos: </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n           Master_SSL_Allowed: No\r\n           Master_SSL_CA_File: \r\n           Master_SSL_CA_Path: \r\n              Master_SSL_Cert: \r\n            Master_SSL_Cipher: \r\n               Master_SSL_Key: \r\n        Seconds_Behind_Master: </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\nMaster_SSL_Verify_Server_Cert: No\r\n                Last_IO_Errno: </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n                Last_IO_Error: \r\n               Last_SQL_Errno: </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n               Last_SQL_Error: \r\n  Replicate_Ignore_Server_Ids: \r\n             Master_Server_Id: </span><span style=\"color: #800080;\">131</span><span style=\"color: #000000;\">\r\n                  Master_UUID: \r\n             Master_Info_File: </span>/usr/local/mysql/data/<span style=\"color: #000000;\">master.info\r\n                    SQL_Delay: </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n          SQL_Remaining_Delay: NULL\r\n      Slave_SQL_Running_State: Slave has read all relay log; waiting </span><span style=\"color: #0000ff;\">for</span><span style=\"color: #000000;\"> more updates\r\n           Master_Retry_Count: </span><span style=\"color: #800080;\">86400</span><span style=\"color: #000000;\">\r\n                  Master_Bind: \r\n      Last_IO_Error_Timestamp: \r\n     Last_SQL_Error_Timestamp: \r\n               Master_SSL_Crl: \r\n           Master_SSL_Crlpath: \r\n           Retrieved_Gtid_Set: \r\n            Executed_Gtid_Set: \r\n                Auto_Position: </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n         Replicate_Rewrite_DB: \r\n                 Channel_Name: \r\n           Master_TLS_Version: \r\n</span><span style=\"color: #800080;\">1</span> row <span style=\"color: #0000ff;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800080;\">0.00</span> sec)</pre>\r\n</div>\r\n<p> 　　注：Slave_IO_Running及Slave_SQL_Running进程必须正常运行，即YES状态，否则说明同步失败。</p>\r\n<p>　　如果都是正确的，则说明配置成功！</p>\r\n<p>　　以上就是我们给大家整理的关于MySQL数据库的主从同步复制配置的全部内容，希望能够帮助到你。</p>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/03/9412440.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('34', '0', 'Linux下Mysql的安装步骤', '', '', '', '<p><strong>（1）、下载安装包</strong></p>\r\n<p>https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.23-linux-glibc2.12-x86_64.tar</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost local]# wget https:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.23-linux-glibc2.12-x86_64.tar</span>\r\n--<span style=\"color: #800080;\">2018</span>-<span style=\"color: #800080;\">08</span>-<span style=\"color: #800080;\">02</span> <span style=\"color: #800080;\">18</span>:<span style=\"color: #800080;\">04</span>:<span style=\"color: #800080;\">25</span>--  https:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.23-linux-glibc2.12-x86_64.tar</span>\r\nResolving dev.mysql.com (dev.mysql.com)... <span style=\"color: #800080;\">137.254</span>.<span style=\"color: #800080;\">60.11</span><span style=\"color: #000000;\">\r\nConnecting to dev.mysql.com (dev.mysql.com)</span>|<span style=\"color: #800080;\">137.254</span>.<span style=\"color: #800080;\">60.11</span>|:<span style=\"color: #800080;\">443</span><span style=\"color: #000000;\">... connected.\r\nHTTP request sent, awaiting response... </span><span style=\"color: #800080;\">302</span><span style=\"color: #000000;\"> Found\r\nLocation: https:</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">cdn.mysql.com</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Downloads/MySQL-5.7/mysql-5.7.23-linux-glibc2.12-x86_64.tar [following]</span>\r\n--<span style=\"color: #800080;\">2018</span>-<span style=\"color: #800080;\">08</span>-<span style=\"color: #800080;\">02</span> <span style=\"color: #800080;\">18</span>:<span style=\"color: #800080;\">04</span>:<span style=\"color: #800080;\">27</span>--  https:<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">cdn.mysql.com</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Downloads/MySQL-5.7/mysql-5.7.23-linux-glibc2.12-x86_64.tar</span>\r\nResolving cdn.mysql.com (cdn.mysql.com)... <span style=\"color: #800080;\">23.36</span>.<span style=\"color: #800080;\">193.224</span><span style=\"color: #000000;\">\r\nConnecting to cdn.mysql.com (cdn.mysql.com)</span>|<span style=\"color: #800080;\">23.36</span>.<span style=\"color: #800080;\">193.224</span>|:<span style=\"color: #800080;\">443</span><span style=\"color: #000000;\">... connected.\r\nHTTP request sent, awaiting response... </span><span style=\"color: #800080;\">200</span><span style=\"color: #000000;\"> OK\r\nLength: </span><span style=\"color: #800080;\">673873920</span> (643M) [application/x-<span style=\"color: #000000;\">tar]\r\nSaving to: 鈥榤ysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-<span style=\"color: #000000;\">x86_64.tar鈥\r\n\r\n</span><span style=\"color: #800080;\">100</span>%[========================================================================>] <span style=\"color: #800080;\">673</span>,<span style=\"color: #800080;\">873</span>,<span style=\"color: #800080;\">920</span>  191KB/s   <span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> 53m 15s\r\n\r\n</span><span style=\"color: #800080;\">2018</span>-<span style=\"color: #800080;\">08</span>-<span style=\"color: #800080;\">02</span> <span style=\"color: #800080;\">18</span>:<span style=\"color: #800080;\">57</span>:<span style=\"color: #800080;\">42</span> (<span style=\"color: #800080;\">206</span> KB/s) - 鈥榤ysql-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-x86_64.tar鈥saved [<span style=\"color: #800080;\">673873920</span>/<span style=\"color: #800080;\">673873920</span><span style=\"color: #000000;\">]\r\n\r\n[root@localhost local]# ls\r\nbin  etc  games  include  lib  lib64  libexec  mysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-<span style=\"color: #000000;\">x86_64.tar  sbin  share  src\r\n[root@localhost local]# mv mysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-x86_64.tar src/</pre>\r\n</div>\r\n<p><strong>（2）、解压到/usr/local/下，重命名为mysql</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost src]# tar xvf mysql-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-x86_64.tar -C /usr/local/<span style=\"color: #000000;\">\r\nmysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-<span style=\"color: #000000;\">x86_64.tar.gz\r\nmysql</span>-test-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-<span style=\"color: #000000;\">x86_64.tar.gz\r\n[root@localhost src]# cd ..</span>/<span style=\"color: #000000;\">\r\n[root@localhost local]# ls\r\nbin    include  libexec                                          sbin\r\netc    lib      mysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-<span style=\"color: #000000;\">x86_64.tar.gz       share\r\ngames  lib64    mysql</span>-test-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-<span style=\"color: #000000;\">x86_64.tar.gz  src\r\n[root@localhost local]# tar xvf mysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-<span style=\"color: #000000;\">x86_64.tar.gz \r\nmysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-x86_64/bin/<span style=\"color: #000000;\">myisam_ftdump\r\nmysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-x86_64/bin/<span style=\"color: #000000;\">myisamchk\r\nmysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-x86_64/bin/<span style=\"color: #000000;\">myisamlog\r\nmysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-x86_64/bin/<span style=\"color: #000000;\">myisampack\r\n.\r\n.\r\n.\r\n[root@localhost local]# mv mysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-<span style=\"color: #000000;\">x86_64 mysql\r\n[root@localhost local]# ls\r\nbin games lib libexec mysql</span>-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-<span style=\"color: #000000;\">x86_64.tar.gz sbin src\r\netc include lib64 mysql mysql</span>-test-<span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span>-linux-glibc2.<span style=\"color: #800080;\">12</span>-x86_64.tar.gz share</pre>\r\n</div>\r\n<p><strong> （3）、在mysql下创建数据库文件目录</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost local]# mkdir mysql/data</pre>\r\n</div>\r\n<p><strong>（4）、创建mysql用户组和用户，并对mysql目录设置用户组和用户</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">[root@localhost local]# groupadd mysql\r\n[root@localhost local]# useradd mysql </span>-g mysql</pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost local]# cd mysql/<span style=\"color: #000000;\">\r\n[root@localhost mysql]# chown </span>-<span style=\"color: #000000;\">R mysql .\r\n[root@localhost mysql]# chgrp </span>-R mysql .</pre>\r\n</div>\r\n<p><strong>（5）、安装初始化</strong></p>\r\n<p>由于MySQL运行需要libaio库，所以需要运行以下命令进行安装</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">[root@localhost mysql]# yum install libaio\r\nLoaded plugins: fastestmirror\r\nLoading mirror speeds </span><span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> cached hostfile\r\n </span>* <span style=\"color: #0000ff;\">base</span><span style=\"color: #000000;\">: mirrors.cn99.com\r\n </span>*<span style=\"color: #000000;\"> extras: mirrors.shu.edu.cn\r\n </span>*<span style=\"color: #000000;\"> updates: mirrors.shu.edu.cn\r\nPackage libaio</span>-<span style=\"color: #800080;\">0.3</span>.<span style=\"color: #800080;\">109</span>-<span style=\"color: #800080;\">13</span><span style=\"color: #000000;\">.el7.x86_64 already installed and latest version\r\nNothing to </span><span style=\"color: #0000ff;\">do</span></pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost bin]# ./mysql_install_db --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/\r\n<span style=\"color: #800080;\">2018</span>-<span style=\"color: #800080;\">08</span>-<span style=\"color: #800080;\">02</span> <span style=\"color: #800080;\">19</span>:<span style=\"color: #800080;\">43</span>:<span style=\"color: #800080;\">41</span> [WARNING] mysql_install_db <span style=\"color: #0000ff;\">is</span> deprecated. Please consider switching to mysqld --<span style=\"color: #000000;\">initialize\r\n</span><span style=\"color: #800080;\">2018</span>-<span style=\"color: #800080;\">08</span>-<span style=\"color: #800080;\">02</span> <span style=\"color: #800080;\">19</span>:<span style=\"color: #800080;\">43</span>:<span style=\"color: #800080;\">45</span> [WARNING] The bootstrap log isn<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">t empty:</span>\r\n<span style=\"color: #800080;\">2018</span>-<span style=\"color: #800080;\">08</span>-<span style=\"color: #800080;\">02</span> <span style=\"color: #800080;\">19</span>:<span style=\"color: #800080;\">43</span>:<span style=\"color: #800080;\">45</span> [WARNING] <span style=\"color: #800080;\">2018</span>-<span style=\"color: #800080;\">08</span>-02T11:<span style=\"color: #800080;\">43</span>:<span style=\"color: #800080;\">41</span>.811985Z <span style=\"color: #800080;\">0</span> [Warning] --bootstrap <span style=\"color: #0000ff;\">is</span> deprecated. Please consider <span style=\"color: #0000ff;\">using</span> --<span style=\"color: #000000;\">initialize instead\r\n</span><span style=\"color: #800080;\">2018</span>-<span style=\"color: #800080;\">08</span>-02T11:<span style=\"color: #800080;\">43</span>:<span style=\"color: #800080;\">41</span>.819990Z <span style=\"color: #800080;\">0</span> [Warning] Changed limits: max_open_files: <span style=\"color: #800080;\">1024</span> (requested <span style=\"color: #800080;\">5000</span><span style=\"color: #000000;\">)\r\n</span><span style=\"color: #800080;\">2018</span>-<span style=\"color: #800080;\">08</span>-02T11:<span style=\"color: #800080;\">43</span>:<span style=\"color: #800080;\">41</span>.820064Z <span style=\"color: #800080;\">0</span> [Warning] Changed limits: table_open_cache: <span style=\"color: #800080;\">431</span> (requested <span style=\"color: #800080;\">2000</span>)</pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost support-files]# ./<span style=\"color: #000000;\">mysql.server start\r\nStarting MySQL.Logging to </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">/usr/local/mysql/data/localhost.localdomain.err</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">.\r\n SUCCESS</span>! </pre>\r\n</div>\r\n<p><strong>（6）、登录mysql</strong></p>\r\n<p>此版本最新版不许空密码登录，实际上有个初始化密码保存在/root/.mysql_secret这个文件里面，用这个密码第一次登录后，再修改密码。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost support-files]# cat /root/<span style=\"color: #000000;\">.mysql_secret \r\n# Password </span><span style=\"color: #0000ff;\">set</span> <span style=\"color: #0000ff;\">for</span> user <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">root@localhost</span><span style=\"color: #800000;\">\'</span> at <span style=\"color: #800080;\">2018</span>-<span style=\"color: #800080;\">08</span>-<span style=\"color: #800080;\">02</span> <span style=\"color: #800080;\">22</span>:<span style=\"color: #800080;\">49</span>:<span style=\"color: #800080;\">26</span><span style=\"color: #000000;\"> \r\nB#ipur,uyB</span>><span style=\"color: #000000;\">a\r\n[root@localhost support</span>-files]# mysql -uroot -<span style=\"color: #000000;\">p\r\n</span>-<span style=\"color: #000000;\">bash: mysql: command not found</span><span style=\"color: #000000;\">                 \r\n[root@localhost support</span>-files]# ln -s /usr/local/mysql/bin/mysql /usr/bin/<span style=\"color: #000000;\">mysql\r\n[root@localhost support</span>-files]# mysql -uroot -<span style=\"color: #000000;\">p\r\nEnter password: \r\nWelcome to the MySQL monitor. Commands end with ; or \\g.\r\nYour MySQL connection id </span><span style=\"color: #0000ff;\">is</span> <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">\r\nServer version: </span><span style=\"color: #800080;\">5.7</span>.<span style=\"color: #800080;\">23</span><span style=\"color: #000000;\">\r\n\r\nCopyright (c) </span><span style=\"color: #800080;\">2000</span>, <span style=\"color: #800080;\">2018</span>, Oracle and/<span style=\"color: #000000;\">or its affiliates. All rights reserved.\r\n\r\nOracle </span><span style=\"color: #0000ff;\">is</span> a registered trademark of Oracle Corporation and/<span style=\"color: #000000;\">or its\r\naffiliates. Other names may be trademarks of their respective\r\nowners.\r\n\r\nType </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">help;</span><span style=\"color: #800000;\">\'</span> or <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">\\h</span><span style=\"color: #800000;\">\'</span> <span style=\"color: #0000ff;\">for</span> help. Type <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">\\c</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\"> to clear the current input statement.\r\n\r\nmysql</span>></pre>\r\n</div>\r\n<p> 改mysql的root密码，新密码在此为\'123456\'</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql> <span style=\"color: #0000ff;\">set</span> password=password(<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">);\r\nQuery OK, </span><span style=\"color: #800080;\">0</span> rows affected, <span style=\"color: #800080;\">1</span> warning (<span style=\"color: #800080;\">0.00</span> sec)</pre>\r\n</div>\r\n<p><strong>（7）、复制配置文件</strong></p>\r\n<p>查看<code>support-files</code>文件夹的内容，发现并没有<code>my-default.cnf</code>默认的配置文件，如果没有默认的配置文件，需要手动创建一个<code>my-default.cnf</code>配置文件。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost support-files]# ls -<span style=\"color: #000000;\">la\r\ntotal </span><span style=\"color: #800080;\">24</span><span style=\"color: #000000;\">\r\ndrwxr</span>-xr-x.  <span style=\"color: #800080;\">2</span> mysql mysql    <span style=\"color: #800080;\">90</span> Aug  <span style=\"color: #800080;\">2</span> <span style=\"color: #800080;\">19</span>:<span style=\"color: #800080;\">27</span><span style=\"color: #000000;\"> .\r\ndrwxr</span>-xr-x. <span style=\"color: #800080;\">10</span> mysql mysql   <span style=\"color: #800080;\">141</span> Aug  <span style=\"color: #800080;\">2</span> <span style=\"color: #800080;\">19</span>:<span style=\"color: #800080;\">32</span><span style=\"color: #000000;\"> ..\r\n</span>-rw-r--r--.  <span style=\"color: #800080;\">1</span> mysql mysql   <span style=\"color: #800080;\">773</span> Jun  <span style=\"color: #800080;\">8</span> <span style=\"color: #800080;\">17</span>:<span style=\"color: #800080;\">56</span><span style=\"color: #000000;\"> magic\r\n</span>-rwxr-xr-x.  <span style=\"color: #800080;\">1</span> mysql mysql  <span style=\"color: #800080;\">1061</span> Jun  <span style=\"color: #800080;\">8</span> <span style=\"color: #800080;\">18</span>:<span style=\"color: #800080;\">55</span><span style=\"color: #000000;\"> mysqld_multi.server\r\n</span>-rwxr-xr-x.  <span style=\"color: #800080;\">1</span> mysql mysql   <span style=\"color: #800080;\">894</span> Jun  <span style=\"color: #800080;\">8</span> <span style=\"color: #800080;\">18</span>:<span style=\"color: #800080;\">55</span> mysql-log-<span style=\"color: #000000;\">rotate\r\n</span>-rwxr-xr-x.  <span style=\"color: #800080;\">1</span> mysql mysql <span style=\"color: #800080;\">10576</span> Jun  <span style=\"color: #800080;\">8</span> <span style=\"color: #800080;\">18</span>:<span style=\"color: #800080;\">55</span> mysql.server</pre>\r\n</div>\r\n<p>从网上找了一个配置文件，如下，上传到supp-files文件夹中，当然这个配置文件可以根据需要自行修改</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\"># For advice on how to change settings please see\r\n# http:</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span>\r\n# *** DO NOT EDIT THIS FILE. It<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">s a template which will be copied to the</span>\r\n# *** <span style=\"color: #0000ff;\">default</span> location during install, and will be replaced <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> you\r\n# </span>***<span style=\"color: #000000;\"> upgrade to a newer version of MySQL.\r\n\r\n[mysqld]\r\nbasedir </span>= /usr/local/<span style=\"color: #000000;\">mysql\r\ndatadir </span>= /usr/local/mysql/<span style=\"color: #000000;\">data\r\nport </span>= <span style=\"color: #800080;\">3306</span><span style=\"color: #000000;\">\r\nsocket </span>= /tmp/<span style=\"color: #000000;\">mysql.sock\r\nkey_buffer_size</span>=<span style=\"color: #000000;\">16M\r\nmax_allowed_packet</span>=<span style=\"color: #000000;\">8M\r\ncharacter</span>-<span style=\"color: #0000ff;\">set</span>-server=<span style=\"color: #000000;\">utf8\r\nback_log </span>= <span style=\"color: #800080;\">300</span><span style=\"color: #000000;\">\r\nmax_connections </span>= <span style=\"color: #800080;\">3000</span><span style=\"color: #000000;\">\r\nmax_connect_errors </span>= <span style=\"color: #800080;\">50</span><span style=\"color: #000000;\">\r\ntable_open_cache </span>= <span style=\"color: #800080;\">4096</span><span style=\"color: #000000;\">\r\n#binlog_cache_size </span>=<span style=\"color: #000000;\"> 4M\r\nmax_heap_table_size </span>=<span style=\"color: #000000;\"> 128M\r\nread_rnd_buffer_size </span>=<span style=\"color: #000000;\"> 16M\r\nsort_buffer_size </span>=<span style=\"color: #000000;\"> 16M\r\njoin_buffer_size </span>=<span style=\"color: #000000;\"> 16M\r\nthread_cache_size </span>= <span style=\"color: #800080;\">16</span><span style=\"color: #000000;\">\r\nquery_cache_size </span>=<span style=\"color: #000000;\"> 128M\r\nquery_cache_limit </span>=<span style=\"color: #000000;\"> 4M\r\nft_min_word_len </span>= <span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">\r\nthread_stack </span>=<span style=\"color: #000000;\"> 512K\r\ntransaction_isolation </span>= REPEATABLE-<span style=\"color: #000000;\">READ\r\ntmp_table_size </span>=<span style=\"color: #000000;\"> 128M\r\n#log</span>-bin=mysql-<span style=\"color: #000000;\">bin\r\nlong_query_time </span>= <span style=\"color: #800080;\">6</span><span style=\"color: #000000;\">\r\nserver_id</span>=<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">\r\ninnodb_buffer_pool_size </span>=<span style=\"color: #000000;\"> 1G\r\ninnodb_thread_concurrency </span>= <span style=\"color: #800080;\">16</span><span style=\"color: #000000;\">\r\ninnodb_log_buffer_size </span>=<span style=\"color: #000000;\"> 16M\r\ninnodb_log_file_size </span>=<span style=\"color: #000000;\"> 512M\r\ninnodb_log_files_in_group </span>= <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">\r\ninnodb_max_dirty_pages_pct </span>= <span style=\"color: #800080;\">90</span><span style=\"color: #000000;\">\r\ninnodb_lock_wait_timeout </span>= <span style=\"color: #800080;\">120</span><span style=\"color: #000000;\">\r\ninnodb_file_per_table </span>=<span style=\"color: #000000;\"> on\r\n\r\n[mysqldump]\r\nquick\r\nmax_allowed_packet </span>=<span style=\"color: #000000;\"> 32M\r\n\r\n[mysql]\r\nno</span>-auto-<span style=\"color: #000000;\">rehash\r\nconnect_timeout</span>=<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">\r\n\r\n[client]\r\nport</span>=<span style=\"color: #800080;\">3306</span><span style=\"color: #000000;\">\r\nsocket </span>= /tmp/mysql.sock</pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost support-files]# cp my-<span style=\"color: #0000ff;\">default</span>.cnf /etc/<span style=\"color: #000000;\">my.cnf\r\n[root@localhost support</span>-<span style=\"color: #000000;\">files]# \r\n[root@localhost support</span>-files]# ./<span style=\"color: #000000;\">mysql.server start\r\nStarting MySQL. SUCCESS</span>!</pre>\r\n</div>\r\n<p> <strong>（8）、将mysqld服务加入开机自启动项</strong></p>\r\n<p>首先需要将support-files/mysql.server服务脚本复制到/etc/init.d/，并重命名为mysqld。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost support-files]# cp mysql.server /etc/init.d/<span style=\"color: #000000;\">mysqld\r\n[root@localhost support</span>-files]# ls -la /etc/init.d/<span style=\"color: #000000;\">\r\ntotal </span><span style=\"color: #800080;\">52</span><span style=\"color: #000000;\">\r\ndrwxr</span>-xr-x. <span style=\"color: #800080;\">2</span> root root <span style=\"color: #800080;\">84</span> Aug <span style=\"color: #800080;\">3</span> <span style=\"color: #800080;\">01</span>:<span style=\"color: #800080;\">04</span><span style=\"color: #000000;\"> .\r\ndrwxr</span>-xr-x. <span style=\"color: #800080;\">10</span> root root <span style=\"color: #800080;\">127</span> Jul <span style=\"color: #800080;\">31</span> <span style=\"color: #800080;\">17</span>:<span style=\"color: #800080;\">23</span><span style=\"color: #000000;\"> ..\r\n</span>-rw-r--r--. <span style=\"color: #800080;\">1</span> root root <span style=\"color: #800080;\">18104</span> Jan <span style=\"color: #800080;\">3</span> <span style=\"color: #800080;\">2018</span><span style=\"color: #000000;\"> functions\r\n</span>-rwxr-xr-x. <span style=\"color: #800080;\">1</span> root root <span style=\"color: #800080;\">10576</span> Aug <span style=\"color: #800080;\">3</span> <span style=\"color: #800080;\">01</span>:<span style=\"color: #800080;\">04</span><span style=\"color: #000000;\"> mysqld\r\n</span>-rwxr-xr-x. <span style=\"color: #800080;\">1</span> root root <span style=\"color: #800080;\">4334</span> Jan <span style=\"color: #800080;\">3</span> <span style=\"color: #800080;\">2018</span><span style=\"color: #000000;\"> netconsole\r\n</span>-rwxr-xr-x. <span style=\"color: #800080;\">1</span> root root <span style=\"color: #800080;\">7293</span> Jan <span style=\"color: #800080;\">3</span> <span style=\"color: #800080;\">2018</span><span style=\"color: #000000;\"> network\r\n</span>-rw-r--r--. <span style=\"color: #800080;\">1</span> root root <span style=\"color: #800080;\">1160</span> Apr <span style=\"color: #800080;\">11</span> <span style=\"color: #800080;\">15</span>:<span style=\"color: #800080;\">36</span> README</pre>\r\n</div>\r\n<p>通过chkconfig命令将mysqld服务加入到自启动服务项中</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost support-files]# chkconfig --add mysqld</pre>\r\n</div>\r\n<p>查看是否添加成功</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost support-files]# chkconfig --<span style=\"color: #000000;\">list\r\n\r\nNote: This output shows SysV services only and does not include native\r\n      systemd services. SysV configuration data might be overridden by native\r\n      systemd configuration.\r\n\r\n      If you want to list systemd services use </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">systemctl list-unit-files</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">.\r\n      To see services enabled on particular target use\r\n      </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">systemctl list-dependencies [target]</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">.\r\n\r\nmysqld          </span><span style=\"color: #800080;\">0</span>:off   <span style=\"color: #800080;\">1</span>:off   <span style=\"color: #800080;\">2</span>:on    <span style=\"color: #800080;\">3</span>:on    <span style=\"color: #800080;\">4</span>:on    <span style=\"color: #800080;\">5</span>:on    <span style=\"color: #800080;\">6</span><span style=\"color: #000000;\">:off\r\nnetconsole      </span><span style=\"color: #800080;\">0</span>:off   <span style=\"color: #800080;\">1</span>:off   <span style=\"color: #800080;\">2</span>:off   <span style=\"color: #800080;\">3</span>:off   <span style=\"color: #800080;\">4</span>:off   <span style=\"color: #800080;\">5</span>:off   <span style=\"color: #800080;\">6</span><span style=\"color: #000000;\">:off\r\nnetwork         </span><span style=\"color: #800080;\">0</span>:off   <span style=\"color: #800080;\">1</span>:off   <span style=\"color: #800080;\">2</span>:on    <span style=\"color: #800080;\">3</span>:on    <span style=\"color: #800080;\">4</span>:on    <span style=\"color: #800080;\">5</span>:on    <span style=\"color: #800080;\">6</span>:off</pre>\r\n</div>\r\n<p> <strong>（9）、重启系统，mysqld就会自动启动了</strong></p>\r\n<p>检查是否启动</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost ~]# netstat -anp|<span style=\"color: #000000;\">grep mysqld\r\ntcp6       </span><span style=\"color: #800080;\">0</span>      <span style=\"color: #800080;\">0</span> :::<span style=\"color: #800080;\">3306</span>                 :::*                    LISTEN      <span style=\"color: #800080;\">1535</span>/<span style=\"color: #000000;\">mysqld         \r\nunix  </span><span style=\"color: #800080;\">2</span>      [ ACC ]     STREAM     LISTENING     <span style=\"color: #800080;\">21467</span>    <span style=\"color: #800080;\">1535</span>/mysqld          /tmp/mysql.sock</pre>\r\n</div>\r\n<p>如果不想重新启动，那可以直接手动启动。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>[root@localhost ~<span style=\"color: #000000;\">]# service mysqld restart\r\nShutting down MySQL.. SUCCESS</span>!<span style=\"color: #000000;\"> \r\nStarting MySQL. SUCCESS</span>!</pre>\r\n</div>\r\n<p><strong> （10）、设定远程登录mysql</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql><span style=\"color: #000000;\"> use mysql;\r\nDatabase changed\r\nmysql</span>> <span style=\"color: #0000ff;\">select</span> host,user <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> user;\r\n</span>+-----------+---------------+\r\n| host      | user          |\r\n+-----------+---------------+\r\n| localhost | mysql.session |\r\n| localhost | mysql.sys     |\r\n| localhost | root          |\r\n+-----------+---------------+\r\n<span style=\"color: #800080;\">3</span> rows <span style=\"color: #0000ff;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800080;\">0.00</span><span style=\"color: #000000;\"> sec)\r\nmysql</span>> grant all privileges on *.* to root@<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">%</span><span style=\"color: #800000;\">\'</span> identified by <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">123456</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">;\r\nQuery OK, </span><span style=\"color: #800080;\">0</span> rows affected, <span style=\"color: #800080;\">1</span> warning (<span style=\"color: #800080;\">0.00</span><span style=\"color: #000000;\"> sec)\r\nmysql</span>><span style=\"color: #000000;\"> flush privileges;\r\nQuery OK, </span><span style=\"color: #800080;\">0</span> rows affected (<span style=\"color: #800080;\">0.01</span><span style=\"color: #000000;\"> sec)\r\nmysql</span>> <span style=\"color: #0000ff;\">select</span> host,user <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> user;\r\n</span>+-----------+---------------+\r\n| host | user |\r\n+-----------+---------------+\r\n| % | root |\r\n| localhost | mysql.session |\r\n| localhost | mysql.sys |\r\n| localhost | root |\r\n+-----------+---------------+\r\n<span style=\"color: #800080;\">4</span> rows <span style=\"color: #0000ff;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800080;\">0.00</span> sec)</pre>\r\n</div>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/08/02/9405886.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('35', '0', '分布式集群Session原理及实现共享', '', '', '', '<h3>1、什么是Session/Cookie？</h3>\r\n<p>　　用户使用网站的服务，基本上需要浏览器与Web服务器的多次交互。HTTP协议本身是无状态的，当用户的第一次访问请求结束后，后端服务器就无法知道下一次来访问的还是不是上次访问的用户。我们需要基于HTTP协议支持会话状态的机制，这样的机制可以使Web服务器从多次单独的HTTP请求中知道哪些请求是来自哪个会话的。</p>\r\n<p>　　Session与Cookie的作用都是为了保持访问用户与后端服务器的交互状态。</p>\r\n<h4>1.1、理解Cookie</h4>\r\n<div>　　Cookie的作用通俗的说就是当一个用户通过HTTP协议访问一个服务器的时候，这个服务器会将一些Key/Value键值对返回给客户端浏览器，并给这些数据加上一些限制条件，在条件符合时这个用户下次访问这个服务器的时候，数据又被完整地带回给服务器。</div>\r\n<div>\r\n<h4>1.2、理解Session</h4>\r\n<p>　　Cookie可以让服务端程序跟踪每个客户端的访问，但是每次客户端的访问都必须传回这些Cookie，如果Cookie很多，这无形地增加了客户端与服务端的数据传输量，而Session的出现正是为了解决这个问题。</p>\r\n<p>　　同一个客户端每次和服务端交互时，不需要每次都传回所有的Cookie值，而是只要传回一个会话标识（SessionId），这个ID是客户端第一次访问服务器的时候生成的，而且每个客户端是唯一的。这样每个客户端就有一个唯一的ID，客户端只要传回这个ID就行了，这个ID通常是NAME为PHPSESIONID的一个Cookie。在Web服务器上，各个会话独立存储保存不同会话的信息。如果遇到禁用Cookie的情况，一般的做法就是把这个会话标识放到URL的参数中。</p>\r\n<h3>2、集群遇到的问题</h3>\r\n<p>　　从用户端来解释，就是当一个用户第一次访问被负载均衡代理到后端服务器A并登录后，服务器A上保留了用户的登录信息；当用户再次发送请求时，根据负载均衡策略可能被代理到后端不同的服务器，例如服务器B，由于这台服务器B没有用户的登录信息，所以导致用户需要重新登录。这对用户来说是不可忍受的。所以，在实施负载均衡的时候，我们必须考虑Session的问题。</p>\r\n<h3>3、解决集群Session共享问题</h3>\r\n<p>　　在负载均衡中，针对Session的处理，我们一般有以下几种方法：</p>\r\n<p>　　（1）、Session 保持</p>\r\n<p>　　（2）、Session 复制</p>\r\n<p>　　（3）、Session 共享</p>\r\n<h4><strong>3.1、会话保持（</strong>Session Sticky<strong>）</strong></h4>\r\n<p>　　Session保持（会话保持）是我们见到最多的名词之一，通过会话保持，负载均衡进行请求分发的时候保证每个客户端固定的访问到后端的同一台应用服务器。会话保持方案在所有的负载均衡都有对应的实现。而且这是在负载均衡这一层就可以解决Session问题。</p>\r\n<p>　　对于Nginx可以选用Session保持的方法实行负载均衡，nginx的upstream目前支持5种方式的分配方式，其中有两种比较通用的Session解决方法，ip_hash和url_hash。注意：后者不是官方模块，需要额外安装。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">upstream bakend {\r\n    server192.</span><span style=\"color: #800080;\">168.0</span>.<span style=\"color: #800080;\">11</span>:<span style=\"color: #800080;\">80</span><span style=\"color: #000000;\">;\r\n    server192.</span><span style=\"color: #800080;\">168.0</span>.<span style=\"color: #800080;\">12</span>:<span style=\"color: #800080;\">80</span><span style=\"color: #000000;\">;\r\n    ip_hash;\r\n }</span></pre>\r\n</div>\r\n<div>　　存在问题：</div>\r\n<div>　　1）、负载不均衡了：由于使用了Session保持，很显然就无法保证负载绝对的均衡。</div>\r\n<div>　　2）、如果这一台Web服务器宕机或者重启了，服务器上的会话数据会丢失，用户需要重新登陆等。</div>\r\n<div>　　3）、会话标识是应用层的信息，那么负载均衡器要将同一个会话的请求都保存到同一个Web服务器上的话，就需要进行应用层的解析，这个开销比第四层交换（LVS负载均衡器属于第四层）要大。</div>\r\n<div>　　4）、负载均衡器变为一个有状态的节点，要将会话保存到具体的Web服务器的映射。和无状态的节点相比，内存消耗会更大，容灾方面会更麻烦。</div>\r\n<div>\r\n<h4><strong>3.2、会话复制（</strong>Session Replication<strong>）</strong></h4>\r\n<p>　　此方案不用再要求负载均衡器保证同一个会话的多次请求必须到同一个Web服务器上了。我们在Web服务器之间增加了会话数据的同步，通过同步就保证了不同Web服务器之间Session数据的一致。</p>\r\n<div>　　存在问题：</div>\r\n<div>        1）、同步Session数据造成了网络带宽的开销。只要Session数据有变化，就需要将数据同步到所有其他机器上，机器越多，同步带来的网络带宽开销就越大。</div>\r\n<div>        2）、每台Web服务器都要保存所有Session数据，如果整个集群的Session数据很多（很多人同时访问网站）的话，每台机器用于保存Session数据的内容占用会很严重。</div>\r\n<div> </div>\r\n<div>        这个方案是靠应用容器来完成Session的复制从而解决Session的问题的，应用本身并不关心这个事情。这个方案不适合集群机器数多的场景。如果只有几台机器，用这个方案是可以的。</div>\r\n<div>\r\n<h4><strong>3.3、会话共享</strong></h4>\r\n<p>　　Session数据不保存到本机而且存放到一个集中存储的地方，修改Session也是发生在集中存储的地方。Web服务器使用Session从集中存储的地方读取。这样保证了不同Web服务器读取到的Session数据都是一样的。存储Session的具体方式可以是数据库、分布式存储系统等。</p>\r\n<p>　　PHP通过两行配置就可以把Session存放在Memcached或者Redis中，当然你要提前配置好他们。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">使用memcache存储Session\r\n\r\nsession.save_handler </span>=<span style=\"color: #000000;\"> memcache\r\nsession.save_path </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">tcp://192.168.56.11:11211</span><span style=\"color: #800000;\">\"</span></pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">使用redis存储Session\r\n\r\nsession.save_handler </span>=<span style=\"color: #000000;\"> redis\r\nsession.save_path </span>=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">tcp://localhost:6379</span><span style=\"color: #800000;\">\"</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n<div>\r\n<div>　　存在问题：</div>\r\n<div>        1）、读写Session数据引入了网络操作，这相对于本机的数据读取来说，问题就在于存在时延和不稳定性，不过我们的通讯基本都是发生在内网，问题不大。</div>\r\n<div>        2）、如果集中存储Session的机器或者集群有问题，就会影响到我们的应用。</div>\r\n<div> </div>\r\n<div>        相对于Session Replication，当Web服务器数量比较大、Session数比较多的时候，这个集中存储方案的优势是非常明显的。</div>\r\n</div>\r\n</div>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/27/9378769.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('36', '0', 'MySQL数据库表分区功能详解', '', '', '', '<p><strong>1、什么是表分区？</strong></p>\r\n<p>mysql数据库中的数据是以文件的形势存在磁盘上的，默认放在/mysql/data下面（可以通过my.cnf中的datadir来查看），一张表主要对应着三个文件，一个是frm存放表结构的，一个是myd存放表数据的，一个是myi存表索引的。如果一张表的数据量太大的话，那么myd,myi就会变的很大，查找数据就会变的很慢，这个时候我们可以利用mysql的分区功能，在物理上将这一张表对应的三个文件，分割成许多个小块，这样呢，我们查找一条数据时，就不用全部查找了，只要知道这条数据在哪一块，然后在那一块找就行了。如果表的数据太大，可能一个磁盘放不下，这个时候，我们可以把数据分配到不同的磁盘里面去。</p>\r\n<p>表分区，是指根据一定规则，将数据库中的一张表分解成多个更小的，容易管理的部分。从逻辑上看，只有一张表，但是底层却是由多个物理分区组成。</p>\r\n<p><strong>2、表分区与分表的区别</strong></p>\r\n<p>分表：指的是通过一定规则，将一张表分解成多张不同的表。比如将用户订单记录根据时间成多个表。 分表与分区的区别在于：分区从逻辑上来讲只有一张表，而分表则是将一张表分解成多张表。</p>\r\n<p><strong>3、表分区有什么好处？</strong></p>\r\n<p>（1）、与单个磁盘或文件系统分区相比，可以存储更多的数据。</p>\r\n<p>（2）、对于那些已经失去保存意义的数据，通常可以通过删除与那些数据有关的分区，很容易地删除那些数据。相反地，在某些情况下，添加新数据的过程又可以通过为那些新数据专门增加一个新的分区，来很方便地实现。</p>\r\n<p>（3）、一些查询可以得到极大的优化，这主要是借助于满足一个给定WHERE语句的数据可以只保存在一个或多个分区内，这样在查找时就不用查找其他剩余的分区。因为分区可以在创建了分区表后进行修改，所以在第一次配置分区方案时还不曾这么做时，可以重新组织数据，来提高那些常用查询的效率。</p>\r\n<p>（4）、涉及到例如SUM()和COUNT()这样聚合函数的查询，可以很容易地进行并行处理。这种查询的一个简单例子如 &ldquo;SELECT salesperson_id, COUNT (orders) as order_total FROM sales GROUP BY salesperson_id；&rdquo;。通过&ldquo;并行&rdquo;，这意味着该查询可以在每个分区上同时进行，最终结果只需通过总计所有分区得到的结果。</p>\r\n<p>5）、通过跨多个磁盘来分散数据查询，来获得更大的查询吞吐量。</p>\r\n<p><strong>4、分区表的限制因素</strong></p>\r\n<p>（1）、一个表最多只能有1024个分区。</p>\r\n<p>（2）、 MySQL5.1中，分区表达式必须是整数，或者返回整数的表达式。在MySQL5.5中提供了非整数表达式分区的支持。</p>\r\n<p>（3）、如果分区字段中有主键或者唯一索引的列，那么多有主键列和唯一索引列都必须包含进来。即：分区字段要么不包含主键或者索引列，要么包含全部主键和索引列。</p>\r\n<p>（4）、分区表中无法使用外键约束。</p>\r\n<p>（5）、MySQL的分区适用于一个表的所有数据和索引，不能只对表数据分区而不对索引分区，也不能只对索引分区而不对表分区，也不能只对表的一部分数据分区。</p>\r\n<p><strong>5、如何判断当前MySQL是否支持分区？</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql> show variables like <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">%partition%</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">;\r\n</span>+-------------------+-------+\r\n| Variable_name     | Value |\r\n+-------------------+-------+\r\n| have_partitioning | YES   |\r\n+-------------------+-------+\r\n<span style=\"color: #800080;\">1</span> row <span style=\"color: #0000ff;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800080;\">0.00</span> sec)</pre>\r\n</div>\r\n<p>have_partintioning 的值为YES，表示支持分区。</p>\r\n<p><strong> 6、MySQL支持的分区类型有哪些？</strong></p>\r\n<p>（1）、RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区。</p>\r\n<p>（2）、LIST分区：类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择。</p>\r\n<p>（3）、HASH分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL 中有效的、产生非负整数值的任何表达式。</p>\r\n<p>（4）、KEY分区：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值。</p>\r\n<p>说明：在MySQL5.1版本中，RANGE,LIST,HASH分区要求分区键必须是INT类型，或者通过表达式返回INT类型。但KEY分区的时候，可以使用其他类型的列(BLOB，TEXT类型除外)作为分区键。</p>\r\n<p><strong>6.1、RANGE分区</strong></p>\r\n<p>根据范围分区，范围应该连续但是不重叠，使用<code class=\"highlighter-rouge\">PARTITION BY RANGE</code>, <code class=\"highlighter-rouge\">VALUES LESS THAN</code>关键字。不使用<code class=\"highlighter-rouge\">COLUMNS</code>关键字时<code class=\"highlighter-rouge\">RANGE</code>括号内必须为整数字段名或返回确定整数的函数。</p>\r\n<p><strong>6.1.1、根据数值范围</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>drop table <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> exists employees;\r\ncreate table employees(\r\n    id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n    fname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n    lname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n    hired date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1970-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n    separated date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">9999-12-31</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n    job_code </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,\r\n    store_id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n)engine</span>=myisam <span style=\"color: #0000ff;\">default</span> charset=<span style=\"color: #000000;\">utf8\r\npartition by range(store_id)(\r\n    partition p0 values less than (</span><span style=\"color: #800080;\">6</span><span style=\"color: #000000;\">),\r\n    partition p1 values less than (</span><span style=\"color: #800080;\">11</span><span style=\"color: #000000;\">),\r\n    partition p2 values less than (</span><span style=\"color: #800080;\">16</span><span style=\"color: #000000;\">),\r\n    partition p3 values less than (</span><span style=\"color: #800080;\">21</span><span style=\"color: #000000;\">)\r\n);</span></pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre>insert into employees (id,fname,lname,hired,store_id) values(<span style=\"color: #800080;\">1</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">张三</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">张</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2015-05-04</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\r\ninsert into employees (id,fname,lname,hired,store_id) values(</span><span style=\"color: #800080;\">2</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">李四</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">李</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2016-10-01</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);\r\ninsert into employees (id,fname,lname,hired,store_id) values(</span><span style=\"color: #800080;\">3</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">王五</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">王</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2016-11-14</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">);\r\ninsert into employees (id,fname,lname,hired,store_id) values(</span><span style=\"color: #800080;\">4</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">赵六</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">赵</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2017-08-24</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800080;\">15</span><span style=\"color: #000000;\">);\r\ninsert into employees (id,fname,lname,hired,store_id) values(</span><span style=\"color: #800080;\">5</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">田七</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">田</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2018-05-20</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800080;\">20</span>);</pre>\r\n</div>\r\n<p><img src=\"https://images2018.cnblogs.com/blog/854257/201807/854257-20180724165249074-57584656.png\" alt=\"\" /></p>\r\n<p><img src=\"https://images2018.cnblogs.com/blog/854257/201807/854257-20180724165322724-2001039905.png\" alt=\"\" /></p>\r\n<p>按照这种分区方案，在商店1到5工作的雇员相对应的所有行被保存在分区P0中，商店6到10的雇员保存在P1中，依次类推。注意，每个分区都是按顺序进行定义，从最低到最高。这是PARTITION BY RANGE 语法的要求。</p>\r\n<p>对于包含数据(6,\'亢八\',\'亢\',\'2018-06-24\',13)的一个新行，可以很容易地确定它将插入到p2分区中。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>insert into employees (id,fname,lname,hired,store_id) values(<span style=\"color: #800080;\">6</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">亢八</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">亢</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2018-06-24</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800080;\">13</span>);</pre>\r\n</div>\r\n<p><img src=\"https://images2018.cnblogs.com/blog/854257/201807/854257-20180724170821190-845203759.png\" alt=\"\" /></p>\r\n<p>但是如果增加了一个编号为第21的商店(7,\'周九\',\'周\',\'2018-07-24\',21)，将会发生什么呢？在这种方案下，由于没有规则把store_id大于20的商店包含在内，服务器将不知道把该行保存在何处，将会导致错误。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>insert into employees (id,fname,lname,hired,store_id) values(<span style=\"color: #800080;\">7</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">周九</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">周</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2018-07-24</span><span style=\"color: #800000;\">\'</span>,<span style=\"color: #800080;\">21</span>);<br /><br />ERROR 1526 (HY000): Table has no partition for value 21</pre>\r\n</div>\r\n<p> 要避免这种错误，可以通过在CREATE TABLE语句中使用一个&ldquo;catchall&rdquo; VALUES LESS THAN子句，该子句提供给所有大于明确指定的最高值的值：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">create table employees(\r\n    id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n    fname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n    lname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n    hired date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1970-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n    separated date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">9999-12-31</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n    job_code </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,\r\n    store_id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n)engine</span>=myisam <span style=\"color: #0000ff;\">default</span> charset=<span style=\"color: #000000;\">utf8\r\npartition by range(store_id)(\r\n    partition p0 values less than (</span><span style=\"color: #800080;\">6</span><span style=\"color: #000000;\">),\r\n    partition p1 values less than (</span><span style=\"color: #800080;\">11</span><span style=\"color: #000000;\">),\r\n    partition p2 values less than (</span><span style=\"color: #800080;\">16</span><span style=\"color: #000000;\">),\r\n    partition p3 values less than (</span><span style=\"color: #800080;\">21</span><span style=\"color: #000000;\">),\r\n  partition p4 values less than MAXVALUE \r\n);</span></pre>\r\n</div>\r\n<p><strong>6.1.2、根据<code class=\"highlighter-rouge\">TIMESTAMP</code>范围</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>drop table <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> exists quarterly_report_status;\r\ncreate table quarterly_report_status(\r\n  report_id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n  report_status varchar(</span><span style=\"color: #800080;\">20</span>) not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n  report_updated timestamp not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span><span style=\"color: #000000;\"> current_timestamp on update current_timestamp\r\n)\r\npartition by range(unix_timestamp(report_updated))(\r\n  partition p0 values less than (unix_timestamp(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2008-01-01 00:00:00</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)),\r\n  partition p1 values less than (unix_timestamp(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2008-04-01 00:00:00</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)),\r\n  partition p2 values less than (unix_timestamp(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2008-07-01 00:00:00</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)),\r\n  partition p3 values less than (unix_timestamp(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2008-10-01 00:00:00</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)),\r\n  partition p4 values less than (unix_timestamp(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2009-01-01 00:00:00</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)),\r\n  partition p5 values less than (unix_timestamp(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2009-04-01 00:00:00</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)),\r\n  partition p6 values less than (unix_timestamp(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2009-07-01 00:00:00</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)),\r\n  partition p7 values less than (unix_timestamp(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2009-10-01 00:00:00</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)),\r\n  partition p8 values less than (unix_timestamp(</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">2010-01-01 00:00:00</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">)),\r\n  partition p9 values less than maxvalue\r\n);</span></pre>\r\n</div>\r\n<p><strong>6.1.3、根据<code class=\"highlighter-rouge\">DATE</code>、<code class=\"highlighter-rouge\">DATETIME</code>范围</strong></p>\r\n<p>添加<code class=\"highlighter-rouge\">COLUMNS</code>关键字可定义非integer范围及多列范围，不过需要注意<code class=\"highlighter-rouge\">COLUMNS</code>括号内只能是列名，不支持函数；多列范围时，多列范围必须呈递增趋势：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>drop table <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> exists member;\r\ncreate table member(\r\n  firstname varchar(</span><span style=\"color: #800080;\">25</span>) not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n  lastname varchar(</span><span style=\"color: #800080;\">25</span>) not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n  username varchar(</span><span style=\"color: #800080;\">16</span>) not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n  email varchar(</span><span style=\"color: #800080;\">35</span><span style=\"color: #000000;\">),\r\n  joined date not </span><span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">\r\n)\r\npartition by range columns(joined)(\r\n  partition p0 values less than (</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1960-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">),\r\n  partition p1 values less than (</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1970-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">),\r\n  partition p2 values less than (</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1980-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">),\r\n  partition p3 values less than (</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1990-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">),\r\n  partition p4 values less than maxvalue\r\n)</span></pre>\r\n</div>\r\n<p><strong>6.1.4、根据多列范围</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>drop table <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> exists rc3;\r\ncreate table rc3(\r\n  a </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">,\r\n  b </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">\r\n)\r\npartition by range columns(a,b)(\r\n  partition p0 values less than (</span><span style=\"color: #800080;\">0</span>,<span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">),\r\n  partition p1 values less than (</span><span style=\"color: #800080;\">10</span>,<span style=\"color: #800080;\">20</span><span style=\"color: #000000;\">),\r\n  partition p2 values less than (</span><span style=\"color: #800080;\">20</span>,<span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  partition p3 values less than (</span><span style=\"color: #800080;\">30</span>,<span style=\"color: #800080;\">40</span><span style=\"color: #000000;\">),\r\n  partition p4 values less than (</span><span style=\"color: #800080;\">40</span>,<span style=\"color: #800080;\">50</span><span style=\"color: #000000;\">),\r\n  partition p5 values less than (maxvalue,maxvalue)\r\n)</span></pre>\r\n</div>\r\n<p><strong> 6.1.5、RANGE分区在如下场合特别有用</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre>drop table <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> exists staff;\r\ncreate table staff(\r\n  id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n  fname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  lname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  hired date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1970-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  separated date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">9999-12-31</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  job_code </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,\r\n  store_id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n)engine</span>=myisam <span style=\"color: #0000ff;\">default</span> charset=<span style=\"color: #000000;\">utf8\r\npartition by range(year(separated))(\r\n  partition p0 values less than (</span><span style=\"color: #800080;\">1991</span><span style=\"color: #000000;\">),\r\n  partition p1 values less than (</span><span style=\"color: #800080;\">1996</span><span style=\"color: #000000;\">),\r\n  partition p2 values less than (</span><span style=\"color: #800080;\">2001</span><span style=\"color: #000000;\">),\r\n  partition p4 values less than MAXVALUE\r\n);</span></pre>\r\n</div>\r\n<p>（1）、当需要删除一个分区上的&ldquo;旧的&rdquo;数据时，只删除分区即可。如果你使用上面最近的那个例子给出的分区方案，你只需简单地使用&rdquo;alter table staff drop partition p0;&rdquo;来删除所有在1991年前就已经停止工作的雇员相对应的所有行。对于有大量行的表，这比运行一个如&rdquo;delete from staff WHERE year(separated) <= 1990;&rdquo;这样的一个DELETE查询要有效得多。</p>\r\n<p>（2）、想要使用一个包含有日期或时间值，或包含有从一些其他级数开始增长的值的列。</p>\r\n<p>（3）、经常运行直接依赖于用于分割表的列的查询。例如，当执行一个如&rdquo;select count(*) from staff where year(separated) = 200 group by store_id;&rdquo;这样的查询时，MySQL可以很迅速地确定只有分区p2需要扫描，这是因为余下的分区不可能包含有符合该WHERE子句的任何记录。</p>\r\n<p><strong>6.2、LIST分区</strong></p>\r\n<p>根据具体数值分区，每个分区数值不重叠，使用<code class=\"highlighter-rouge\">PARTITION BY LIST</code>、<code class=\"highlighter-rouge\">VALUES IN</code>关键字。跟<code class=\"highlighter-rouge\">Range</code>分区类似，不使用<code class=\"highlighter-rouge\">COLUMNS</code>关键字时<code class=\"highlighter-rouge\">List</code>括号内必须为整数字段名或返回确定整数的函数。</p>\r\n<p>类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择。</p>\r\n<p>LIST分区通过使用&ldquo;PARTITION BY LIST(expr)&rdquo;来实现，其中&ldquo;expr&rdquo;是某列值或一个基于某个列值、并返回一个整数值的表达式，然后通过&ldquo;VALUES IN (value_list)&rdquo;的方式来定义每个分区，其中&ldquo;value_list&rdquo;是一个通过逗号分隔的整数列表。</p>\r\n<p>假定有20个音像店，分布在4个有经销权的地区，如下表所示：</p>\r\n<p>====================</p>\r\n<p>地区      商店ID 号</p>\r\n<p>北区      3, 5, 6, 9, 17</p>\r\n<p>东区      1, 2, 10, 11, 19, 20</p>\r\n<p>西区      4, 12, 13, 14, 18</p>\r\n<p>中心区&nbsp;  7, 8, 15, 16</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>drop table <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> exists staff;\r\ncreate table staff(\r\n  id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n  fname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  lname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  hired date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1970-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  separated date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">9999-12-31</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  job_code </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,\r\n  store_id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n)\r\npartition by list(store_id)(\r\n  partition pNorth values </span><span style=\"color: #0000ff;\">in</span> (<span style=\"color: #800080;\">3</span>,<span style=\"color: #800080;\">5</span>,<span style=\"color: #800080;\">6</span>,<span style=\"color: #800080;\">9</span>,<span style=\"color: #800080;\">17</span><span style=\"color: #000000;\">),\r\n  partition pEast values </span><span style=\"color: #0000ff;\">in</span> (<span style=\"color: #800080;\">1</span>,<span style=\"color: #800080;\">2</span>,<span style=\"color: #800080;\">10</span>,<span style=\"color: #800080;\">11</span>,<span style=\"color: #800080;\">19</span>,<span style=\"color: #800080;\">20</span><span style=\"color: #000000;\">),\r\n  partition pWest values </span><span style=\"color: #0000ff;\">in</span> (<span style=\"color: #800080;\">4</span>,<span style=\"color: #800080;\">12</span>,<span style=\"color: #800080;\">13</span>,<span style=\"color: #800080;\">14</span>,<span style=\"color: #800080;\">18</span><span style=\"color: #000000;\">),\r\n  partition pCentral values </span><span style=\"color: #0000ff;\">in</span> (<span style=\"color: #800080;\">7</span>,<span style=\"color: #800080;\">8</span>,<span style=\"color: #800080;\">15</span>,<span style=\"color: #800080;\">16</span><span style=\"color: #000000;\">)\r\n);</span></pre>\r\n</div>\r\n<p>这使得在表中增加或删除指定地区的雇员记录变得容易起来。例如，假定西区的所有音像店都卖给了其他公司。那么与在西区音像店工作雇员相关的所有记录（行）可以使用查询&ldquo;ALTER TABLE staff DROP PARTITION pWest；&rdquo;来进行删除，它与具有同样作用的DELETE（删除）&ldquo;DELETE FROM staff WHERE store_id IN (4,12,13,14,18)；&rdquo;比起来，要有效得多。</p>\r\n<p>如果试图插入列值（或分区表达式的返回值）不在分区值列表中的一行时，那么&ldquo;INSERT&rdquo;查询将失败并报错。</p>\r\n<p>当插入多条数据出错时，如果表的引擎支持事务（<code class=\"highlighter-rouge\">Innodb</code>），则不会插入任何数据；如果不支持事务，则出错前的数据会插入，后面的不会执行。</p>\r\n<p>与<code class=\"highlighter-rouge\">Range</code>分区相同，添加<code class=\"highlighter-rouge\">COLUMNS</code>关键字可支持非整数和多列。</p>\r\n<p><strong>6.3、HASH分区</strong></p>\r\n<p> <code class=\"highlighter-rouge\">Hash</code>分区主要用来确保数据在预先确定数目的分区中平均分布，<code class=\"highlighter-rouge\">Hash</code>括号内只能是整数列或返回确定整数的函数，实际上就是使用返回的整数对分区数取模。</p>\r\n<p>要使用HASH分区来分割一个表，要在CREATE TABLE 语句上添加一个&ldquo;PARTITION BY HASH (expr)&rdquo;子句，其中&ldquo;expr&rdquo;是一个返回一个整数的表达式。它可以仅仅是字段类型为MySQL整型的一列的名字。此外，你很可能需要在后面再添加一个&ldquo;PARTITIONS num&rdquo;子句，其中num是一个非负的整数，它表示表将要被分割成分区的数量。</p>\r\n<p>如果没有包括一个PARTITIONS子句，那么分区的数量将默认为1</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>drop table <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> exists staff;\r\ncreate table staff(\r\n  id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n  fname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  lname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  hired date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1970-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  separated date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">9999-12-31</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  job_code </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,\r\n  store_id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n)\r\npartition by hash(store_id)\r\npartitions </span><span style=\"color: #800080;\">4</span>;</pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre>drop table <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> exists staff;\r\ncreate table staff(\r\n  id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n  fname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  lname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  hired date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1970-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  separated date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">9999-12-31</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  job_code </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,\r\n  store_id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n)\r\npartition by hash(year(hired))\r\npartitions </span><span style=\"color: #800080;\">4</span>;</pre>\r\n</div>\r\n<p><code class=\"highlighter-rouge\">Hash</code>分区也存在与传统<code class=\"highlighter-rouge\">Hash</code>分表一样的问题，可扩展性差。<code class=\"highlighter-rouge\">MySQL</code>也提供了一个类似于一致<code class=\"highlighter-rouge\">Hash</code>的分区方法－线性<code class=\"highlighter-rouge\">Hash</code>分区，只需要在定义分区时添加<code class=\"highlighter-rouge\">LINEAR</code>关键字。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>drop table <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> exists staff;\r\ncreate table staff(\r\n  id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n  fname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  lname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  hired date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1970-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  separated date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">9999-12-31</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  job_code </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,\r\n  store_id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n)\r\npartition by linear hash(year(hired))\r\npartitions </span><span style=\"color: #800080;\">4</span>;</pre>\r\n</div>\r\n<p>线性哈希功能，它与常规哈希的区别在于，线性哈希功能使用的一个线性的2的幂（powers-of-two）运算法则，而常规哈希使用的是求哈希函数值的模数。</p>\r\n<p><strong>6.4、KEY分区</strong></p>\r\n<p><code class=\"highlighter-rouge\">Key</code>分区与<code class=\"highlighter-rouge\">Hash</code>分区很相似，只是<code class=\"highlighter-rouge\">Hash</code>函数不同，定义时把<code class=\"highlighter-rouge\">Hash</code>关键字替换成<code class=\"highlighter-rouge\">Key</code>即可，同样<code class=\"highlighter-rouge\">Key</code>分区也有对应与线性<code class=\"highlighter-rouge\">Hash</code>的线性<code class=\"highlighter-rouge\">Key</code>分区方法。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>drop table <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> exists staff;\r\ncreate table staff(\r\n  id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">,\r\n  fname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  lname varchar(</span><span style=\"color: #800080;\">30</span><span style=\"color: #000000;\">),\r\n  hired date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1970-01-01</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  separated date not </span><span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">9999-12-31</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">,\r\n  job_code </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,\r\n  store_id </span><span style=\"color: #0000ff;\">int</span> not <span style=\"color: #0000ff;\">null</span> <span style=\"color: #0000ff;\">default</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">\r\n)\r\npartition by key(store_id)\r\npartitions </span><span style=\"color: #800080;\">4</span>;</pre>\r\n</div>\r\n<p>在KEY分区中使用关键字LINEAR和在HASH分区中使用具有同样的作用，分区的编号是通过2的幂（powers-of-two）算法得到，而不是通过模数算法。</p>\r\n<p>另外，当表存在主键或唯一索引时可省略<code class=\"highlighter-rouge\">Key</code>括号内的列名，<code class=\"highlighter-rouge\">Mysql</code>将按照主键－唯一索引的顺序选择，当找不到唯一索引时报错。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/24/9360136.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('37', '0', 'PHP面向对象程序设计之接口(interface)', '', '', '', '<p class=\"contentNew\">接口(interface)是抽象方法和静态常量定义的集合。接口是一种特殊的抽象类，这种抽象类中只包含抽象方法和静态常量。</p>\r\n<p class=\"contentNew\">为什么说接口是一种特殊的抽象类呢？如果一个抽象类里面的所有的方法都是抽象方法，那么我们就换一种声明方法使用&ldquo;接口&rdquo;；也就是说接口里面所有的方法必须都是声明为抽象方法，另外接口里面不能声明变量(但可声明常量constant)，而且接口里面所有的成员都是public权限的。所以子类在实现的时候 也一定要使用public权限实限。</p>\r\n<p class=\"contentNew\">我们先写接口的定义，下面的例子是接口的一个简单写法。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">interface</span><span style=\"color: #000000;\"> One{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义一个常量</span>\r\n    <span style=\"color: #0000ff;\">const</span> <span style=\"color: #008080;\">constant</span> = \'constant value\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法1</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun1();\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun2();\r\n}</span></pre>\r\n</div>\r\n<p> 上例中定义了一个接口&ldquo;one&rdquo;，里面声明了两个抽象方法&ldquo;fun1&rdquo;和&rdquo;fun2&rdquo;，因为接口里面所有的方法都是抽象方法，所以在声明抽象方法的时候就不用像抽象类那样使用&ldquo;abstract&rdquo;这个关键字了，默认的已经加上这个关键字，另外在接口里边的&rdquo;public&rdquo;这个访问权限也可以去掉，因为默认就是public的，因为接口里所有成员都要是公有的，所在对于接口里面的成员我们就不能使用&ldquo;private&rdquo;的和&ldquo;protected&rdquo;的权限 了，都要用public或是默认的。另外在接口里面我们也声明了一个常量&ldquo;constant&ldquo;，&nbsp;因为在接口里面不能用变量成员，所以我们要使用 const这个关键字声明。</p>\r\n<p>因为接口是一种特殊的抽象类，里面所有的方法都是抽象方法，所以接口也不能产生实例对象; 它也做为一种规范，所有抽象方法需要子类去实现。</p>\r\n<p>我们可以使用&rdquo;extends&rdquo;关键字让一个接口去继承另一个接口：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">interface</span><span style=\"color: #000000;\"> One{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义一个常量</span>\r\n    <span style=\"color: #0000ff;\">const</span> <span style=\"color: #008080;\">constant</span> = \'constant value\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法1</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun1();\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun2();\r\n}\r\n\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">使用extends继承另外一个接口</span>\r\n<span style=\"color: #0000ff;\">interface</span> Two <span style=\"color: #0000ff;\">extends</span><span style=\"color: #000000;\"> One{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun3();\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun4();\r\n}</span></pre>\r\n</div>\r\n<p>我们定义一接口的子类去实现接口中全部抽象方法使用的关键字是&ldquo;implements&rdquo;，而不是我们前面所说的&ldquo;extends&rdquo;。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">interface</span><span style=\"color: #000000;\"> One{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义一个常量</span>\r\n    <span style=\"color: #0000ff;\">const</span> <span style=\"color: #008080;\">constant</span> = \'constant value\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法1</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun1();\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun2();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span> Tree <span style=\"color: #0000ff;\">implements</span><span style=\"color: #000000;\"> One{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun1()\r\n    {\r\n\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun2()\r\n    {\r\n        \r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>我们也可以使用抽象类，去实现接口中的部分抽象方法，但要想实例化对象，这个抽象类还要有子类把它所有的抽象方法都实现才行。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">interface</span><span style=\"color: #000000;\"> One{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义一个常量</span>\r\n    <span style=\"color: #0000ff;\">const</span> <span style=\"color: #008080;\">constant</span> = \'constant value\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法1</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun1();\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun2();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span> Two <span style=\"color: #0000ff;\">implements</span><span style=\"color: #000000;\"> One{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun1()\r\n    {\r\n\r\n    }\r\n    </span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun3();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span> Three <span style=\"color: #0000ff;\">extends</span><span style=\"color: #000000;\"> Two{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun2()\r\n    {\r\n\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun3()\r\n    {\r\n        \r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>PHP是单继承的，一个类只能有一父类，但是一个类可以实现多个接口。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">interface</span><span style=\"color: #000000;\"> One{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义一个常量</span>\r\n    <span style=\"color: #0000ff;\">const</span> <span style=\"color: #008080;\">constant</span> = \'constant value\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法1</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun1();\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun2();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">interface</span><span style=\"color: #000000;\"> Two{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun3();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span> Three <span style=\"color: #0000ff;\">implements</span> One,<span style=\"color: #000000;\">Two{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun1(){\r\n\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun2(){\r\n\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun3()\r\n    {\r\n        \r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>PHP中不仅一个类可以实现多个接口，也可以在继承一个类的同时实现多个接口, 一定要先继承类再去实现接口。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">interface</span><span style=\"color: #000000;\"> One{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义一个常量</span>\r\n    <span style=\"color: #0000ff;\">const</span> <span style=\"color: #008080;\">constant</span> = \'constant value\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法1</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun1();\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun2();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">interface</span><span style=\"color: #000000;\"> Two{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun3();\r\n}\r\n\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Three{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun4(){\r\n\r\n    }\r\n}\r\n</span><span style=\"color: #0000ff;\">class</span> Four <span style=\"color: #0000ff;\">extends</span> Three <span style=\"color: #0000ff;\">implements</span> One,<span style=\"color: #000000;\">Two{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun1()\r\n    {\r\n        \r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun2()\r\n    {\r\n        \r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> fun3()\r\n    {\r\n        \r\n    }\r\n}</span></pre>\r\n</div>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/23/9355104.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('38', '0', 'PHP面向对象程序设计之抽象类和抽象方法', '', '', '', '<p><strong>抽象类：</strong></p>\r\n<p>抽象类不能被实例化。抽象类中只定义（或部分实现）子类需要的方法。子类可以继承它并且通过实现其中的抽象方法，使抽象类具体化。</p>\r\n<p>我们可以用一个abstract关键字来定义一个抽象类，示例如下：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中可以定义属性</span>\r\n    <span style=\"color: #0000ff;\">protected</span> <span style=\"color: #800080;\">$animal</span> = \'animal\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中也可以定义非抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> printit(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->animal = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">animal;\r\n    }\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象方法</span>\r\n    <span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> setit();\r\n}</span></pre>\r\n</div>\r\n<p><strong>抽象类的特性：</strong></p>\r\n<p><strong>1）、定义为抽象的类不能被实例化。</strong></p>\r\n<p>抽象类和普通类一样，都可以创建方法和属性，那么抽象类可以像普通类那样被实例化吗？</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中可以定义属性</span>\r\n    <span style=\"color: #0000ff;\">protected</span> <span style=\"color: #800080;\">$animal</span> = \'animal\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中也可以定义非抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> printit(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->animal = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">animal;\r\n    }\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象方法</span>\r\n    <span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> setit();\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$Animal</span> = <span style=\"color: #0000ff;\">new</span> Animal();</pre>\r\n</div>\r\n<p>运行结果：Fatal error: Cannot instantiate abstract class Animal in D:\\phpStudy\\WWW\\demo\\abstract.php on line <em>15</em></p>\r\n<p>运行结果显示，不能实例化抽象类Animal，现在知道咯，抽象类不能像普通类那样被实例化的哟。</p>\r\n<p><strong>2）、如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。</strong></p>\r\n<p>抽象方法用abstract关键字声明，其中不能有具体内容。你可以像声明普通类方法那样声明抽象方法，但要以分号而不是方法体结束。而在大多数情况下，抽象类中至少要有一个抽象方法，否则这个抽象类也就没有抽象的意义了，也就是说，这个抽象类内可以没有抽象方法只有普通方法，但是，你也没必要将这个类声明称抽象类了，直接去掉abstract变成普通类就行了。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中可以定义属性</span>\r\n    <span style=\"color: #0000ff;\">protected</span> <span style=\"color: #800080;\">$animal</span> = \'animal\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中也可以定义非抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> printit(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->animal = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">animal;\r\n    }\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象方法</span>\r\n    <span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> setit();\r\n}</span></pre>\r\n</div>\r\n<p>运行结果：Fatal error: Class Animal contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (Animal::barking) in D:\\phpStudy\\WWW\\demo\\abstract.php on line <em>13</em></p>\r\n<p>结果显示了一个致命的错误，说类Animal包含了一个抽象方法，所以这个类必须被声明为抽象类或者实现有抽象方法setit()的类。</p>\r\n<p><strong>3）、被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。</strong></p>\r\n<p><strong>4）、继承一个抽象类的时候，子类必须定义父类中的所有抽象方法（这些方法的访问控制必须和父类中一样（或者更为宽松）。）</strong></p>\r\n<p>创建抽象方法后，要确保所有子类中都实现可该方法，但实现的细节可以先不确定。</p>\r\n<p>如果创建了一个继承自抽象类Animal的普通类，但是不实现其中的抽象方法，会发生什么呢？</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中可以定义属性</span>\r\n    <span style=\"color: #0000ff;\">protected</span> <span style=\"color: #800080;\">$animal</span> = \'animal\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中也可以定义非抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> printit(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->animal = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">animal;\r\n    }\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象方法</span>\r\n    <span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> setit();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span> Fish <span style=\"color: #0000ff;\">extends</span><span style=\"color: #000000;\"> Animal{\r\n    \r\n}</span></pre>\r\n</div>\r\n<p>运行结果：Fatal error: Class Fish contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (Animal::barking) in D:\\phpStudy\\WWW\\demo\\abstract.php on line <em>17</em></p>\r\n<p>这个和只有抽象方法没有把类定义为抽象类发生的错误一样，所以抽象类的每个子类必须实现抽象类中的所有抽象方法，或者把他们自身也声明为抽象方法。</p>\r\n<p>扩展类不仅仅负责简单实现抽象类中的抽象方法，还必须重新声明方法。新的方法的访问控制不能比抽象方法的访问控制更严格。新的实现方法的参数个数应该和抽象方法的参数个数一样，重新生成对应的类型提示。</p>\r\n<p>1> 验证：新的实现方法的参数个数应该和抽象方法的参数个数一样</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中可以定义属性</span>\r\n    <span style=\"color: #0000ff;\">protected</span> <span style=\"color: #800080;\">$animal</span> = \'animal\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中也可以定义非抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> printit(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->animal = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">animal;\r\n    }\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象方法</span>\r\n    <span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> setit();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span> Fish <span style=\"color: #0000ff;\">extends</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> setit(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>运行代码：Fatal error: Declaration of Fish::setit() must be compatible with Animal::setit() in D:\\phpStudy\\WWW\\demo\\abstract.php on line <em>19</em></p>\r\n<p><em>2> </em>验证：新的方法的访问控制不能比抽象方法的访问控制更严格</p>\r\n<p>(1) 如果 Animal 中 setit() 声明为 public ，那么 Fish 中 setit() 的声明只能是 public ，不能是 protected 或 private ； <br />(2) 如果 Animal 中 setit() 声明为 protected ，那么 Fish 中 setit() 的声明可以是 public 或 protected ，但不能是 private ； <br />(3) 如果 Animal 中 setit() 声明为 private ，嘿嘿，不能定义为 private 哦！</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中可以定义属性</span>\r\n    <span style=\"color: #0000ff;\">protected</span> <span style=\"color: #800080;\">$animal</span> = \'animal\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中也可以定义非抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> printit(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->animal = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">animal;\r\n    }\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象方法</span>\r\n    <span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> setit();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span> Fish <span style=\"color: #0000ff;\">extends</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> setit(){\r\n\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>运行结果：Fatal error: Access level to Fish::setit() must be public (as in class Animal) in D:\\phpStudy\\WWW\\demo\\abstract.php on line <em>19</em></p>\r\n<p><strong>5）、子类可以定义一个可选参数(也就是必须要有默认值)，而父类抽象方法的声明里没有，则两者的声明并无冲突。</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中可以定义属性</span>\r\n    <span style=\"color: #0000ff;\">protected</span> <span style=\"color: #800080;\">$animal</span> = \'animal\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中也可以定义非抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> printit(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->animal = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">animal;\r\n    }\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象方法</span>\r\n    <span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> setit(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">);\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span> Fish <span style=\"color: #0000ff;\">extends</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> setit(<span style=\"color: #800080;\">$name</span>,<span style=\"color: #800080;\">$separator</span> = \'\'<span style=\"color: #000000;\">){\r\n\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p><strong>6）、一个抽象类继承另一个抽象类时，抽象方法不需要声明为抽象的</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中可以定义属性</span>\r\n    <span style=\"color: #0000ff;\">protected</span> <span style=\"color: #800080;\">$animal</span> = \'animal\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中也可以定义非抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> printit(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->animal = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">animal;\r\n    }\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象方法</span>\r\n    <span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> setit();\r\n}\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">错误代码</span>\r\n<span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span> Fish <span style=\"color: #0000ff;\">extends</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> setit();\r\n}</span></pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Animal{\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中可以定义属性</span>\r\n    <span style=\"color: #0000ff;\">protected</span> <span style=\"color: #800080;\">$animal</span> = \'animal\'<span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象类中也可以定义非抽象方法</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> printit(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->animal = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">animal;\r\n    }\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">抽象方法</span>\r\n    <span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> setit();\r\n}\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">继承抽象类时，抽象方法不需要声明抽象</span>\r\n<span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span> Fish <span style=\"color: #0000ff;\">extends</span><span style=\"color: #000000;\"> Animal{\r\n    \r\n}</span></pre>\r\n</div>\r\n<p> 从PHP 5.2开始，不再允许同时使用abstract static 修饰一个抽象类的抽象方法。也就是说，PHP不再支持抽象静态方法，继续使用，将导致E_STRICT错误。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/23/9354621.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('39', '0', 'MySQL优化技巧', '', '', '', '<h3>MySQL优化三大方向：</h3>\r\n<div>① 优化MySQL所在服务器内核(此优化一般由运维人员完成)。</div>\r\n<div>② 对MySQL配置参数进行优化（my.cnf）此优化需要进行压力测试来进行参数调整。</div>\r\n<div>③ 对SQL语句以及表优化。</div>\r\n<div>\r\n<h3>MySQL参数优化：</h3>\r\n<p>1、MySQL 默认的最大连接数为 100，可以在 mysql 客户端使用以下命令查看</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql<span style=\"color: #808080;\">></span> show variables <span style=\"color: #808080;\">like</span> <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">max_connections</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Variable_name   <span style=\"color: #808080;\">|</span> Value <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> max_connections <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">500</span>   <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #800000; font-weight: bold;\">1</span> row <span style=\"color: #808080;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800000; font-weight: bold;\">0.00</span> sec)</pre>\r\n</div>\r\n<p>2、当前连接的线程的个数</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql<span style=\"color: #808080;\">></span> show status <span style=\"color: #808080;\">like</span> <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">threads_connected</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">-----------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Variable_name     <span style=\"color: #808080;\">|</span> Value <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">-----------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Threads_connected <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">7</span>     <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">-----------------+-------+</span>\r\n<span style=\"color: #800000; font-weight: bold;\">1</span> row <span style=\"color: #808080;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800000; font-weight: bold;\">0.00</span> sec)</pre>\r\n</div>\r\n<p>3、查看当前访问Mysql的线程</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql<span style=\"color: #808080;\">></span><span style=\"color: #000000;\"> show processlist;\r\n</span><span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---+------+----------------+---------------+---------+------+-------+------------------+</span>\r\n<span style=\"color: #808080;\">|</span> Id  <span style=\"color: #808080;\">|</span> <span style=\"color: #ff00ff;\">User</span> <span style=\"color: #808080;\">|</span> Host           <span style=\"color: #808080;\">|</span> db            <span style=\"color: #808080;\">|</span> Command <span style=\"color: #808080;\">|</span> Time <span style=\"color: #808080;\">|</span> State <span style=\"color: #808080;\">|</span> Info             <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---+------+----------------+---------------+---------+------+-------+------------------+</span>\r\n<span style=\"color: #808080;\">|</span>   <span style=\"color: #800000; font-weight: bold;\">1</span> <span style=\"color: #808080;\">|</span> root <span style=\"color: #808080;\">|</span> localhost:<span style=\"color: #800000; font-weight: bold;\">4050</span> <span style=\"color: #808080;\">|</span> <span style=\"color: #0000ff;\">NULL</span>          <span style=\"color: #808080;\">|</span> Query   <span style=\"color: #808080;\">|</span>    <span style=\"color: #800000; font-weight: bold;\">0</span> <span style=\"color: #808080;\">|</span> <span style=\"color: #0000ff;\">NULL</span>  <span style=\"color: #808080;\">|</span> show processlist <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">|</span>   <span style=\"color: #800000; font-weight: bold;\">2</span> <span style=\"color: #808080;\">|</span> root <span style=\"color: #808080;\">|</span> localhost:<span style=\"color: #800000; font-weight: bold;\">4438</span> <span style=\"color: #808080;\">|</span> <span style=\"color: #0000ff;\">NULL</span>          <span style=\"color: #808080;\">|</span> Sleep   <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">2623</span> <span style=\"color: #808080;\">|</span>       <span style=\"color: #808080;\">|</span> <span style=\"color: #0000ff;\">NULL</span>             <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">|</span>   <span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #808080;\">|</span> root <span style=\"color: #808080;\">|</span> localhost:<span style=\"color: #800000; font-weight: bold;\">4439</span> <span style=\"color: #808080;\">|</span> deruimu11     <span style=\"color: #808080;\">|</span> Sleep   <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">2630</span> <span style=\"color: #808080;\">|</span>       <span style=\"color: #808080;\">|</span> <span style=\"color: #0000ff;\">NULL</span>             <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">|</span>   <span style=\"color: #800000; font-weight: bold;\">4</span> <span style=\"color: #808080;\">|</span> root <span style=\"color: #808080;\">|</span> localhost:<span style=\"color: #800000; font-weight: bold;\">4440</span> <span style=\"color: #808080;\">|</span> drmaml_course <span style=\"color: #808080;\">|</span> Sleep   <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">2623</span> <span style=\"color: #808080;\">|</span>       <span style=\"color: #808080;\">|</span> <span style=\"color: #0000ff;\">NULL</span>             <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">|</span>   <span style=\"color: #800000; font-weight: bold;\">6</span> <span style=\"color: #808080;\">|</span> root <span style=\"color: #808080;\">|</span> localhost:<span style=\"color: #800000; font-weight: bold;\">4452</span> <span style=\"color: #808080;\">|</span> mysql         <span style=\"color: #808080;\">|</span> Sleep   <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">2612</span> <span style=\"color: #808080;\">|</span>       <span style=\"color: #808080;\">|</span> <span style=\"color: #0000ff;\">NULL</span>             <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">|</span>   <span style=\"color: #800000; font-weight: bold;\">7</span> <span style=\"color: #808080;\">|</span> root <span style=\"color: #808080;\">|</span> localhost:<span style=\"color: #800000; font-weight: bold;\">4458</span> <span style=\"color: #808080;\">|</span> readymade     <span style=\"color: #808080;\">|</span> Sleep   <span style=\"color: #808080;\">|</span>  <span style=\"color: #800000; font-weight: bold;\">481</span> <span style=\"color: #808080;\">|</span>       <span style=\"color: #808080;\">|</span> <span style=\"color: #0000ff;\">NULL</span>             <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">101</span> <span style=\"color: #808080;\">|</span> root <span style=\"color: #808080;\">|</span> localhost:<span style=\"color: #800000; font-weight: bold;\">5737</span> <span style=\"color: #808080;\">|</span> readymade     <span style=\"color: #808080;\">|</span> Sleep   <span style=\"color: #808080;\">|</span>  <span style=\"color: #800000; font-weight: bold;\">480</span> <span style=\"color: #808080;\">|</span>       <span style=\"color: #808080;\">|</span> <span style=\"color: #0000ff;\">NULL</span>             <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---+------+----------------+---------------+---------+------+-------+------------------+</span>\r\n<span style=\"color: #800000; font-weight: bold;\">7</span> rows <span style=\"color: #808080;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800000; font-weight: bold;\">0.00</span> sec)</pre>\r\n</div>\r\n<p>4、设置最大连接数</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql<span style=\"color: #808080;\">></span> <span style=\"color: #0000ff;\">set</span> global max_connections <span style=\"color: #808080;\">=</span> <span style=\"color: #800000; font-weight: bold;\">1000</span><span style=\"color: #000000;\">;\r\nQuery OK, </span><span style=\"color: #800000; font-weight: bold;\">0</span> rows affected (<span style=\"color: #800000; font-weight: bold;\">0.00</span> sec)</pre>\r\n</div>\r\n<p>最大可设置16384,超过没用<br />5、查看当前被使用的connections</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql<span style=\"color: #808080;\">></span> show global status <span style=\"color: #808080;\">like</span> <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">max_used_connections</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Variable_name        <span style=\"color: #808080;\">|</span> Value <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Max_used_connections <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">9</span>     <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------+-------+</span>\r\n<span style=\"color: #800000; font-weight: bold;\">1</span> row <span style=\"color: #808080;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800000; font-weight: bold;\">0.00</span> sec)</pre>\r\n</div>\r\n<h3>对MySQL语句性能优化的16条经验</h3>\r\n<div>① 为查询缓存优化查询</div>\r\n<div>② EXPLAIN 我们的SELECT查询(可以查看执行的行数)</div>\r\n<div>③ 当只要一行数据时使用LIMIT 1</div>\r\n<div>④ 为搜索字段建立索引</div>\r\n<div>⑤ 在Join表的时候使用相当类型的列，并将其索引</div>\r\n<div>⑥ 千万不要 ORDER BY RAND  ()</div>\r\n<div>⑦ 避免SELECT *</div>\r\n<div>⑧ 永远为每张表设置一个ID</div>\r\n<div>⑨ 可以使用ENUM 而不要VARCHAR</div>\r\n<div>⑩ 尽可能的使用NOT NULL</div>\r\n<div>⑪ 固定长度的表会更快</div>\r\n<div>⑫ 垂直分割</div>\r\n<div>⑬ 拆分打的DELETE或INSERT语句</div>\r\n<div>⑭ 越小的列会越快</div>\r\n<div>⑮ 选择正确的存储引擎</div>\r\n<div>⑯ 小心 \"永久链接\"</div>\r\n<div> </div>\r\n<div>\r\n<div><strong>(一) 使用查询缓存优化查询</strong></div>\r\n<div>大多数的MySQL服务器都开启了查询缓存。这是提高性能最有效的方法之一，而且这是被MySQL引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放入一个缓存中，这样后续的相同查询就不用操作而直接访问缓存结果了。</div>\r\n<div>这里最主要的问题是，对于我们程序员来说，这个事情是很容易被忽略的。因为我们某些查询语句会让MySQL不使用缓存，示例如下：</div>\r\n<div>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">SELECT</span> username <span style=\"color: #0000ff;\">FROM</span> <span style=\"color: #ff00ff;\">user</span> <span style=\"color: #0000ff;\">WHERE</span>    signup_date <span style=\"color: #808080;\">>=</span><span style=\"color: #000000;\"> CURDATE()\r\n</span><span style=\"color: #0000ff;\">SELECT</span> username <span style=\"color: #0000ff;\">FROM</span> <span style=\"color: #ff00ff;\">user</span> <span style=\"color: #0000ff;\">WHERE</span>    signup_date <span style=\"color: #808080;\">>=</span> <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">2014-06-24&lsquo;</span></pre>\r\n</div>\r\n</div>\r\n<div>上面两条SQL语句的差别就是 CURDATE() ，MySQL的查询缓存对这个函数不起作用。所以，像 NOW() 和 RAND() 或是其它的诸如此类的SQL函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。所以，你所需要的就是用一个变量来代替MySQL的函数，从而开启缓存。</div>\r\n<div> </div>\r\n<div><strong>(二) 使用EXPLAIN关键字检测查询</strong></div>\r\n<div>使用EXPLAIN关键字可以使我们知道MySQL是如何处理SQL语句的，这样可以帮助我们分析我们的查询语句或是表结构的性能瓶颈；EXPLAIN的查询结果还会告诉我们索引主键是如何被利用的，数据表是如何被被搜索或排序的....等等。语法格式是：EXPLAIN +SELECT语句;</div>\r\n<div><img src=\"https://img-blog.csdn.net/20170909001604837?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzA4NzUxMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\" /></div>\r\n<div><img src=\"https://img-blog.csdn.net/20170909001655081?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzA4NzUxMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\" /></div>\r\n<div>我们可以看到，前一个结果显示搜索了 7883 行，而后一个只是搜索了两个表的 9 和 16 行。查看rows列可以让我们找到潜在的性能问题。&nbsp;</div>\r\n<div> </div>\r\n<div><strong>(三)当只要一行数据时使用LIMIT 1</strong></div>\r\n<div>加上LIMIT 1可以增加性能。MySQL数据库引擎会在查找到一条数据后停止搜索，而不是继续往后查询下一条符合条件的数据记录。</div>\r\n<div> </div>\r\n<div><strong>(四)为搜索字段建立索引</strong></div>\r\n<div>索引不一定就是给主键或者是唯一的字段，如果在表中，有某个字段经常用来做搜索，需要将其建立索引。</div>\r\n<div>索引的有关操作如下：</div>\r\n<div> </div>\r\n<div><span style=\"text-decoration: underline;\"><em>1.创建索引</em></span></div>\r\n<div>在执行CREATE TABLE语句时可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。</div>\r\n<div> </div>\r\n<div>1.1> ALTER TABLE</div>\r\n<div>ALTER TABLE 用来创建普通索引、唯一索引、主键索引和全文索引</div>\r\n<div>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">ALTER</span> <span style=\"color: #0000ff;\">TABLE</span> table_name <span style=\"color: #0000ff;\">ADD</span> <span style=\"color: #0000ff;\">INDEX</span><span style=\"color: #000000;\"> index_name (column_list);\r\n</span><span style=\"color: #0000ff;\">ALTER</span> <span style=\"color: #0000ff;\">TABLE</span> table_name <span style=\"color: #0000ff;\">ADD</span> <span style=\"color: #0000ff;\">UNIQUE</span><span style=\"color: #000000;\"> (column_list);\r\n</span><span style=\"color: #0000ff;\">ALTER</span> <span style=\"color: #0000ff;\">TABLE</span> table_name <span style=\"color: #0000ff;\">ADD</span> <span style=\"color: #0000ff;\">PRIMARY</span> <span style=\"color: #0000ff;\">KEY</span><span style=\"color: #000000;\"> (column_list);\r\n</span><span style=\"color: #0000ff;\">ALTER</span> <span style=\"color: #0000ff;\">TABLE</span> table_name <span style=\"color: #0000ff;\">ADD</span> FULLTEXT (column_list);</pre>\r\n</div>\r\n</div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>其中table_name是要增加索引名的表名，column_list指出对哪些列列进行索引，多列时各列之间使用半角逗号隔开。索引名index_name是可选的，如果不指定索引名称，MySQL将根据第一个索引列自动指定索引名称，另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。</div>\r\n<div> </div>\r\n<div>1.2> CREATE INDEX</div>\r\n<div>CREATE INDEX可对表增加普通索引或UNIQUE索引以及全文索引，但是不可以对表增加主键索引</div>\r\n<div>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">CREATE</span> <span style=\"color: #0000ff;\">INDEX</span> index_name <span style=\"color: #0000ff;\">ON</span><span style=\"color: #000000;\"> table_name (column_list);\r\n</span><span style=\"color: #0000ff;\">CREATE</span> <span style=\"color: #0000ff;\">UNIQUE</span> index_name <span style=\"color: #0000ff;\">ON</span><span style=\"color: #000000;\"> table_name (column_list);\r\n</span><span style=\"color: #0000ff;\">CREATE</span> FULLTEXT index_name <span style=\"color: #0000ff;\">ON</span> table_name (column_list);</pre>\r\n</div>\r\n</div>\r\n<div>\r\n<div>table_name、index_name和column_list具有与ALTER TABLE语句中相同的含义，索引名必须指定。另外，不能用CREATE INDEX语句创建PRIMARY KEY索引。</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div> </div>\r\n<div><span style=\"text-decoration: underline;\"><em>2.索引类型</em></span></div>\r\n<div>普通索引INDEX：适用于name、email等一般属性</div>\r\n<div>唯一索引UNIQUE：与普通索引类似，不同的是唯一索引要求索引字段值在表中是唯一的，这一点和主键索引类似，但是不同的是，唯一索引允许有空值。唯一索引一般适用于身份证号码、用户账号等不允许有重复的属性字段上。</div>\r\n<div>主键索引：其实就是主键，一般在建表时就指定了，不需要额外添加。</div>\r\n<div>全文检索：只适用于VARCHAR和Text类型的字段。</div>\r\n<div>注意：全文索引和普通索引是有很大区别的，如果建立的是普通索引，一般会使用like进行模糊查询，只会对查询内容前一部分有效，即只对前面不使用通配符的查询有效，如果前后都有通配符，普通索引将不会起作用。对于全文索引而言在查询时有自己独特的匹配方式，例如我们在对一篇文章的标题和内容进行全文索引时：</div>\r\n<div>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">ALTER</span> <span style=\"color: #0000ff;\">TABLE</span> article <span style=\"color: #0000ff;\">ADD</span> FULLTEXT (<span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">title</span><span style=\"color: #ff0000;\">\'</span>, <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">content</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">); 在进行检索时就需要使用如下的语法进行检索：\r\n</span><span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">FROM</span> article <span style=\"color: #0000ff;\">WHERE</span> MATCH(<span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">title</span><span style=\"color: #ff0000;\">\'</span>, <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">content</span><span style=\"color: #ff0000;\">\'</span>) AGAINST (<span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">查询字符串</span><span style=\"color: #ff0000;\">\'</span>);</pre>\r\n</div>\r\n</div>\r\n<div>在使用全文检索时的注意事项：</div>\r\n<div>MySql自带的全文索引只能用于数据库引擎为MYISAM的数据表，如果是其他数据引擎，则全文索引不会生效。此外，MySql自带的全文索引只能对英文进行全文检索，目前无法对中文进行全文检索。如果需要对包含中文在内的文本数据进行全文检索，我们需要采用Sphinx（斯芬克斯）/Coreseek技术来处理中文。另外使用MySql自带的全文索引时，如果查询字符串的长度过短将无法得到期望的搜索结果。MySql全文索引所能找到的词默认最小长度为4个字符。另外，如果查询的字符串包含停止词，那么该停止词将会被忽略。</div>\r\n<div> </div>\r\n<div><span style=\"text-decoration: underline;\"><em>3.组合索引</em></span></div>\r\n<div>组合索引又称多列索引，就是建立索引时指定多个字段属性。有点类似于字典目录，比如查询 \'guo\' 这个拼音的字时，首先查找g字母，然后在g的检索范围内查询第二个字母为u的列表，最后在u的范围内查找最后一个字母为o的字。比如组合索引(a,b,c)，abc都是排好序的，在任意一段a的下面b都是排好序的，任何一段b下面c都是排好序的</div>\r\n<div>组合索引的生效原则是  从前往后依次使用生效，如果中间某个索引没有使用，那么断点前面的索引部分起作用，断点后面的索引没有起作用；</div>\r\n<div>造成断点的原因：</div>\r\n<div>前边的任意一个索引没有参与查询，后边的全部不生效。</div>\r\n<div>前边的任意一个索引字段参与的是范围查询，后面的不会生效。</div>\r\n<div>断点跟索引字字段在SQL语句中的位置前后无关，只与是否存在有关。在网上找到了很好的示例：</div>\r\n<div>比如：</div>\r\n<div>\r\n<div class=\"cnblogs_code\">\r\n<pre> <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #808080;\">and</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">45</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">5</span><span style=\"color: #000000;\"> .... #这种三个索引顺序使用中间没有断点，全部发挥作用；\r\n </span><span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">5</span><span style=\"color: #000000;\">... #这种情况下b就是断点，a发挥了效果，c没有效果\r\n </span><span style=\"color: #0000ff;\">where</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">4</span><span style=\"color: #000000;\">... #这种情况下a就是断点，在a后面的索引都没有发挥作用，这种写法联合索引没有发挥任何效果；\r\n </span><span style=\"color: #0000ff;\">where</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">45</span> <span style=\"color: #808080;\">and</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">5</span> .... #这个跟第一个一样，全部发挥作用，abc只要用上了就行，跟写的顺序无关</pre>\r\n</div>\r\n</div>\r\n<div>（a,b,c） 三个列上加了联合索引（是联合索引 不是在每个列上单独加索引）而是建立了a,(a,b),(a,b,c)三个索引，另外(a,b,c)多列索引和 (a,c,b)是不一样的。<br />具体实例可以说明：</div>\r\n<div>\r\n<div class=\"cnblogs_code\">\r\n<pre>(<span style=\"color: #800000; font-weight: bold;\">0</span>) <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> mytable <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #808080;\">and</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">5</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">4</span><span style=\"color: #000000;\">;\r\n#abc三个索引都在where条件里面用到了，而且都发挥了作用\r\n(</span><span style=\"color: #800000; font-weight: bold;\">1</span>) <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> mytable <span style=\"color: #0000ff;\">where</span>  c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">4</span> <span style=\"color: #808080;\">and</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">6</span> <span style=\"color: #808080;\">and</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span><span style=\"color: #000000;\">;\r\n#这条语句为了说明 组合索引与在SQL中的位置先后无关，where里面的条件顺序在查询之前会被mysql自动优化，效果跟上一句一样\r\n(</span><span style=\"color: #800000; font-weight: bold;\">2</span>) <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> mytable <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">7</span><span style=\"color: #000000;\">;\r\n#a用到索引，b没有用，所以c是没有用到索引效果的\r\n(</span><span style=\"color: #800000; font-weight: bold;\">3</span>) <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> mytable <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #808080;\">and</span> b<span style=\"color: #808080;\">></span><span style=\"color: #800000; font-weight: bold;\">7</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span><span style=\"color: #000000;\">;\r\n#a用到了，b也用到了，c没有用到，这个地方b是范围值，也算断点，只不过自身用到了索引\r\n(</span><span style=\"color: #800000; font-weight: bold;\">4</span>) <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> mytable <span style=\"color: #0000ff;\">where</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">4</span><span style=\"color: #000000;\">;\r\n#因为a索引没有使用，所以这里 bc都没有用上索引效果\r\n(</span><span style=\"color: #800000; font-weight: bold;\">5</span>) <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> mytable <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">></span><span style=\"color: #800000; font-weight: bold;\">4</span> <span style=\"color: #808080;\">and</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">7</span> <span style=\"color: #808080;\">and</span> c<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">9</span><span style=\"color: #000000;\">;\r\n#a用到了  b没有使用，c没有使用\r\n(</span><span style=\"color: #800000; font-weight: bold;\">6</span>) <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> mytable <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span><span style=\"color: #000000;\"> b;\r\n#a用到了索引，b在结果排序中也用到了索引的效果，前面说了，a下面任意一段的b是排好序的\r\n(</span><span style=\"color: #800000; font-weight: bold;\">7</span>) <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> mytable <span style=\"color: #0000ff;\">where</span> a<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span><span style=\"color: #000000;\"> c;\r\n#a用到了索引，但是这个地方c没有发挥排序效果，因为中间断点了，使用 explain 可以看到 filesort\r\n(</span><span style=\"color: #800000; font-weight: bold;\">8</span>) <span style=\"color: #0000ff;\">select</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">from</span> mytable <span style=\"color: #0000ff;\">where</span> b<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3</span> <span style=\"color: #0000ff;\">order</span> <span style=\"color: #0000ff;\">by</span><span style=\"color: #000000;\"> a;\r\n#b没有用到索引，排序中a也没有发挥索引效果</span></pre>\r\n</div>\r\n</div>\r\n<div>\r\n<div><em>注意：在查询时，MYSQL只能使用一个索引，如果建立的是多个单列的普通索引，在查询时会根据查询的索引字段，从中选择一个限制最严格的单例索引进行查询。别的索引都不会生效。</em></div>\r\n</div>\r\n<div> </div>\r\n<div><em><span style=\"text-decoration: underline;\">4.查看索引</span></em></div>\r\n<div>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql<span style=\"color: #808080;\">></span> show <span style=\"color: #0000ff;\">index</span> <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> tblname;\r\nmysql</span><span style=\"color: #808080;\">></span> show keys <span style=\"color: #0000ff;\">from</span> tblname;</pre>\r\n</div>\r\n</div>\r\n<div> </div>\r\n<div><span style=\"text-decoration: underline;\"><em>5.删除索引</em></span></div>\r\n<div>删除索引的mysql格式 :DORP INDEX IndexName ON tab_name；</div>\r\n<div>注意：不能使用索引的情况 </div>\r\n<div>对于普通索引而言 在使用like进行通配符模糊查询时,如果首尾之间都使用了通配符，索引时无效的。</div>\r\n<div>假设查询内容的关键词为\'abc\'</div>\r\n<div>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">FROM</span> tab_name <span style=\"color: #0000ff;\">WHERE</span> index_column <span style=\"color: #808080;\">LIKE</span>  <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">abc%</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">;  #索引是有效的\r\n</span><span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">FROM</span> tab_name <span style=\"color: #0000ff;\">WHERE</span> index_column <span style=\"color: #808080;\">LIKE</span>  <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">%abc</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">;  #索引是无效的\r\n</span><span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">FROM</span> tab_name <span style=\"color: #0000ff;\">WHERE</span> index_column <span style=\"color: #808080;\">LIKE</span>  <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">%cba</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">;  #索引是有效的\r\n</span><span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">FROM</span> tab_name <span style=\"color: #0000ff;\">WHERE</span> index_column <span style=\"color: #808080;\">LIKE</span>  <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">%abc%</span><span style=\"color: #ff0000;\">\'</span>;  #索引是无效的</pre>\r\n</div>\r\n</div>\r\n<div>\r\n<div>当检索的字段内容比较大而且检索内容前后部分都不确定的情况下，可以改为全文索引，并使用特定的检索方式。</div>\r\n<div> </div>\r\n<div><strong>(五)在join表的时候使用相当类型的列，并将其索引</strong></div>\r\n如果在程序中有很多JOIN查询，应该保证两个表中join的字段时被建立过索引的。这样MySQL颞部会启动优化JOIN的SQL语句的机制。注意：这些被用来JOIN的字段，应该是相同类型的。例如：如果要把 DECIMAL 字段和一个 INT 字段Join在一起，MySQL就无法使用它们的索引。对于那些STRING类型，还需要有相同的字符集才行。（两个表的字符集有可能不一样）  </div>\r\n<div>例如：</div>\r\n<div>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">SELECT</span> company_name <span style=\"color: #0000ff;\">FROM</span> users <span style=\"color: #808080;\">LEFT</span> <span style=\"color: #808080;\">JOIN</span> companies <span style=\"color: #0000ff;\">ON</span> (users.state <span style=\"color: #808080;\">=</span> companies.state) <span style=\"color: #0000ff;\">WHERE</span> users.id <span style=\"color: #808080;\">=</span> &ldquo;<span style=\"color: #ff00ff;\">user_id</span>&rdquo;</pre>\r\n</div>\r\n两个 state 字段应该是被建过索引的，而且应该是相当的类型，相同的字符集。</div>\r\n<div> </div>\r\n<div><strong>(六)切记不要使用ORDER BY RAND()</strong></div>\r\n<div>如果你真的想把返回的数据行打乱了，你有N种方法可以达到这个目的。这样使用只让你的数据库的性能呈指数级的下降。这里的问题是：MySQL会不得不去执行RAND()函数（很耗CPU时间），而且这是为了每一行记录去记行，然后再对其排序。就算是你用了Limit 1也无济于事（因为要排序） </div>\r\n<div> </div>\r\n<div><strong>(七)避免使用SELECT *</strong></div>\r\n<div>从数据库里读出越多的数据，那么查询就会变得越慢。并且，如果我们的数据库服务器和WEB服务器是两台独立的服务器的话，这还会增加网络传输的负载。 所以，我们应该养成一个需要什么就取什么的好的习惯。</div>\r\n<div> </div>\r\n<div><strong>(八)永远为每张表设置一个ID主键</strong></div>\r\n<div>我们应该为数据库里的每张表都设置一个ID做为其主键，而且最好的是一个INT型的（推荐使用UNSIGNED），并设置上自动增加的 AUTO_INCREMENT标志。 就算是我们 users 表有一个主键叫 &ldquo;email&rdquo;的字段，我们也别让它成为主键。使用 VARCHAR 类型来当主键会使用得性能下降。另外，在我们的程序中，我们应该使用表的ID来构造我们的数据结构。 而且，在MySQL数据引擎下，还有一些操作需要使用主键，在这些情况下，主键的性能和设置变得非常重要，比如，集群，分区&hellip;&hellip; 在这里，只有一个情况是例外，那就是&ldquo;关联表&rdquo;的&ldquo;外键&rdquo;，也就是说，这个表的主键，通过若干个别的表的主键构成。我们把这个情况叫做&ldquo;外键&rdquo;。比如：有一个&ldquo;学生表&rdquo;有学生的ID，有一个&ldquo;课程表&rdquo;有课程ID，那么，&ldquo;成绩表&rdquo;就是&ldquo;关联表&rdquo;了，其关联了学生表和课程表，在成绩表中，学生ID和课程ID叫&ldquo;外键&rdquo;其共同组成主键。&nbsp;</div>\r\n<div> </div>\r\n<div><strong>(九)使用ENUM而不是VARCHAR</strong></div>\r\n<div>ENUM 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美。 如果我们有一个字段，比如&ldquo;性别&rdquo;，&ldquo;国家&rdquo;，&ldquo;民族&rdquo;，&ldquo;状态&rdquo;或&ldquo;部门&rdquo;，我们知道这些字段的取值是有限而且固定的，那么，我们应该使用 ENUM 而不是 VARCHAR。</div>\r\n<div> </div>\r\n<div><strong>(十)尽可能的不要赋值为NULL</strong></div>\r\n<div>如果不是特殊情况，尽可能的不要使用NULL。在MYSQL中对于INT类型而言，EMPTY是0，而NULL是空值。而在Oracle中 NULL和EMPTY的字符串是一样的。NULL也需要占用存储空间，并且会使我们的程序判断时更加复杂。现实情况是很复杂的，依然会有些情况下，我们需要使用NULL值。 下面摘自MySQL自己的文档： &ldquo;NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.&rdquo; </div>\r\n<div> </div>\r\n<div><strong>(十一) 固定长度的表会更快</strong></div>\r\n<div>如果表中的所有字段都是&ldquo;固定长度&rdquo;的，整个表会被认为是 &ldquo;static&rdquo; 或 &ldquo;fixed-length&rdquo;。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要我们包括了其中一个这些字段，那么这个表就不是&ldquo;固定长度静态表&rdquo;了，这样，MySQL 引擎会用另一种方法来处理。 固定长度的表会提高性能，因为MySQL搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。 并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论我们用不用，他都是要分配那么多的空间。另外在取出值的时候要使用trim去除空格 </div>\r\n<div> </div>\r\n<div><strong>(十二)垂直分割</strong></div>\r\n<div>&ldquo;垂直分割&rdquo;是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。</div>\r\n<div> </div>\r\n<div><strong>(十三)拆分大的DELETE或INSERT</strong></div>\r\n<div>如果我们需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，我们需要非常小心，要避免我们的操作让我们的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。Apache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。如果我们把我们的表锁上一段时间，比如30秒钟，那么对于一个有很高访问量的站点来说，这30秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让我们的WEB服务Crash，还可能会让我们的整台服务器马上掛了。所以在使用时使用LIMIT 控制数量操作记录的数量。</div>\r\n<div> </div>\r\n<div><strong>(十四)越小的列会越快  </strong><br />对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把我们的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。 参看 MySQL 的文档 Storage Requirements 查看所有的数据类型。 如果一个表只会有几列罢了（比如说字典表，配置表），那么，我们就没有理由使用 INT 来做主键，使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些。如果我们不需要记录时间，使用 DATE 要比 DATETIME 好得多。&nbsp;</div>\r\n<div> </div>\r\n<div><strong>(十五)选择正确的存储引擎</strong></div>\r\n<div>在MYSQL中有两个存储引擎MyISAM和InnoDB,每个引擎都有利有弊。</div>\r\n<div>MyISAM适合于一些需要大量查询的应用，但是对于大量写操作的支持不是很好。甚至一个update语句就会进行锁表操作，这时读取这张表的所有进程都无法进行操作直至写操作完成。另外MyISAM对于SELECT  COUNT(*)这类的计算是超快无比的。InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。它支持&ldquo;行锁&rdquo; ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</div>\r\n<div>MyISAM是MYSQL5.5版本以前默认的存储引擎，基于传统的ISAM类型，支持B-Tree，全文检索，但是不是事务安全的，而且不支持外键。不具有原子性。支持锁表。</div>\r\n<div>InnoDB是事务型引擎，支持ACID事务(实现4种事务隔离机制)、回滚、崩溃恢复能力、行锁。以及提供与Oracle一致的不加锁的读取方式。InnoDB存储它的表和索引在一个表空间中，表空间可以包含多个文件。</div>\r\n<div>MyISAM和InnoDB比较，如下图所示：</div>\r\n<div><img src=\"https://img-blog.csdn.net/20170910135801950?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzA4NzUxMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\" /></div>\r\n<div>对于Linux版本的MYSQL  配置文件在 /etc/my.cnf中</div>\r\n<div><img src=\"https://img-blog.csdn.net/20170910140247051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzA4NzUxMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\" /></div>\r\n<div>在5.5之后默认的存储引擎是INNODB</div>\r\n<div>可以单独进行修改也可以在创建表时修改：</div>\r\n<div>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">ALTER</span> <span style=\"color: #0000ff;\">TABLE</span> tab_name ENGINE INNODB；</pre>\r\n</div>\r\n</div>\r\n<div> </div>\r\n<div><strong>(十六)小心永久链接</strong></div>\r\n<div>&ldquo;永久链接&rdquo;的目的是用来减少重新创建MySQL链接的次数。当一个链接被创建了，它会永远处在连接的状态，就算是数据库操作已经结束了。而且，自从我们的Apache开始重用它的子进程后&mdash;&mdash;也就是说，下一次的HTTP请求会重用Apache的子进程，并重用相同的 MySQL 链接。&nbsp;<br />而且，Apache 运行在极端并行的环境中，会创建很多很多的了进程。这就是为什么这种&ldquo;永久链接&rdquo;的机制工作地不好的原因。在我们决定要使用&ldquo;永久链接&rdquo;之前，我们需要好好地考虑一下我们的整个系统的架构。</div>\r\n<div> </div>\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n</div>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/12/9298747.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('40', '0', 'MySQL性能优化之max_connections参数', '', '', '', '<p>很多开发人员都会遇见&rdquo;MySQL: ERROR 1040: Too many connections&rdquo;的异常情况，造成这种情况的一种原因是访问量过高，MySQL服务器抗不住，这个时候就要考虑增加从服务器分散读压力；另一种原因就是MySQL配置文件中max_connections值过小。</p>\r\n<p>首先，我们来查看mysql的最大连接数：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql<span style=\"color: #808080;\">></span> show variables <span style=\"color: #808080;\">like</span> <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">%max_connections%</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Variable_name  <span style=\"color: #808080;\">|</span> Value <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> max_connections <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">151</span>  <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #800000; font-weight: bold;\">1</span> row <span style=\"color: #808080;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800000; font-weight: bold;\">0.00</span> sec)</pre>\r\n</div>\r\n<p>其次，查看服务器响应的最大连接数：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql<span style=\"color: #808080;\">></span> show global status <span style=\"color: #808080;\">like</span> <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">Max_used_connections</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Variable_name    <span style=\"color: #808080;\">|</span> Value <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Max_used_connections <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">2</span>   <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------+-------+</span>\r\n<span style=\"color: #800000; font-weight: bold;\">1</span> row <span style=\"color: #808080;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800000; font-weight: bold;\">0.00</span> sec)</pre>\r\n</div>\r\n<p>可以看到服务器响应的最大连接数为2，远远低于mysql服务器允许的最大连接数值。</p>\r\n<p>对于mysql服务器最大连接数值的设置范围比较理想的是：服务器响应的最大连接数值占服务器上限连接数值的比例值在10%以上，如果在10%以下，说明mysql服务器最大连接上限值设置过高。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>Max_used_connections <span style=\"color: #808080;\">/</span> max_connections <span style=\"color: #808080;\">*</span> <span style=\"color: #800000; font-weight: bold;\">100</span><span style=\"color: #808080;\">%</span> <span style=\"color: #808080;\">=</span> <span style=\"color: #800000; font-weight: bold;\">2</span><span style=\"color: #808080;\">/</span><span style=\"color: #800000; font-weight: bold;\">151</span> <span style=\"color: #808080;\">*</span><span style=\"color: #800000; font-weight: bold;\">100</span><span style=\"color: #808080;\">%</span> &asymp; <span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #808080;\">%</span></pre>\r\n</div>\r\n<p>我们可以看到占比远低于10%（因为这是本地测试服务器，结果值没有太大的参考意义，大家可以根据实际情况设置连接数的上限值）。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql<span style=\"color: #808080;\">></span> show variables <span style=\"color: #808080;\">like</span> <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">%max_connections%</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Variable_name  <span style=\"color: #808080;\">|</span> Value <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> max_connections <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">151</span>  <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #800000; font-weight: bold;\">1</span> row <span style=\"color: #808080;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800000; font-weight: bold;\">0.19</span><span style=\"color: #000000;\"> sec)\r\nmysql</span><span style=\"color: #808080;\">></span> show global status <span style=\"color: #808080;\">like</span> <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">Max_used_connections</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Variable_name    <span style=\"color: #808080;\">|</span> Value <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Max_used_connections <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">44</span>  <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">--------------------+-------+</span>\r\n<span style=\"color: #800000; font-weight: bold;\">1</span> row <span style=\"color: #808080;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800000; font-weight: bold;\">0.17</span> sec)</pre>\r\n</div>\r\n<p>这里的最大连接数占上限连接数的30％左右。</p>\r\n<p>上面我们知道怎么查看mysql服务器的最大连接数值，并且知道了如何判断该值是否合理，下面我们就来介绍一下如何设置这个最大连接数值。</p>\r\n<p>方法1：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>mysql<span style=\"color: #808080;\">></span> <span style=\"color: #0000ff;\">set</span> GLOBAL max_connections<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">256</span><span style=\"color: #000000;\">;\r\nQuery OK, </span><span style=\"color: #800000; font-weight: bold;\">0</span> rows affected (<span style=\"color: #800000; font-weight: bold;\">0.00</span><span style=\"color: #000000;\"> sec)\r\nmysql</span><span style=\"color: #808080;\">></span> show variables <span style=\"color: #808080;\">like</span> <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">%max_connections%</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> Variable_name  <span style=\"color: #808080;\">|</span> Value <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #808080;\">|</span> max_connections <span style=\"color: #808080;\">|</span> <span style=\"color: #800000; font-weight: bold;\">256</span>  <span style=\"color: #808080;\">|</span>\r\n<span style=\"color: #808080;\">+</span><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\">---------------+-------+</span>\r\n<span style=\"color: #800000; font-weight: bold;\">1</span> row <span style=\"color: #808080;\">in</span> <span style=\"color: #0000ff;\">set</span> (<span style=\"color: #800000; font-weight: bold;\">0.00</span> sec)</pre>\r\n</div>\r\n<p>方法2：</p>\r\n<p>修改mysql配置文件my.cnf，在[mysqld]段中添加或修改max_connections值：max_connections=128</p>\r\n<p>重启mysql服务即可。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/12/9298461.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('41', '0', 'PHP环境下Memcache的使用方法', '', '', '', '<p>一、Memcache简介</p>\r\n<p>Memcache是danga.com的一个项目，最早是为LiveJournal服务的，目前全世界不少人使用这个缓存项目来构建自己大负载的网站，来分担数据库的压力。它可以对应任意多个链接，使用非阻塞的网络IO。由于它的工作机制是在内存中开辟一块空间，然后建立一个HashTable，Memcached管理这些HashTable，所以速度非常快。</p>\r\n<p> </p>\r\n<p>二、Memcache和Memcached的区别</p>\r\n<p>为什么会有Memcache和Memcached两个名称？其实Memcache是这个项目的名称，而Memcached是他服务器端的主程序文件。一个是项目名称，一个是主程序文件名。</p>\r\n<p> </p>\r\n<p>三、Memcache的服务器端和客户端安装</p>\r\n<p>分为两个过程：Memcache服务器端的安装和Memcached客户端的安装</p>\r\n<p>所谓服务器端的安装就在在服务器（一般都是linux系统）上安装Memcache实现数据的存储。</p>\r\n<p>所谓客户端的安装就是指php去使用服务器端的Memcache提供的函数，需要php添加扩展。</p>\r\n<p> </p>\r\n<p>四、PHP的Memcache客户端所有方法总结</p>\r\n<p>memcache函数所有的方法列表如下：</p>\r\n<p>Memcache::add - 添加一个值，如果已经存在，则返回false</p>\r\n<p>Memcache::addServer - 添加一个可供使用的服务器地址</p>\r\n<p>Memcache::close - 关闭一个Memcache对象</p>\r\n<p>Memcache::connect - 创建一个Memcache对象</p>\r\n<p>memcache_debug - 控制调试功能</p>\r\n<p>Memcache::decrement - 对保存的某一个key中的值进行减法操作</p>\r\n<p>Memcache::delete - 删除一个key值</p>\r\n<p>Memcache::flush - 清除所有缓存的数据</p>\r\n<p>Memcache::get - 获取一个key值</p>\r\n<p>Memcache::getExtendedStats - 获取进程池中所有进程的运行系统统计</p>\r\n<p>Memcache::getServerStatus - 获取运行服务器的参数</p>\r\n<p>Memcache::getStats - 返回服务器的一些运行统计信息</p>\r\n<p>Memcache::getVersion - 返回运行的Memcache的版本信息</p>\r\n<p>Memcache::increment - 对保存的某个key中的值进行加法操作</p>\r\n<p>Memcache::pconnect - 创建一个Memcache的持久连接对象</p>\r\n<p>Memcache::replace - 对一个已有的key进行覆写操作</p>\r\n<p>Memcache::set - 添加一个值，如果已经存在，则覆写</p>\r\n<p>Memcache::setCompressThreshold - 对大于某一大小的数据进行压缩</p>\r\n<p>Memcache::setServerParams - 在运行时修改服务器的参数</p>\r\n<p> </p>\r\n<p>五、PHP的Memcache操作方法分解</p>\r\n<p> </p>\r\n<p>Memcache::add用法：</p>\r\n<p> </p>\r\n<p>bool Memcache::add(string $key,mixed $var[,int $flag[,int $expire]]);</p>\r\n<p>说明：</p>\r\n<p>如果$key不存在的时候，使用这个函数来存储$var的值。功能相同的函数memcache_add()。</p>\r\n<p> </p>\r\n<p>参数：</p>\r\n<p>$key：将要存储的键值。</p>\r\n<p>$var：存储的值，字符型和整数型会按照原值保存，其他类型自动序列化以后保存。</p>\r\n<p>$flag：是否用MEMCACHE_COMPRESSED来压缩存储的值,，true表示压缩，false表示不压缩。</p>\r\n<p>$expire：存储值得过期时间，如果0表示不会过期，你可以用unix时间戳或者描述来表示从现在开始时间，但是你在使用秒数表示的时候，不要超过2592000秒（表示30天）。</p>\r\n<p> </p>\r\n<p>返回值：如果成功返回true，失败则返回false。如果$key值已经存在，则会返回false，其他情况下Memcache::add()用法类似于Memcache::set()。</p>\r\n<p> </p>\r\n<p>示例代码：</p>\r\n<p><?php</p>\r\n<p>//面向对象</p>\r\n<p>$memcache = new Memcache;</p>\r\n<p>$memcache->connect(\'127.0.0.1\',11211);</p>\r\n<p>$memcache->add(\'var_key\',\'test variable\',false,30);</p>\r\n<p>echo $memcache->get(\'var_key\').\'<br>\';</p>\r\n<p>$memcache->close();</p>\r\n<p> </p>\r\n<p>//面向过程</p>\r\n<p>$memcache = memcache_connect(\'127.0.0.1\',11211);</p>\r\n<p>memcache_add($memcache,\'var_key\',\'test variable\',false,30);</p>\r\n<p>echo memcache_get($memcache,\'var_key\');</p>\r\n<p>memcache_close($memcache);</p>\r\n<p>?></p>\r\n<p> </p>\r\n<p>Memcache::addServer用法：</p>\r\n<p> </p>\r\n<p>bool Memcache::addServer ( string $host [, int $port [, bool $persistent [, int $weight [, int$timeout [, int $retry_interval [, bool $status [, callback $failure_callback ]]]]]]] )</p>\r\n<p> </p>\r\n<p>说明：</p>\r\n<p>添加一个可供使用的服务器地址到连接池中，连接用Memcache::addServer打开，脚本执行完后自动关闭，或者可以用Memcache::colse()手动关闭。相同的函数时memcache_add_server()。</p>\r\n<p> </p>\r\n<p>当用这个方法的时候（相对于Memcache::connect()和Memcache::pconnect()方法），网络连接只有等需要的时候才会连接，因此不会因为增加很多的服务器到连接池而增加系统负担，因为很多服务器可能没有使用。</p>\r\n<p>故障恢复会发生在这个方法执行的任何阶段，只要其他的服务器是正常的，这些连接请求的失败用户不会注意到。任何一种socket或者memcached服务器级的错误可以触发故障恢复。正常的客户端错误比如增加一个存在的键值不会引发故障恢复。</p>\r\n<p> </p>\r\n<p>参数：&nbsp;<br />\r\n$host服务器的地址 <br />\r\n$port服务器端口&nbsp;<br />\r\n$persistent是否是一个持久连接&nbsp;<br />\r\n$weight这台服务器在所有服务器中所占的权重 <br />\r\n$timeout连接的持续时间&nbsp;<br />\r\n$retry_interval连接重试的间隔时间，默认为15,设置为-1表示不进行重试&nbsp;<br />\r\n$status控制服务器的在线状态&nbsp;<br />\r\n$failure_callback允许设置一个回掉函数来处理错误信息。&nbsp;</p>\r\n<p> </p>\r\n<p>返回值： <br />\r\n如果成功则返回 TRUE，失败则返回 FALSE。</p>\r\n<p> </p>\r\n<p>示例代码：</p>\r\n<p><?php </p>\r\n<p>//面向对象</p>\r\n<p>$memcache = new\r\nMemcache;</p>\r\n<p>$memcache->addServer(\'127.0.0.1\',11211);</p>\r\n<p>$memcache->addServer(\'182.92.233.100\',11211);</p>\r\n<p>//$memcache->flush();</p>\r\n<p>var_dump($memcache->add(\'var_key\',\'test\r\nvariable1111\',false,24*60*60));</p>\r\n<p>echo\r\n$memcache->get(\'var_key\');</p>\r\n<p>$memcache->close();</p>\r\n<p> </p>\r\n<p>//面向过程</p>\r\n<p>$memcache =\r\nmemcache_connect(\'10.0.3.73\',11211);</p>\r\n<p>memcache_add_server($memcache,\'182.92.233.100\',11211);</p>\r\n<p>var_dump(memcache_get_extended_stats($memcache));</p>\r\n<p>memcache_close($memcache);</p>\r\n<p>?></p>\r\n<p> </p>\r\n<p>Memcache::close用法：</p>\r\n<p> </p>\r\n<p>bool\r\nMemcache::close(viod);</p>\r\n<p> </p>\r\n<p>说明：</p>\r\n<p>关闭memcache服务器连接。这个函数不会关闭长连接，长连接只有在web服务器关闭或者重启的时候才会关闭。相同函数memcache_close()。</p>\r\n<p> </p>\r\n<p>返回值：</p>\r\n<p>如果成功则返回true，失败则返回false。</p>\r\n<p> </p>\r\n<p>示例代码：</p>\r\n<p><?php</p>\r\n<p>//面向对象</p>\r\n<p>$memcache = new\r\nMemcache;</p>\r\n<p>$memcache->connect(\'127.0.0.1\',11211);</p>\r\n<p>if($memcache->close()){</p>\r\n<p>      echo \'已断开与服务器的链接&lt;br>\';</p>\r\n<p>}</p>\r\n<p>//面向过程</p>\r\n<p>$memcache =\r\nmemcache_connect(\'127.0.0.1\',11211);</p>\r\n<p>if(memcache_close($memcache)){</p>\r\n<p>      echo \'已断开与服务器的链接&lt;br>\';</p>\r\n<p>}</p>\r\n<p>?></p>\r\n<p> </p>\r\n<p>Memcache::connect用法</p>\r\n<p> </p>\r\n<p>bool\r\nMemcache::connect(string $host[,int $port[,int $timeout]]);</p>\r\n<p> </p>\r\n<p>说明：</p>\r\n<p>打开memcached服务器连接，建立一个到memcached服务器的连接，用Memcache::connect打开的连接会在脚本执行完毕后自动关闭。你也可以用Memcache::close()去关闭连接。相同的函数时memcache_close()。</p>\r\n<p> </p>\r\n<p>参数：</p>\r\n<p>$host：指向memcached正在收听的连接主机。</p>\r\n<p>$port：指向memcached正在收听的连接端口。</p>\r\n<p>$timeout：用于连接守护进程的秒数，当你改变默认1秒的值时，你需要考虑一下，如果你的连接太慢的话，你可能会失去缓存的优势。</p>\r\n<p> </p>\r\n<p>返回值：</p>\r\n<p>如果成功则返回true，失败则返回false。</p>\r\n<p> </p>\r\n<p>示例代码：</p>\r\n<p><?php </p>\r\n<p>//面向对象</p>\r\n<p>$memcache = new\r\nMemcache;</p>\r\n<p>$memcache->connect(\'127.0.0.1\',11211);</p>\r\n<p>$memcache->close();</p>\r\n<p> </p>\r\n<p>//面向过程</p>\r\n<p>$memcache =\r\nmemcache_connect(\'127.0.0.1\',11211);</p>\r\n<p>memcache_close($memcache);</p>\r\n<p> </p>\r\n<p>?></p>\r\n<p> </p>\r\n<p>Memcache::debug用法：</p>\r\n<p> </p>\r\n<p>bool  memcache_debug(bool $on_off);</p>\r\n<p> </p>\r\n<p>说明：</p>\r\n<p>控制调试功能，前提是php在编译的时候使用了-enable_debug选项，否则这个函数不会有作用。</p>\r\n<p> </p>\r\n<p>参数：</p>\r\n<p>$on_off：true表示开启调试，false表示关闭调试</p>\r\n<p> </p>\r\n<p>返回值：</p>\r\n<p>如果php在编译的时候使用了-enable-debug选项，返回true，否则返回false。</p>\r\n<p> </p>\r\n<p>Memcache::decrement方法：</p>\r\n<p> </p>\r\n<p>Int Memcache::decrement(string $key[,int value]);</p>\r\n<p> </p>\r\n<p>说明</p>\r\n<p>Memcache::decrement方法的作用是对保存的某个key的值进行减法操作，用法跟Memcache::increment类似。</p>\r\n<p> </p>\r\n<p>参数</p>\r\n<p>Key： 想要减少的键的名字</p>\r\n<p>Value：想要减少的值</p>\r\n<p> </p>\r\n<p>返回值：</p>\r\n<p>如果成功，返回被减少后的值，如果失败返回false</p>\r\n<p> </p>\r\n<p>示例代码：</p>\r\n<p><?php </p>\r\n<p>//面向对象</p>\r\n<p>$memcache = new\r\nMemcache;</p>\r\n<p>$memcache->connect(\'127.0.0.1\',11211);</p>\r\n<p>$memcache->flush();</p>\r\n<p>$memcache->set(\'var_key\',8,false,24*60*60);</p>\r\n<p>echo\r\n$memcache->get(\'var_key\').\'<br>\';</p>\r\n<p>echo\r\n$memcache->increment(\'var_key\',4).\'<br>\';</p>\r\n<p>echo\r\n$memcache->decrement(\'var_key\',5).\'<br>\';</p>\r\n<p>$memcache->close();</p>\r\n<p>//面向过程</p>\r\n<p>$memcache =\r\nmemcache_connect(\'127.0.0.1\',11211);</p>\r\n<p>memcache_flush($memcache);</p>\r\n<p>memcache_set($memcache,\'var_key\',8,false,24*60*60);</p>\r\n<p>echo\r\nmemcache_get($memcache,\'var_key\').\'<br>\';</p>\r\n<p>echo\r\nmemcache_increment($memcache,\'var_key\',4).\'<br>\';</p>\r\n<p>echo\r\nmemcache_decrement($memcache,\'var_key\',5).\'<br>\';</p>\r\n<p>memcache_close($memcache);</p>\r\n<p>?></p>\r\n<p> </p>\r\n<p>Memcache::delete用法</p>\r\n<p> </p>\r\n<p>bool\r\nMemcache::delete(string $key[,int timeout]);</p>\r\n<p> </p>\r\n<p>说明</p>\r\n<p>删除一个key值，如果参数timeout被设置，那么存储的值会在设置的秒数以后过期，你也可以用函数memcache_delete()。</p>\r\n<p> </p>\r\n<p>返回值</p>\r\n<p>如果成功则返回true，失败则返回false。</p>\r\n<p> </p>\r\n<p>示例代码</p>\r\n<p><?php</p>\r\n<p>//面向对象</p>\r\n<p>$memcache = new\r\nMemcache;</p>\r\n<p>$memcache->connect(\'127.0.0.1\',11211);</p>\r\n<p>$memcache->flush();</p>\r\n<p>$memcache->set(\'var_key\',8,false,24*60*60);</p>\r\n<p>echo\r\n$memcache->get(\'var_key\').\'<br>\';</p>\r\n<p>$memcache->delete(\'var_key\',0);</p>\r\n<p>echo\r\n$memcache->get(\'var_key\').\'<br>\';</p>\r\n<p>$memcache->close();</p>\r\n<p>//面向过程</p>\r\n<p>$memcache =\r\nmemcache_connect(\'127.0.0.1\',11211);</p>\r\n<p>memcache_flush($memcache);</p>\r\n<p>memcache_set($memcache,\'var_key\',8,false,24*60*60);</p>\r\n<p>echo\r\nmemcache_get($memcache,\'var_key\').\'<br>\';</p>\r\n<p>memcache_delete($memcache,\'var_key\',0);</p>\r\n<p>echo\r\nmemcache_get($memcache,\'var_key\').\'<br>\';</p>\r\n<p>memcache_close($memcache);</p>\r\n<p> </p>\r\n<p>?></p>\r\n<p>系统提示：</p>\r\n<p>PHP\r\nNotice:  Memcache::delete(): Server 192.168.10.131 (tcp 11211) failed\r\nwith: CLIENT_ERROR bad command line format.  Usage: delete\r\n<key> [noreply]</p>\r\n<p> </p>\r\n<p>memcache服务端版本&gt;=1.4.3的delete方法与之前的版本有调整，因此有这个问题。最好解决是把linux下的memcache服务端版本改为1.4.2版本的。</p>\r\n<p> </p>\r\n<p> </p>\r\n<p>Memcache::flush方法</p>\r\n<p> </p>\r\n<p>bool\r\nMemcache::flush(viod); </p>\r\n<p> </p>\r\n<p>说明</p>\r\n<p>清除所有缓存数据。Memcache::flush实际上没有释放资源，它仅仅将所有的缓存标记为过期，这样可以使新的缓存覆盖被占用的内存空间。相同函数memcache_flush()。</p>\r\n<p> </p>\r\n<p>返回值</p>\r\n<p>如果成功则返回true，失败则返回false。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/09/9282466.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('42', '0', 'PHP之Trait详解', '', '', '', '<p>自 PHP 5.4.0 起，PHP 实现了一种代码复用的方法，称为 trait。</p>\r\n<p>Trait其字面意思是&rdquo;特性&rdquo;、&rdquo;特点&rdquo;,我们可以理解为,使用Trait关键字,可以为PHP中的类添加新的特性。&nbsp;</p>\r\n<p>Trait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题。</p>\r\n<p>Trait 和 Class 相似，但仅仅旨在用细粒度和一致的方式来组合功能。 无法通过 trait 自身来实例化。它为传统继承增加了水平特性的组合；也就是说，应用的几个 Class 之间不需要继承。</p>\r\n<p>用法：通过在类中使用use 关键字，声明要组合的Trait名称，具体的Trait的声明使用Trait关键词，Trait不能实例化。</p>\r\n<p>1、Traits基础</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n</span><span style=\"color: #008080;\">header</span>(\"Content-type:text/html;charset=utf-8\"<span style=\"color: #000000;\">);\r\ntrait Test{</span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> hello1(){\r\n        </span><span style=\"color: #0000ff;\">return</span> \"Test::hello1()\"<span style=\"color: #000000;\">;\r\n    }\r\n}</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> demo1{\r\n    </span><span style=\"color: #0000ff;\">use</span> Test<span style=\"color: #000000;\">;\r\n}\r\n</span><span style=\"color: #800080;\">$obj</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> demo1();\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$obj</span>->hello1().\'<br />\';<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Test::hello1()</span></pre>\r\n</div>\r\n<p> 2、优先级</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Base {\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> sayHello() {\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'Hello \'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\ntrait SayWorld {\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> sayHello() {\r\n        parent</span>::<span style=\"color: #000000;\">sayHello();\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'World!\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span> MyHelloWorld <span style=\"color: #0000ff;\">extends</span><span style=\"color: #000000;\"> Base {\r\n    </span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> SayWorld;\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$o</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> MyHelloWorld();\r\n</span><span style=\"color: #800080;\">$o</span>->sayHello();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Hello World!</span></pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\ntrait HelloWorld {\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> sayHello() {\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'Hello World!\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> TheWorldIsNotEnough {\r\n    </span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> HelloWorld;\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> sayHello() {\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'Hello Universe!\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$o</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> TheWorldIsNotEnough();\r\n</span><span style=\"color: #800080;\">$o</span>->sayHello();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Hello Universe!</span></pre>\r\n</div>\r\n<p>从基类继承的成员被插入的 SayWorld Trait 中的 MyHelloWorld 方法所覆盖。其行为 MyHelloWorld 类中定义的方法一致。优先顺序是当前类中的方法会覆盖 trait 方法，而 trait 方法又覆盖了基类中的方法。</p>\r\n<p>3、多个Traits</p>\r\n<p>通过逗号分隔，在 use 声明列出多个 trait，可以都插入到一个类中。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\ntrait Hello {\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> sayHello() {\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'Hello \'.\'<br />\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\ntrait World {\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> sayWorld() {\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'World\'.\'<br />\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> MyHelloWorld {\r\n    </span><span style=\"color: #0000ff;\">use</span> Hello,<span style=\"color: #000000;\"> World;\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> sayExclamationMark() {\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'!\'.\'<br />\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$o</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> MyHelloWorld();\r\n</span><span style=\"color: #800080;\">$o</span>->sayHello();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Hello</span>\r\n<span style=\"color: #800080;\">$o</span>->sayWorld();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">World</span>\r\n<span style=\"color: #800080;\">$o</span>->sayExclamationMark();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">!</span></pre>\r\n</div>\r\n<p> 4、冲突的解决</p>\r\n<p>如果两个 trait 都插入了一个同名的方法，如果没有明确解决冲突将会产生一个致命错误。</p>\r\n<p>为了解决多个 trait 在同一个类中的命名冲突，需要使用&nbsp;<em>insteadof</em> 操作符来明确指定使用冲突方法中的哪一个。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\ntrait A{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> smallTalk(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'a\'<span style=\"color: #000000;\">;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> bigTalk(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'A\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\ntrait B{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> smallTalk(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'b\'<span style=\"color: #000000;\">;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> bigTalk(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'B\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Talker{\r\n    </span><span style=\"color: #0000ff;\">use</span> A,<span style=\"color: #000000;\">B{\r\n        B</span>::<span style=\"color: #000000;\">smallTalk insteadof A;\r\n        A</span>::<span style=\"color: #000000;\">bigTalk insteadof B;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$obj</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Talker();\r\n</span><span style=\"color: #800080;\">$obj</span>->smallTalk();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">b</span>\r\n<span style=\"color: #800080;\">$obj</span>->bigTalk();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">A</span></pre>\r\n</div>\r\n<p>以上方式仅允许排除掉其它方法，<em>as</em> 操作符可以 为某个方法引入别名。 注意，<em>as</em> 操作符不会对方法进行重命名，也不会影响其方法。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\ntrait A{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> smallTalk(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'a\'<span style=\"color: #000000;\">;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> bigTalk(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'A\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\ntrait B{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> smallTalk(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'b\'<span style=\"color: #000000;\">;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> bigTalk(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'B\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Talker{\r\n    </span><span style=\"color: #0000ff;\">use</span> A,<span style=\"color: #000000;\">B{\r\n        B</span>::<span style=\"color: #000000;\">smallTalk insteadof A;\r\n        A</span>::<span style=\"color: #000000;\">bigTalk insteadof B;\r\n        B</span>::bigTalk <span style=\"color: #0000ff;\">as</span><span style=\"color: #000000;\"> b_bigTalk;\r\n        A</span>::smallTalk <span style=\"color: #0000ff;\">as</span><span style=\"color: #000000;\"> a_smallTalk;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$obj</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Talker();\r\n</span><span style=\"color: #800080;\">$obj</span>->smallTalk();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">b</span>\r\n<span style=\"color: #800080;\">$obj</span>->bigTalk();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">A</span>\r\n<span style=\"color: #800080;\">$obj</span>->b_bigTalk();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">B</span>\r\n<span style=\"color: #800080;\">$obj</span>->a_smallTalk();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">a</span></pre>\r\n</div>\r\n<p> 5、修改方法的访问控制</p>\r\n<p>使用 <em>as</em> 语法还可以用来调整方法的访问控制。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\ntrait A{\r\n    </span><span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> smallTalk(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'a\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Talker{\r\n    </span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> A{\r\n        smallTalk </span><span style=\"color: #0000ff;\">as</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> aaa;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$obj</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Talker();\r\n</span><span style=\"color: #800080;\">$obj</span>->aaa();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">a</span></pre>\r\n</div>\r\n<p> 6、Traits组</p>\r\n<p>正如 class 能够使用 trait 一样，其它 trait 也能够使用 trait。在 trait 定义时通过使用一个或多个 trait，能够组合其它 trait 中的部分或全部成员。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\ntrait Hello{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> sayHello(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'Hello \'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\ntrait World{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> sayWorld(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'World !\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\ntrait HelloWorld{\r\n    </span><span style=\"color: #0000ff;\">use</span> Hello,<span style=\"color: #000000;\">World;\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Talker{\r\n    </span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> HelloWorld;\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$obj</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Talker();\r\n</span><span style=\"color: #800080;\">$obj</span>->sayHello();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Hello</span>\r\n<span style=\"color: #800080;\">$obj</span>->sayWorld();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">World !</span></pre>\r\n</div>\r\n<p>7、抽象成员</p>\r\n<p>为了对使用的类施加强制要求，trait 支持抽象方法的使用。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\ntrait Hello{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> sayWorld(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'Hello \'.<span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">getWorld();\r\n    }\r\n    </span><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> getWorld();\r\n}\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Talker{\r\n    </span><span style=\"color: #0000ff;\">private</span> <span style=\"color: #800080;\">$world</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> Hello;\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> getWorld(){\r\n        </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">world;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> setWorld(<span style=\"color: #800080;\">$val</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->world = <span style=\"color: #800080;\">$val</span><span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$obj</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Talker();\r\n</span><span style=\"color: #800080;\">$obj</span>->setWorld(\"Trait !\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$obj</span>->sayWorld();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Hello Trait !</span></pre>\r\n</div>\r\n<p>8、Traits静态成员</p>\r\n<p>Traits 可以被静态成员静态方法定义。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\ntrait HelloWorld{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> sayHelloWorld(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> \'Hello World !\'<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Talker{\r\n    </span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> HelloWorld;\r\n}\r\nTalker</span>::sayHelloWorld();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Hello World !</span></pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\ntrait Counter{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> inc(){\r\n        </span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #800080;\">$c</span> = 0<span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #800080;\">$c</span>++<span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> \"<span style=\"color: #800080;\">$c</span>\\n\"<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> C1{\r\n    </span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> Counter;\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> C2{\r\n    </span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> Counter;\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$c1</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> C1();\r\n</span><span style=\"color: #800080;\">$c1</span>->inc();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">1</span>\r\n<span style=\"color: #800080;\">$c1_1</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> C1();\r\n</span><span style=\"color: #800080;\">$c1_1</span>->inc();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">2</span>\r\n\r\n<span style=\"color: #800080;\">$c2</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> C2();\r\n</span><span style=\"color: #800080;\">$c2</span>->inc();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">1</span></pre>\r\n</div>\r\n<p>9、属性</p>\r\n<p>Trait 同样可以定义属性。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\ntrait PropertiesTrait {\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #800080;\">$x</span> = 1<span style=\"color: #000000;\">;\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> PropertiesExample {\r\n    </span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> PropertiesTrait;\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$example</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> PropertiesExample;\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$example</span>->x;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">1</span></pre>\r\n</div>\r\n<p>Trait 定义了一个属性后，类就不能定义同样名称的属性，否则会产生 fatal error。 有种情况例外：属性是兼容的（同样的访问可见度、初始默认值）。 在 PHP 7.0 之前，属性是兼容的，则会有 E_STRICT 的提醒。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/06/9274258.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('43', '0', '如何选择合适的MySQL数据类型', '', '', '', '<h3>一、MySQL数据类型选择原则</h3>\r\n<p><strong>更小的通常更好</strong>：一般情况下选择可以正确存储数据的最小数据类型。越小的数据类型通常更快，占用磁盘，内存和CPU缓存更小。</p>\r\n<p><strong>简单就好</strong>：简单的数据类型的操作通常需要更少的CPU周期。例如：整型比字符操作代价要小得多，因为字符集和校对规则(排序规则)使字符比整型比较更加复杂。</p>\r\n<p><strong>尽量避免NULL</strong>:尽量制定列为NOT NULL，除非真的需要NULL类型的值。因为可能为NULL列使得索引，索引统计和值比较都更复杂。可为NULL的列会使用更多的存储空间，在MySQL里也需要特殊处理。</p>\r\n<h3 id=\"二.选择具体数据类型\">二、选择具体数据类型</h3>\r\n<p>在选择列的数据类型时需要先选定合适的大类型,如：数字，字符串，时间等。</p>\r\n<p>（1）、整数类型</p>\r\n<table style=\"height: 110px; width: 326px;\" border=\"1\" align=\"center\">\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\"><span style=\"font-size: 14px;\"><strong>数据类型</strong></span></td>\r\n<td style=\"text-align: center;\"><span style=\"font-size: 14px;\"><strong>长度/字节</strong></span></td>\r\n<td style=\"text-align: center;\"><span style=\"font-size: 14px;\"><strong>范围</strong></span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">TINYINT</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">-2^7&mdash;2^7-1</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">SMALLINT</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">-2^15&mdash;2^15-1</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">MEDIUMINT</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">-2^23&mdash;2^23-1</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">INT</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">-2^31&mdash;2^31-1</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">BIGINT</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">-2^64&mdash;2^64-1</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>区分开TINYINT / INT / BIGINT，能确定不会使用负数的字段，建议添加 unsigned定义。</p>\r\n<p>能够用数字类型的字段尽量选择数字类型而不用字符串类型。</p>\r\n<p>（2）、实数类型</p>\r\n<p>实数是带有小数部分的数字。然而它们不只是存储小数部分；也可以是DECIMAL存储比BIGINT还大的整数。MYSQL即支持精确类型，也支持非精确存储。FLOAT和DOUBLE类型支持使用标准的浮点运算进行近似计算。具体计算规则取决于所使用平台的实现。</p>\r\n<table style=\"height: 80px; width: 331px;\" border=\"1\" align=\"center\">\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\"><span style=\"font-size: 14px;\"><strong>数据类型</strong></span></td>\r\n<td style=\"text-align: center;\"><span style=\"font-size: 14px;\"><strong>长度/字节</strong></span></td>\r\n<td style=\"text-align: center;\"><span style=\"font-size: 14px;\"><strong>范围</strong></span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">FLOAT</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">&mdash;</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">DOUBLE</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">&mdash;</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\" rowspan=\"2\">DECIMAL</td>\r\n<td style=\"text-align: center;\" rowspan=\"2\">最多65数字（5.0以上版本）</td>\r\n<td style=\"text-align: center;\" rowspan=\"2\">&mdash;</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>MySQL使用DOUBLE作为内部浮点计算的类型。注意，DECIMAL需要额外的空间和计算开销，所以只要要求尽量对小数进行精确时才使用DECIMAL，例如在存储财务数据时，可以用BIGINT来替代它来实现，只需要将数据乘以相应的倍数即可。</p>\r\n<p>FLOAT和DOUBLE选择（尽量选择FLOAT）</p>\r\n<p>如何有涉及到运算，用float和double可能会精度不准，可以考虑将小数乘于相应的倍数，然后用BIGINT来存储。</p>\r\n<p>（3）、字符串类型</p>\r\n<p>MySQL支持多种字符串类型。从4.1版本开始，每个字符串列可以定义自己的字符集和校对规则(排序规则)，这些东西会在很大程度上影响性能。</p>\r\n<p>1、<em style=\"font-weight: bold;\">VARCHAR和CHAR类型</em></p>\r\n<p>VARCHAR和CHAR时最主要的两种字符串类型。</p>\r\n<p><strong>VARCHAR：</strong>适用于存储变长的字符串，是最常见的字符串数据类型。它比定长更加节省空间，因为它仅需要使用必要的额外空间（如果MySQL表使用ROW_FORMAT=FIXED创建的话，会使用定长）。</p>\r\n<p>适合使用该类型的情况：字符串列的最大长度比平均长度大很多；列的更新很少，所以碎片不是问题；使用了UTF-8这样复杂的字符集，每个字符的使用不同字节数进行存储。</p>\r\n<p>注：5.0以上版本会保留末尾空格，更早的版本会删除末尾空格。InnoDB存储引擎会把过长的VARCHAR转换为BLOB类型。</p>\r\n<p><strong>CHAR</strong>:CHAR是定长字符串类型，MySQL总是根据定义的类型进行分配足够的空间。当存储CHAR时MySQL会默认删除行尾空格。因为CHAR值通常需要用空格进行填充以方便比较。</p>\r\n<p>CHAR适合存储很短的字符串，或者所有长度都接近一个长度。</p>\r\n<p>对于经常变更的数据CHAR比较VARCHAR要好，因为定长的CHAR类型不容易产生碎片。</p>\r\n<p>对于更短的列CHAR比VARCHAR要更加节省空间，因为<strong><em>VARCHAR总是需要一个额外的字节来存储长度</em></strong>。</p>\r\n<p>2、<em style=\"font-weight: bold;\">BLOB和TEXT类型</em></p>\r\n<p>BLOB和TEXT是用来存储很大的数据来设计的字符串数据类型，分别采用二进制和字符方式进行存储。</p>\r\n<p>实际上他们时属于两种不同数据类型家族：字符类型的时TINYTEXT, SMALLTEXT, TEXT, MEDIUMTEXT, LONGTEXT；对应的二进制类型是TINYBLOB, SMALLBLOB, BLOB, MEDIUMBLOB, LONGBLOB。</p>\r\n<p>BLOB和TEXT的仅有的区别在于BLOB类型存储的时二进制数据，没有排序规则或字符集，而TEXT类型有字符集和排序规则。</p>\r\n<p>char,varchar,TEXT的选择：非万不得已不要使用 TEXT 数据类型，定长字段，建议使用 CHAR 类型（填空格），不定长字段尽量使用&nbsp;VARCHAR（自动适应长度，超过阶段），且仅仅设定适当的最大长度。</p>\r\n<p>（4）、日期和时间类型</p>\r\n<p>MySQL可以使用很多类型来保存日期和时间值，例如YEAR和DATE.MySQL能存储最小粒度为秒。但是可以使用微秒级的力度进行运算。</p>\r\n<p>1、<strong>DATETIME</strong></p>\r\n<p>能保存1001到9999年，精度为秒。格式为YYYY-MM-DD HH:MM:SS与时区无关，使用八个字节的存储空间。</p>\r\n<p>2、<strong>TIMESTAMP</strong></p>\r\n<p>时间戳，正如名字一样。它能保存从1970年1月1号午夜（格林尼治标准时间）。它只使用四个字节的存储空间只能表示1970到2038年。</p>\r\n<p>TIMESTAMP显示的值依赖于时区。MYSQL服务器，操作系统，以及客户端连接都有时区设置。因此存储值为0时在不同的时区显示值会有差别。</p>\r\n<p>注：通常情况下应尽量使用TIMESTAMP，因为它比DATETIME效率更高。如果需要存储更小粒度的时间，可以用BIGINGT或者转换成DOUBLE类型来进行存储。</p>\r\n<p>（5）、ENUM数据类型</p>\r\n<p>枚举数据类型在内存中非常紧凑，会根据列表值的数量压缩到一个或两个字节。MySQL自身会维护一个查找表。例如：</p>\r\n<p>CREATE TABLE enum_test(<br />	`gender` ENUM(\"男\",\"女\",\"其他\") NOT NULL<br />);</p>\r\n<p>INSERT INTO enum_test values(\"男\"),(\"女\"),(\"其他\");</p>\r\n<p>对于状态字段，可以尝试使用 ENUM 来存放。</p>\r\n<p>避免使用NULL字段，很难查询优化且占用额外索引空间。</p>\r\n<p> </p>\r\n<p>****************************************************华丽的分割线**************************************************************</p>\r\n<div class=\"postBody\">\r\n<div id=\"cnblogs_post_body\" class=\"blogpost-body\">\r\n<p><strong>一。char和varchar</strong></p>\r\n<p>char是固定长度的，查询速度比varchar速度快的多。char的缺点是浪费存储空间。</p>\r\n<p>检索char列时，返回的结果会删除尾部空格，所以程序需要对为空格进行处理。</p>\r\n<p>对于长度变化不大且对查询速度有较高要求的数据可以考虑使用char。</p>\r\n<p>随着MySQL的不断升级，varchar的性能不断改进并提高。</p>\r\n<p>存储引擎使用原则：</p>\r\n<p>MyISAM：建议使用固定长度列代替可变长度列。</p>\r\n<p>InnoDB：建议使用varchar类型</p>\r\n<p><strong>二。text和blob</strong></p>\r\n<p>在保存大文本时，通常选择text或者blob。</p>\r\n<p>二者的差别是blob可以保存二进制数据，比如照片。</p>\r\n<p>text和blob又包括text、mediumtext、longtext和blob、mediumblob、longblob，他们之间的区别是存储文本长度不同和存储字节不同。</p>\r\n<p><strong>应根据情况选择满足需求的最小存储类型。</strong></p>\r\n<p>1.blob和text执行大量删除操作时，产生数据&ldquo;空洞&rdquo;</p>\r\n<p><img src=\"https://images2015.cnblogs.com/blog/834350/201612/834350-20161223111739698-515847411.png\" alt=\"\" /></p>\r\n<p> </p>\r\n<p>删除id为7记录前后数据库所占内存，没有发生变化。</p>\r\n<p><img src=\"https://images2015.cnblogs.com/blog/834350/201612/834350-20161223112120776-218784259.png\" alt=\"\" width=\"491\" height=\"335\" /></p>\r\n<p><img src=\"https://images2015.cnblogs.com/blog/834350/201612/834350-20161223112127995-431787283.png\" alt=\"\" width=\"492\" height=\"295\" /></p>\r\n<p>可以发现数据文件并没有因为数据删除而减少。</p>\r\n<p>对表进行optimize(优化)操作：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>optimize table t1;</pre>\r\n</div>\r\n<p><img src=\"https://images2015.cnblogs.com/blog/834350/201612/834350-20161223112552839-316941450.png\" alt=\"\" width=\"391\" height=\"247\" /></p>\r\n<p>可以发现表数据文件大大缩小，&ldquo;空洞&rdquo;空间已经被回收。</p>\r\n<p> </p>\r\n<p>2.用合成(Synthetic)索引提高查询性能</p>\r\n<p>根据大文本字段(text、blob)的内容建立一个<strong>散列值</strong>，并把这个值存储在单独的数据列中，然后通过散列值找数据行。</p>\r\n<p>缺点：<strong>只能进行精确查询</strong>(<、&gt;=范围操作符是没有用处的)</p>\r\n<p>可以通过MySQL自带函数md5()、sha1()、crc32()生成散列值，也可以通过编程语言计算散列值。</p>\r\n<p>注：如果散列算法生成的字符串带有尾部空格，<strong>不要把他们存储在char、varchar列中</strong>，他们会受到尾部空格去除的影响。</p>\r\n<p><img src=\"https://images2015.cnblogs.com/blog/834350/201612/834350-20161223152119151-1331150423.png\" alt=\"\" /></p>\r\n<p>如果需要对blob或clob字段进行模糊查询，可以用前缀索引：</p>\r\n<div class=\"cnblogs_Highlighter sh-gutter\">\r\n<div>\r\n<div id=\"highlighter_292640\" class=\"syntaxhighlighter  sql\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td class=\"gutter\">\r\n<div class=\"line number1 index0 alt2\">1</div>\r\n<div class=\"line number2 index1 alt1\">2</div>\r\n<div class=\"line number3 index2 alt2\">3</div>\r\n<div class=\"line number4 index3 alt1\">4</div>\r\n</td>\r\n<td class=\"code\">\r\n<div class=\"container\">\r\n<div class=\"line number1 index0 alt2\"><code class=\"sql plain\">#前缀索引:对context字段的前100个字符创建索引</code></div>\r\n<div class=\"line number2 index1 alt1\"><code class=\"sql keyword\">create</code> <code class=\"sql keyword\">index</code> <code class=\"sql plain\">idx_blob </code><code class=\"sql keyword\">on</code> <code class=\"sql plain\">t2(context(100));</code></div>\r\n<div class=\"line number3 index2 alt2\"><code class=\"sql plain\">#查询方法</code></div>\r\n<div class=\"line number4 index3 alt1\"><code class=\"sql keyword\">select</code> <code class=\"sql plain\">* </code><code class=\"sql keyword\">from</code> <code class=\"sql plain\">t2 </code><code class=\"sql keyword\">where</code> <code class=\"sql plain\">context </code><code class=\"sql color1\">like</code> <code class=\"sql string\">\'drake%\'</code><code class=\"sql plain\">;注:%不能放在最前面</code></div>\r\n</div>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>\r\n<p><em><strong>合成索引只能用于精确匹配，在一定程度上减少了I/O，从而提高了查询效率。</strong></em></p>\r\n<p>3.在不必要的时候避免检索大型的blob或text值。</p>\r\n<p>4.把blob或text列分离到单独的表中。</p>\r\n<p> </p>\r\n<p><strong>三、浮点数和定点数</strong></p>\r\n<p>1.浮点数存在误差问题。</p>\r\n<p>2.对货币等对精度敏感的数据，应该用定点数表示或存储。</p>\r\n<p>3.在编程中，如果用到浮点数，要特别注意误差问题，并尽量避免做浮点数比较。</p>\r\n<p>4.要注意一些特殊值的处理。</p>\r\n<p><strong>四、日期类型的选择</strong></p>\r\n<p>1.根据实际需要选择能够满足应用的最小存储日期类型。</p>\r\n<p>2.如果记录年月日时分秒，并且记录年份比较久远，最好使用datetime，不要使用timestamp。</p>\r\n<p>3.如果记录的日期需要让不同时区的用户使用，最好使用timestamp，因为日期类型中只有它能够和实际时区相对应。</p>\r\n</div>\r\n</div>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/05/9269447.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('44', '0', '数据库设计三大范式和五大约束', '', '', '', '<p><strong>一、三大范式：</strong></p>\r\n<p>什么是范式：简言之就是，数据库设计对数据的存储性能，还有开发人员对数据的操作都有莫大的关系。所以建立科学的，规范的的数据库是需要满足一些规范的来优化数据数据存储方式。在关系型数据库中这些规范就可以称为范式。范式是关系数据库理论的基础，也是我们在设计数据库结构过程中所要遵循的规则和指导方法，以下就是对这三个范式的基本介绍：</p>\r\n<p>第一范式（1NF）：</p>\r\n<p>1、数据表中的每一列(字段)，必须是不可拆分的最小单元，也就是确保每一列的原子性。满足第一范式是关系模式规范化的最低要求，否则，将有很多基本操作在这样的关系模式中实现不了。</p>\r\n<p><img src=\"https://images2018.cnblogs.com/blog/854257/201807/854257-20180705155428496-268813470.jpg\" alt=\"\" /></p>\r\n<p><img src=\"https://images2018.cnblogs.com/blog/854257/201807/854257-20180705155452725-1065863879.jpg\" alt=\"\" /></p>\r\n<p>如果需求知道那个省那个市并按其分类，那么显然第一个表格是不容易满足需求的，也不符合第一范式。</p>\r\n<p>2、两列的属性相近或相似或一样，尽量合并属性一样的列，确保不产生冗余数据。</p>\r\n<p><img src=\"https://images2018.cnblogs.com/blog/854257/201807/854257-20180705155626711-620570275.jpg\" alt=\"\" /></p>\r\n<p><img src=\"https://images2018.cnblogs.com/blog/854257/201807/854257-20180705155643375-658611544.jpg\" alt=\"\" /></p>\r\n<p>显然第一个表结构不但不能满足足够多物品的要求，还会在物品少时产生冗余。也是不符合第一范式的。</p>\r\n<p> 第二范式（2NF）：</p>\r\n<p>满足1NF后要求表中的所有列，每一行的数据只能与其中一列相关，即一行数据只做一件事。只要数据列中出现数据重复，就要把表拆分开来。</p>\r\n<p><img src=\"https://images2018.cnblogs.com/blog/854257/201807/854257-20180705160001897-1749034983.jpg\" alt=\"\" /></p>\r\n<p>一个人同时订几个房间，就会出来一个订单号多条数据，这样子联系人都是重复的，就会造成数据冗余。我们应该把他拆开来。</p>\r\n<p><img src=\"https://images2018.cnblogs.com/blog/854257/201807/854257-20180705160035728-1480653948.jpg\" alt=\"\" /></p>\r\n<p><img src=\"https://images2018.cnblogs.com/blog/854257/201807/854257-20180705160052025-1668662115.jpg\" alt=\"\" /></p>\r\n<p>这样便实现啦一条数据做一件事，不掺杂复杂的关系逻辑。同时对表数据的更新维护也更易操作。</p>\r\n<p>第三范式（3NF）：</p>\r\n<p>满足2NF后，要求：表中的每一列都要与主键直接相关，而不是间接相关（表中的每一列只能依赖于主键）。</p>\r\n<p>数据不能存在传递关系，即没个属性都跟主键有直接关系而不是间接关系。像：a-->b-->c  属性之间含有这样的关系，是不符合第三范式的。</p>\r\n<p>注意事项：</p>\r\n<p>1.第二范式与第三范式的本质区别：在于有没有分出两张表。</p>\r\n<p>第二范式是说一张表中包含了多种不同实体的属性，那么必须要分成多张表，第三范式是要求已经分好了多张表的话，一张表中只能有另一张标的ID，而不能有其他任何信息，（其他任何信息，一律用主键在另一张表中查询）。</p>\r\n<p>2.必须先满足第一范式才能满足第二范式，必须同时满足第一第二范式才能满足第三范式。</p>\r\n<p>三大范式只是一般设计数据库的基本理念，可以建立冗余较小、结构合理的数据库。如果有特殊情况，当然要特殊对待，数据库设计最重要的是看需求跟性能，需求&gt;性能>表结构。所以不能一味的去追求范式建立数据库。</p>\r\n<p><strong>二、五大约束：</strong></p>\r\n<p>数据库中的五大约束包括：</p>\r\n<p>1.主键约束（Primay Key Coustraint） 唯一性，非空性；</p>\r\n<p>2.唯一约束 （Unique Counstraint）唯一性，可以空，但只能有一个；</p>\r\n<p>3.默认约束 (Default Counstraint) 该数据的默认值；</p>\r\n<p>4.外键约束 (Foreign Key Counstraint) 需要建立两表间的关系；</p>\r\n<p>5.非空约束（Not Null Counstraint）:设置非空约束，该字段不能为空。</p>\r\n<p><em>五大约束的语法示例：</em></p>\r\n<p>1. 添加主键约束</p>\r\n<p>Alter table 表名 add Constraint 主键名&nbsp;primary key(字段)</p>\r\n<p>2.  添加唯一约束</p>\r\n<p>Alter table 表名 add Constraint 约束名&nbsp;unique(字段)</p>\r\n<p>3.  添加默认约束</p>\r\n<p>Alter table 表名 add Constraint 约束名&nbsp;default（默认内容） for 字段名</p>\r\n<p>4.  添加检查约束</p>\r\n<p>Alter table 表名 add Constraint 约束名&nbsp;check (字段表达)</p>\r\n<p>5.  添加外键约束</p>\r\n<p>Alter table 表名 add Constraint 约束名&nbsp;foreign key(字段) references 表名（字段名）</p>\r\n<p>详细介绍：</p>\r\n<p>（1）[外键约束 (Foreign Key Counstraint) ]</p>\r\n<p>1.设置外键的注意事项：<br />\r\n　　①：只有INNODB的数据库引擎支持外键，修改my.ini文件设置default-storage-engine=INNODB；<br />\r\n　　②：外键与参照列的数据类型必须相同。（数值型要求长度和无符号都相同，字符串要求类型相同，长度可以不同）；<br />\r\n　　③：设置外键的字段必须要有索引，如果没有索引，设置外键时会自动生成一个索引；</p>\r\n<p>2.设置外键的语法：</p>\r\n<p><span lang=\"EN-US\">[CONSTRAINT 外键名<span lang=\"EN-US\">] FOREIGN KEY(外键字段<span lang=\"EN-US\">) REFERENCES 参照表<span lang=\"EN-US\">(参照字段<span lang=\"EN-US\">)  [ON DELETE SET NULL ON UPDATE CASCADE] -- 设置操作完整。</span></span></span></span></span></p>\r\n<p>3、外键约束的参照操作：<br />\r\n当对参照表的参照字段进行删除或更新时，外键表中的外键如何应对。<br />\r\n参照操作可选值：<br />\r\n　　RESTRICT: 拒绝对参照字段的删除或修改（默认）；<br />\r\n　　NO ACTION:与RESTRICT相同，但这个指令只在MySql生效；<br />\r\n　　CASCADE:  删除或更新参照表的参照字段时，外键表的记录同步删除或更新；<br />\r\n　　SET NULL: 删除删除或更新参照表的参照字段时，外键表的外键设为NULL (此时外键不能设置为NOT NULL)。</p>\r\n<p>（2）[主键约束]（Primay Key Coustraint）&nbsp;<br />\r\n1.主键的注意事项：主键默认非空，默认唯一性约束，只有主键可以设置自动增长（主键不一定自增，自增一定是主键）。<br />\r\n2.设置主键的方式：</p>\r\n<p>　　①：在定义列时设置：id   \r\n INT UNSIGNED PRIMARY KEY。<br />\r\n　　②：在列定义完成后设置：PRIMARY KEY(id)。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/05/9268788.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('45', '0', '实现负载均衡的几种方式', '', '', '', '<h1 id=\"什么是负载均衡\">什么是负载均衡</h1>\r\n<p>当一台服务器的单位时间内的访问量越大时，服务器压力就越大，大到超过自身承受能力时，服务器就会崩溃。为了避免服务器崩溃，让用户有更好的体验，我们通过负载均衡的方式来分担服务器压力。</p>\r\n<p>我们可以建立很多很多服务器，组成一个服务器集群，当用户访问网站时，先访问一个中间服务器，在让这个中间服务器在服务器集群中选择一个压力较小的服务器，然后将该访问请求引入该服务器。如此以来，用户的每次访问，都会保证服务器集群中的每个服务器压力趋于平衡，分担了服务器压力，避免了服务器崩溃的情况。</p>\r\n<p>负载均衡是用反向代理的原理实现的。</p>\r\n<h1 id=\"负载均衡的几种常用方式\">负载均衡的几种常用方式</h1>\r\n<p>1、轮询（默认）&nbsp;<br />每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">upstream backserver {\r\n    server </span><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">0.14</span><span style=\"color: #000000;\">;\r\n    server </span><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">0.15</span><span style=\"color: #000000;\">;\r\n}</span></pre>\r\n</div>\r\n<p>2、weight <br />指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">upstream backserver {\r\n    server </span><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">0.14</span> weight=<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">;\r\n    server </span><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">0.15</span> weight=<span style=\"color: #800080;\">7</span><span style=\"color: #000000;\">;\r\n}</span></pre>\r\n</div>\r\n<p>权重越高，在被访问的概率越大，如上例，分别是30%，70%。</p>\r\n<p>3、上述方式存在一个问题就是说，在负载均衡系统中，假如用户在某台服务器上登录了，那么该用户第二次请求的时候，因为我们是负载均衡系统，每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的。</p>\r\n<p>我们可以采用ip_hash指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。</p>\r\n<p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">upstream backserver {\r\n    ip_hash;\r\n    server </span><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">0.14</span>:<span style=\"color: #800080;\">88</span><span style=\"color: #000000;\">;\r\n    server </span><span style=\"color: #800080;\">192.168</span>.<span style=\"color: #800080;\">0.15</span>:<span style=\"color: #800080;\">80</span><span style=\"color: #000000;\">;\r\n}</span></pre>\r\n</div>\r\n<p>4、fair（第三方）&nbsp;<br />按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">upstream backserver {\r\n    server server1;\r\n    server server2;\r\n    fair;\r\n}</span></pre>\r\n</div>\r\n<p>5、url_hash（第三方）&nbsp;<br />按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">upstream backserver {\r\n    server squid1:</span><span style=\"color: #800080;\">3128</span><span style=\"color: #000000;\">;\r\n    server squid2:</span><span style=\"color: #800080;\">3128</span><span style=\"color: #000000;\">;\r\n    hash $request_uri;\r\n    hash_method crc32;\r\n}</span></pre>\r\n</div>\r\n<p>每个设备的状态设置为:</p>\r\n<p>1.down 表示单前的server暂时不参与负载&nbsp;<br />2.weight 默认为1.weight越大，负载的权重就越大。&nbsp;<br />3.<code>max_fails</code>：允许请求失败的次数默认为1.当超过最大次数时，返回<code>proxy_next_upstream</code>模块定义的错误&nbsp;<br />4.<code>fail_timeout:max_fails</code>次失败后，暂停的时间。&nbsp;<br />5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">#user  nobody;\r\nworker_processes  </span><span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">;\r\nevents {\r\n    # 最大并发数\r\n    worker_connections  </span><span style=\"color: #800080;\">1024</span><span style=\"color: #000000;\">;\r\n}\r\nhttp{\r\n    # 待选服务器列表\r\n    upstream myproject{\r\n        # ip_hash指令，将同一用户引入同一服务器。\r\n        ip_hash;\r\n        server </span><span style=\"color: #800080;\">125.219</span>.<span style=\"color: #800080;\">42.4</span> fail_timeout=<span style=\"color: #000000;\">60s;\r\n        server </span><span style=\"color: #800080;\">172.31</span>.<span style=\"color: #800080;\">2.183</span><span style=\"color: #000000;\">;\r\n        }\r\n\r\n    server{\r\n                # 监听端口\r\n                listen </span><span style=\"color: #800080;\">80</span><span style=\"color: #000000;\">;\r\n                # 根目录下\r\n                location </span>/<span style=\"color: #000000;\"> {\r\n                    # 选择哪个服务器列表\r\n                    proxy_pass http:</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">myproject;</span>\r\n<span style=\"color: #000000;\">                }\r\n\r\n            }\r\n}</span></pre>\r\n</div>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/05/9268192.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('46', '0', 'PHP超全局变量', '', '', '', '<p><span class=\"refname\">超全局变量 在 PHP 4.1.0 中引入，是在全部作用域中始终可用的内置变量。</span></p>\r\n<p><span class=\"refname\">超全局变量 &mdash; <span class=\"dc-title\">超全局变量是在全部作用域中始终可用的内置变量。</span></span></p>\r\n<p><span class=\"refname\"><span class=\"dc-title\">PHP 中的许多预定义变量都是&ldquo;超全局的&rdquo;，这意味着它们在一个脚本的全部作用域中都可用。在函数或方法中无需执行 <span class=\"command\">global $variable; 就可以访问它们。</span></span></span></p>\r\n<p class=\"para\">这些超全局变量是：</p>\r\n<p class=\"para\"><strong><var class=\"varname\"><var class=\"varname\">一、$GLOBALS</var></var></strong></p>\r\n<p class=\"para\"><strong><span class=\"refname\">$GLOBALS &mdash; <span class=\"dc-title\">引用全局作用域中可用的全部变量</span></span></strong></p>\r\n<p class=\"para\"><strong><span class=\"refname\"><span class=\"dc-title\">一个包含了全部变量的全局组合<span class=\"type\"><span class=\"type 数组\">数组。变量的名字就是数组的键。</span></span></span></span></strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\nfunction test(){\r\n    $foo </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">local variable</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n    echo </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">$foo in global scope:</span><span style=\"color: #800000;\">\'</span>.$GLOBALS[<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">foo</span><span style=\"color: #800000;\">\'</span>].<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\"><br /></span><span style=\"color: #800000;\">\'</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">$foo in global scope:Example content</span>\r\n    echo <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">$foo in current scope:</span><span style=\"color: #800000;\">\'</span>.$foo.<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\"><br /></span><span style=\"color: #800000;\">\'</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">$foo in current scope:local variable</span>\r\n    $GLOBALS[<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">foo</span><span style=\"color: #800000;\">\'</span>] = <span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">1111</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">;\r\n    echo </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">$foo in global scope:</span><span style=\"color: #800000;\">\'</span>.$GLOBALS[<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">foo</span><span style=\"color: #800000;\">\'</span>].<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\"><br /></span><span style=\"color: #800000;\">\'</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">$foo in global scope:1111</span>\r\n<span style=\"color: #000000;\">}\r\n$foo </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Example content</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\ntest();\r\necho $foo.</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\"><br /></span><span style=\"color: #800000;\">\'</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">1111</span></pre>\r\n</div>\r\n<p class=\"para\"> </p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php \r\n\r\n$a </span>= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n$b </span>= <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\r\nfunction sum(){\r\n    $GLOBALS[</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">\'</span>] = $GLOBALS[<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">\'</span>] + $GLOBALS[<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">b</span><span style=\"color: #800000;\">\'</span>];<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">定义变量时每个都要定义</span>\r\n<span style=\"color: #000000;\">}\r\nsum();\r\necho $a.</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">---</span><span style=\"color: #800000;\">\'</span>.$b.<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\"><br /></span><span style=\"color: #800000;\">\'</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">3---2<br /></span></pre>\r\n</div>\r\n<p>global的作用是定义全局变量,但是这个全局变量不是应用于整个网站,而是应用于当前页面,包括include或require的所有文件。但是在函数体内定义的global变量,函数体内可以使用,在函数体外定义的global变量不能在函数体内使用,具体看下面示例。</p>\r\n<p>（1）在函数体内定义global变量，函数体内可以使用。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n$a </span>= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n$b </span>= <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\r\nfunction sum(){\r\n    </span><span style=\"color: #0000ff;\">global</span> $a,$b;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">在函数内声明为全局变量</span>\r\n    $b = $a +<span style=\"color: #000000;\"> $b;\r\n}\r\nsum();\r\necho $a.</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">---</span><span style=\"color: #800000;\">\'</span>.$b.<span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\"><br /></span><span style=\"color: #800000;\">\'</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">1---3</span></pre>\r\n</div>\r\n<p>（2）在函数体外定义global变量，函数体内不可以使用。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre>$a = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #0000ff;\">global</span> $a;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">在函数体外把$a定义为global变量</span>\r\n<span style=\"color: #000000;\">function aa(){\r\n    echo $a;\r\n}\r\naa();</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">会报错，不能输出变量</span></pre>\r\n</div>\r\n<p class=\"member\"><strong><var class=\"varname\"><var class=\"varname\">二、$_SERVER</var></var></strong></p>\r\n<p class=\"member\"><strong><span class=\"refname\">$_SERVER -- <span class=\"refname\">$HTTP_SERVER_VARS [已删除] &mdash; <span class=\"dc-title\">服务器和执行环境信息</span></span></span></strong></p>\r\n<p class=\"member\"> </p>\r\n<p class=\"member\"><var class=\"varname\"><var class=\"varname\">$_SERVER</var></var> 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。</p>\r\n<p class=\"member\">下表列出了您能够在 $_SERVER 中访问的最重要的元素：</p>\r\n<table class=\"dataintable\" border=\"1\">\r\n<tbody>\r\n<tr><th>元素/代码</th><th>描述</th></tr>\r\n<tr>\r\n<td>$_SERVER[\'PHP_SELF\']</td>\r\n<td>返回当前执行脚本的文件名。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">$_SERVER[\'GATEWAY_INTERFACE\']</td>\r\n<td>返回服务器使用的 CGI 规范的版本。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'SERVER_ADDR\']</td>\r\n<td>返回当前运行脚本所在的服务器的 IP 地址。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'SERVER_NAME\']</td>\r\n<td>返回当前运行脚本所在的服务器的主机名。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'SERVER_SOFTWARE\']</td>\r\n<td>返回服务器标识字符串（比如 Apache/2.2.24）。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'SERVER_PROTOCOL\']</td>\r\n<td>返回请求页面时通信协议的名称和版本（例如，&ldquo;HTTP/1.0&rdquo;）。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'REQUEST_METHOD\']</td>\r\n<td>返回访问页面使用的请求方法（例如 POST）。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'REQUEST_TIME\']</td>\r\n<td>返回请求开始时的时间戳（例如 1577687494）。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'QUERY_STRING\']</td>\r\n<td>返回查询字符串，如果是通过查询字符串访问此页面。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'HTTP_ACCEPT\']</td>\r\n<td>返回来自当前请求的请求头。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'HTTP_ACCEPT_CHARSET\']</td>\r\n<td>返回来自当前请求的 Accept_Charset 头（ 例如 utf-8,ISO-8859-1）</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'HTTP_HOST\']</td>\r\n<td>返回来自当前请求的 Host 头。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'HTTP_REFERER\']</td>\r\n<td>返回当前页面的完整 URL（不可靠，因为不是所有用户代理都支持）。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'HTTPS\']</td>\r\n<td>是否通过安全 HTTP 协议查询脚本。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'REMOTE_ADDR\']</td>\r\n<td>返回浏览当前页面的用户的 IP 地址。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'REMOTE_HOST\']</td>\r\n<td>返回浏览当前页面的用户的主机名。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'REMOTE_PORT\']</td>\r\n<td>返回用户机器上连接到 Web 服务器所使用的端口号。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'SCRIPT_FILENAME\']</td>\r\n<td>返回当前执行脚本的绝对路径。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'SERVER_ADMIN\']</td>\r\n<td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'SERVER_PORT\']</td>\r\n<td>Web 服务器使用的端口。默认值为 &ldquo;80&rdquo;。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'SERVER_SIGNATURE\']</td>\r\n<td>返回服务器版本和虚拟主机名。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'PATH_TRANSLATED\']</td>\r\n<td>当前脚本所在文件系统（非文档根目录）的基本路径。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'SCRIPT_NAME\']</td>\r\n<td>返回当前脚本的路径。</td>\r\n</tr>\r\n<tr>\r\n<td>$_SERVER[\'SCRIPT_URI\']</td>\r\n<td>返回当前页面的 URI。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\necho </span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\"><pre></span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">;\r\nprint_r($_SERVER);</span></pre>\r\n</div>\r\n<p><img src=\"https://images2018.cnblogs.com/blog/854257/201807/854257-20180705125016352-245514205.jpg\" alt=\"\" /></p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><var class=\"varname\"><var class=\"varname\">三、$_GET</var></var></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><span class=\"refname\">$_GET -- <span class=\"refname\">$HTTP_GET_VARS [已弃用] &mdash; <span class=\"dc-title\">HTTP GET 变量</span></span></span></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"> </p>\r\n<p class=\"member\" style=\"text-align: left;\">通过 URL 参数传递给当前脚本的变量的数组。</p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><var class=\"varname\"><var class=\"varname\">四、$_POST</var></var></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><span class=\"refname\">$_POST -- <span class=\"refname\">$HTTP_POST_VARS [已弃用] &mdash; <span class=\"dc-title\">HTTP POST 变量</span></span></span></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"> </p>\r\n<p class=\"member\" style=\"text-align: left;\">当 HTTP POST 请求的 Content-Type 是&nbsp;<em>application/x-www-form-urlencoded</em> 或&nbsp;<em>multipart/form-data</em> 时，会将变量以关联数组形式传入当前脚本。</p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><var class=\"varname\"><var class=\"varname\">五、$_FILES</var></var></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><span class=\"refname\">$_FILES -- <span class=\"refname\">$HTTP_POST_FILES [已弃用] &mdash; <span class=\"dc-title\">HTTP 文件上传变量</span></span></span></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"> </p>\r\n<p class=\"member\" style=\"text-align: left;\">通过 HTTP POST 方式上传到当前脚本的项目的<span class=\"type\"><span class=\"type 数组\">数组。</span></span></p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><var class=\"varname\"><var class=\"varname\">六、$_COOKIE</var></var></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><span class=\"refname\">$_COOKIE -- <span class=\"refname\">$HTTP_COOKIE_VARS [已弃用] &mdash; <span class=\"dc-title\">HTTP Cookies</span></span></span></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"> </p>\r\n<p class=\"member\" style=\"text-align: left;\">通过 HTTP Cookies 方式传递给当前脚本的变量的<span class=\"type\"><span class=\"type 数组\">数组。</span></span></p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><var class=\"varname\"><var class=\"varname\">七、$_SESSION</var></var></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><span class=\"refname\">$_SESSION -- <span class=\"refname\">$HTTP_SESSION_VARS [已弃用] &mdash; <span class=\"dc-title\">Session 变量</span></span></span></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"> </p>\r\n<p class=\"member\" style=\"text-align: left;\">当前脚本可用 SESSION 变量的数组</p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><var class=\"varname\"><var class=\"varname\">八、$_REQUEST</var></var></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><span class=\"refname\">$_REQUEST &mdash; <span class=\"dc-title\">HTTP Request 变量</span></span></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><var class=\"varname\"><var class=\"varname\">九、$_ENV</var></var></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\"><strong><span class=\"refname\">$_ENV -- <span class=\"refname\">$HTTP_ENV_VARS [已弃用] &mdash; <span class=\"dc-title\">环境变量</span></span></span></strong></p>\r\n<p class=\"member\" style=\"text-align: left;\">通过环境方式传递给当前脚本的变量的<span class=\"type\"><span class=\"type 数组\">数组。</span></span></p>\r\n<p style=\"text-align: left;\"> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/05/9266690.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('47', '0', 'PHP中的常见魔术方法功能作用及用法实例', '', '', '', '<p><strong>概述</strong></p>\r\n<p>在面向对象编程中，PHP提供了一系列的魔术方法，这些魔术方法为编程提供了很多便利。PHP中的魔术方法通常以__(两个下划线)开始，并且不需要显示的调用而是由某种特定的条件出发。</p>\r\n<p><strong>开始之前</strong></p>\r\n<p>在总结PHP的魔术方法之前先来定义两个类，以便后边示例使用：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Device{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #800080;\">$name</span>,<span style=\"color: #800080;\">$battery</span>,<span style=\"color: #800080;\">$data</span> = [],<span style=\"color: #800080;\">$connection</span><span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> connect(){\r\n        </span><span style=\"color: #800080;\">$this</span>->connection = \'resource\'<span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>->name.\'connected\'.<span style=\"color: #ff00ff;\">PHP_EOL</span><span style=\"color: #000000;\">;\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> disconnect(){\r\n        </span><span style=\"color: #800080;\">$this</span>->connection = <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>->name.\'disconnected\'.<span style=\"color: #ff00ff;\">PHP_EOL</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>Device类有四个成员属性和两个成员方法。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php \r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Battery{\r\n    </span><span style=\"color: #0000ff;\">private</span> <span style=\"color: #800080;\">$charge</span> = 0<span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> setCharge(<span style=\"color: #800080;\">$charge</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$charge</span> = (int)<span style=\"color: #800080;\">$charge</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">if</span>(<span style=\"color: #800080;\">$charge</span> < 0<span style=\"color: #000000;\">){\r\n            </span><span style=\"color: #800080;\">$charge</span> = 0<span style=\"color: #000000;\">;\r\n        }</span><span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(<span style=\"color: #800080;\">$charge</span> > 100<span style=\"color: #000000;\">){\r\n            </span><span style=\"color: #800080;\">$charge</span> = 100<span style=\"color: #000000;\">;\r\n        }\r\n        </span><span style=\"color: #800080;\">$this</span>->charge = <span style=\"color: #800080;\">$charge</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>Battery类有一个成员属性和一个成员方法。</p>\r\n<p><strong>构造函数和析构函数</strong></p>\r\n<p>构造函数和析构函数分别在对象创建和销毁时被调用。对象被&ldquo;销毁&rdquo;是指不存在任何对该对象的引用，比如引用该对象的变量被删除(unset)、重新赋值或脚本执行结束，都会调用析构函数。</p>\r\n<p><strong>__construct()</strong></p>\r\n<p>__construct()构造函数是目前为止最经常使用的函数。在创建对象时，可以在构造函数中做一些初始化工作。可以为构造函数定义任意多个参数，只要在实例化时传入对应个数的参数即可。构造函数中出现的任何异常都会阻止对象的创建。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Device{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #800080;\">$name</span>,<span style=\"color: #800080;\">$battery</span>,<span style=\"color: #800080;\">$data</span> = [],<span style=\"color: #800080;\">$connection</span><span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> __construct(Battery <span style=\"color: #800080;\">$battery</span>,<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->battery = <span style=\"color: #800080;\">$battery</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #800080;\">$this</span>->name = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">connect();\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> connect(){\r\n        </span><span style=\"color: #800080;\">$this</span>->connection = \'resource\'<span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>->name.\'connected\'.<span style=\"color: #ff00ff;\">PHP_EOL</span><span style=\"color: #000000;\">;\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> disconnect(){\r\n        </span><span style=\"color: #800080;\">$this</span>->connection = <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>->name.\'disconnected\'.<span style=\"color: #ff00ff;\">PHP_EOL</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>上面的示例代码中，Device类的构造函数为成员属性赋值并且调用了connect()方法。</p>\r\n<p><span style=\"color: #ff0000;\"><em>将构造函数声明为私有方法，可以防止在类外部创建对象，这在单利模式中经常使用。</em></span></p>\r\n<p><strong>__desctruct()</strong></p>\r\n<p>析构函数通常在对象被销毁时调用，析构函数不接收任何参数。经常在析构函数中执行一些清理工作，比如关闭数据库连接等。</p>\r\n<p><strong>__get()</strong></p>\r\n<p>魔术方法__get()在我们尝试访问一个不存在的属性时会被调用。它接收一个参数，该参数表示访问属性的名字，并且将该属性的值返回。在上面的Device类里，有一个data属性，该属性就在这里就起了作用，如下面得代码：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php \r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Device{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #800080;\">$name</span>,<span style=\"color: #800080;\">$battery</span>,<span style=\"color: #800080;\">$data</span> = [],<span style=\"color: #800080;\">$connection</span><span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> __construct(Battery <span style=\"color: #800080;\">$battery</span>,<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->battery = <span style=\"color: #800080;\">$battery</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #800080;\">$this</span>->name = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">connect();\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> connect(){\r\n        </span><span style=\"color: #800080;\">$this</span>->connection = \'resource\'<span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>->name.\'connected\'.<span style=\"color: #ff00ff;\">PHP_EOL</span><span style=\"color: #000000;\">;\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> disconnect(){\r\n        </span><span style=\"color: #800080;\">$this</span>->connection = <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>->name.\'disconnected\'.<span style=\"color: #ff00ff;\">PHP_EOL</span><span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$battery</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Battery();\r\n</span><span style=\"color: #800080;\">$device</span> = <span style=\"color: #0000ff;\">new</span> Device(<span style=\"color: #800080;\">$battery</span>,\'mac\'<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$device</span>->aaa; <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">Notice: Undefined property: Device::$aaa</span></pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n</span><span style=\"color: #008080;\">header</span>(\"Content-type: text/html; charset=utf-8\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Device{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #800080;\">$name</span>,<span style=\"color: #800080;\">$battery</span>,<span style=\"color: #800080;\">$data</span> = [],<span style=\"color: #800080;\">$connection</span><span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> __construct(Battery <span style=\"color: #800080;\">$battery</span>,<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->battery = <span style=\"color: #800080;\">$battery</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #800080;\">$this</span>->name = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">connect();\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> __get(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #0000ff;\">if</span>(<span style=\"color: #008080;\">array_key_exists</span>(<span style=\"color: #800080;\">$name</span>,<span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">data)){\r\n            </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">$this</span>->data[<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">];\r\n        }\r\n        </span><span style=\"color: #0000ff;\">return</span> \'属性不存在\'<span style=\"color: #000000;\">;\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> connect(){\r\n        </span><span style=\"color: #800080;\">$this</span>->connection = \'resource\'<span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>->name.\'connected\'.<span style=\"color: #ff00ff;\">PHP_EOL</span><span style=\"color: #000000;\">;\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> disconnect(){\r\n        </span><span style=\"color: #800080;\">$this</span>->connection = <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>->name.\'disconnected\'.<span style=\"color: #ff00ff;\">PHP_EOL</span><span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$battery</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Battery();\r\n</span><span style=\"color: #800080;\">$device</span> = <span style=\"color: #0000ff;\">new</span> Device(<span style=\"color: #800080;\">$battery</span>,\'mac\'<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$device</span>->aaa; <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">macconnected 属性不存在</span></pre>\r\n</div>\r\n<p>该魔术方法最常用的地方就是通过创建一个&ldquo;只读&rdquo;的属性来扩展访问控制。在上面的Battery类中，有一个私有属性$charge，我们可以通过__get()魔术方法将该属性扩展为在类外部可读但不能修改。代码如下：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php \r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Battery {\r\n    </span><span style=\"color: #0000ff;\">private</span> <span style=\"color: #800080;\">$charge</span> = 0<span style=\"color: #000000;\">;\r\n \r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span>  __get(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">) {\r\n        </span><span style=\"color: #0000ff;\">if</span>(<span style=\"color: #0000ff;\">isset</span>(<span style=\"color: #800080;\">$this</span>-><span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">)) {\r\n            </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">$this</span>-><span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        }\r\n        </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p><strong>__set()</strong></p>\r\n<p>__set()魔术方法在我们尝试修改一个不可访问的属性时会被调用，它接收两个参数，一个表示属性的名字，一个表示属性的值。示例代码如下：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n</span><span style=\"color: #008080;\">header</span>(\"Content-type: text/html; charset=utf-8\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Device{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #800080;\">$name</span>,<span style=\"color: #800080;\">$battery</span>,<span style=\"color: #800080;\">$data</span> = [],<span style=\"color: #800080;\">$connection</span><span style=\"color: #000000;\">;\r\n\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> __construct(Battery <span style=\"color: #800080;\">$battery</span>,<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->battery = <span style=\"color: #800080;\">$battery</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #800080;\">$this</span>->name = <span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">connect();\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> __get(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #0000ff;\">if</span>(<span style=\"color: #008080;\">array_key_exists</span>(<span style=\"color: #800080;\">$name</span>,<span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">data)){\r\n            </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">$this</span>->data[<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">];\r\n        }\r\n        </span><span style=\"color: #0000ff;\">return</span> \'属性不存在\'<span style=\"color: #000000;\">;\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> __set(<span style=\"color: #800080;\">$name</span>,<span style=\"color: #800080;\">$value</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$this</span>->data[<span style=\"color: #800080;\">$name</span>] = <span style=\"color: #800080;\">$value</span><span style=\"color: #000000;\">;\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> connect(){\r\n        </span><span style=\"color: #800080;\">$this</span>->connection = \'resource\'<span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>->name.\'connected\'.<span style=\"color: #ff00ff;\">PHP_EOL</span><span style=\"color: #000000;\">;\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> disconnect(){\r\n        </span><span style=\"color: #800080;\">$this</span>->connection = <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$this</span>->name.\'disconnected\'.<span style=\"color: #ff00ff;\">PHP_EOL</span><span style=\"color: #000000;\">;\r\n    }\r\n}\r\n\r\n</span><span style=\"color: #800080;\">$battery</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Battery();\r\n</span><span style=\"color: #800080;\">$device</span> = <span style=\"color: #0000ff;\">new</span> Device(<span style=\"color: #800080;\">$battery</span>,\'mac\'<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$device</span>->aaa = \'哈哈\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$device</span>->aaa; <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">macconnected 哈哈</span></pre>\r\n</div>\r\n<p><strong>__isset()</strong></p>\r\n<p>__isset()魔术方法在对一个不可访问的属性调用isset()方法时会被调用，它接收一个参数，表示属性的名字。它应该返回一个布尔值，用来表示该属性是否存在。代码如下：</p>\r\n<p>　　</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Device{\r\n\r\n    </span><span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">function</span> __isset(<span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #008080;\">array_key_exists</span>(<span style=\"color: #800080;\">$name</span>,<span style=\"color: #800080;\">$this</span>-><span style=\"color: #000000;\">data);\r\n    }</span></pre>\r\n</div>\r\n<p> </p>\r\n<p>如果对象里面成员是公有的，可以直接使用 isset() 函数。如果是私有的成员属性，那就需要在类里面加上一个 __isset() 方法</p>\r\n<p><strong>__unset()</strong></p>\r\n<p>__unset()魔术方法在调用unset()函数销毁一个不能访问的属性时会被调用，它接收一个参数，表述属性的名字。</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/04/9263215.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('48', '0', 'list— 把数组中的值赋给一组变量', '', '', '', '<p class=\"verinfo\">(PHP 4, PHP 5, PHP 7)</p>\r\n<p class=\"refpurpose\"><span class=\"refname\">list &mdash; <span class=\"dc-title\">把数组中的值赋给一组变量&nbsp;</span></span></p>\r\n<div class=\"methodsynopsis dc-description\"><span class=\"type\">array <span class=\"methodname\"><strong>list</strong> ( <span class=\"methodparam\"><span class=\"type\">mixed <code class=\"parameter\">$var1</code> [, <span class=\"methodparam\"><span class=\"type\">mixed <code class=\"parameter\">$...</code> ] )</span></span></span></span></span></span></div>\r\n<p class=\"para rdfs-comment\">像 <span class=\"function\">array() 一样，这不是真正的函数，而是语言结构。 <span class=\"function\"><strong>list()</strong> 可以在单次操作内就为一组变量赋值。&nbsp;</span></span></p>\r\n<p><strong class=\"note\">Note</strong>:</p>\r\n<p class=\"para\"><span class=\"function\"><strong>list()</strong> 仅能用于数字索引的数组，并假定数字索引从 0 开始。</span></p>\r\n<p class=\"para\"><span class=\"function\"><strong class=\"warning\">Warning</strong></span></p>\r\n<p class=\"para\">PHP 5 里，<span class=\"function\"><strong>list()</strong> 从最右边的参数开始赋值； PHP 7 里，<span class=\"function\"><strong>list()</strong> 从最左边的参数开始赋值。 </span></span></p>\r\n<p class=\"para\">如果你用单纯的变量，不用担心这一点。 但是如果你用了具有索引的数组，通常你期望得到的结果和在 <span class=\"function\"><strong>list()</strong> 中写的一样是从左到右的，但在 PHP 5 里实际上不是， 它是以相反顺序赋值的。&nbsp;</span></p>\r\n<ol>\r\n<li class=\"para\"><span class=\"function\">等号左边是list()函数，右边是索引数组（下标连续的，按0开始）；&nbsp;</span></li>\r\n<li class=\"para\"><span class=\"function\">数组中有几个元素，则list()有几个参数（参数必须是变量不能是值，而且变量是自定义的变量），跟数组的值是一一对应关系；&nbsp;</span></li>\r\n<li class=\"para\"><em id=\"__mceDel\"><span class=\"function\">在list()函数的参数中，空项也代表元素</span></em></li>\r\n</ol>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n</span><span style=\"color: #0000ff;\">list</span>(,,<span style=\"color: #800080;\">$c</span>) = [\'aa\',\'bb\',\'cc\'<span style=\"color: #000000;\">];\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$c</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">cc</span>\r\n<span style=\"color: #0000ff;\">echo</span> \'<br>\'<span style=\"color: #000000;\">;\r\n\r\n</span><span style=\"color: #0000ff;\">list</span>(<span style=\"color: #800080;\">$a1</span>,<span style=\"color: #800080;\">$b1</span>,<span style=\"color: #800080;\">$c1</span>) = [\'aa1\',\'bb1\',\'cc1\'<span style=\"color: #000000;\">];\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$a1</span>.<span style=\"color: #800080;\">$b1</span>.<span style=\"color: #800080;\">$c1</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">aa1bb1cc1</span>\r\n<span style=\"color: #0000ff;\">echo</span> \'<br>\'<span style=\"color: #000000;\">;\r\n\r\n</span><span style=\"color: #0000ff;\">list</span>(<span style=\"color: #800080;\">$a2</span>,,<span style=\"color: #800080;\">$c2</span>) = [\'aa2\',\'bb2\',\'cc2\'<span style=\"color: #000000;\">];\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$a2</span>.<span style=\"color: #800080;\">$c2</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">aa2cc2</span>\r\n<span style=\"color: #0000ff;\">echo</span> \'<br>\'<span style=\"color: #000000;\">;\r\n\r\n</span><span style=\"color: #0000ff;\">list</span>(<span style=\"color: #800080;\">$a3</span>,<span style=\"color: #800080;\">$b3</span>,<span style=\"color: #800080;\">$c3</span>) = [1=>\'aa3\',2=>\'bb3\',0=>\'cc3\'<span style=\"color: #000000;\">];\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$a3</span>.<span style=\"color: #800080;\">$b3</span>.<span style=\"color: #800080;\">$c3</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">cc3aa3bb3</span>\r\n<span style=\"color: #0000ff;\">echo</span> \'<br>\'<span style=\"color: #000000;\">;\r\n\r\n</span><span style=\"color: #0000ff;\">list</span>(<span style=\"color: #800080;\">$a4</span>,<span style=\"color: #800080;\">$b4</span>,<span style=\"color: #800080;\">$c4</span>) = [1=>\'aa4\',2=>\'bb4\',3=>\'cc4\'<span style=\"color: #000000;\">];\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$a4</span>.<span style=\"color: #800080;\">$b4</span>.<span style=\"color: #800080;\">$c4</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">aa4bb4    Notice: Undefined offset: 0 in D:\\phpStudy\\WWW\\demo\\function.php on line 14</span>\r\n<span style=\"color: #0000ff;\">echo</span> \'<br>\'<span style=\"color: #000000;\">;\r\n\r\n</span><span style=\"color: #0000ff;\">list</span>(<span style=\"color: #800080;\">$a5</span>,<span style=\"color: #800080;\">$b5</span>,<span style=\"color: #800080;\">$c5</span>) = [1=>\'aa5\',2=>\'bb5\',\'a\'=>\'cc5\'<span style=\"color: #000000;\">];\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$a5</span>.<span style=\"color: #800080;\">$b5</span>.<span style=\"color: #800080;\">$c5</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">aa5bb5  Notice: Undefined offset: 0 in D:\\phpStudy\\WWW\\demo\\function.php on line 18</span>\r\n<span style=\"color: #0000ff;\">echo</span> \'<br>\';</pre>\r\n</div>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/04/9263064.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('49', '0', '获取某年周、月、季度的开始日期和结束日期', '', '', '', '<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\r\n * 计算一年有多少周，每周从星期一开始，\r\n * 如果最后一天在周四后（包括周四）算完整的一周，否则不计入当年的最后一周\r\n * 如果第一天在周四前（包括周四）算完整的一周，否则不计入当年的第一周\r\n * @param int $year\r\n * return int\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">function</span> week(<span style=\"color: #800080;\">$year</span><span style=\"color: #000000;\">){\r\n    </span><span style=\"color: #800080;\">$year_endday</span> = <span style=\"color: #008080;\">mktime</span>(0,0,0,12,31,<span style=\"color: #800080;\">$year</span><span style=\"color: #000000;\">);\r\n    </span><span style=\"color: #0000ff;\">if</span> (<span style=\"color: #008080;\">intval</span>(<span style=\"color: #008080;\">date</span>(\'W\',<span style=\"color: #800080;\">$year_endday</span>)) === 1<span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #008080;\">date</span>(\'W\',<span style=\"color: #008080;\">strtotime</span>(\'last week\',<span style=\"color: #800080;\">$year_endday</span><span style=\"color: #000000;\">));\r\n    }</span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\">{\r\n        </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #008080;\">date</span>(\'W\',<span style=\"color: #800080;\">$year_endday</span><span style=\"color: #000000;\">);\r\n    }\r\n}\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\r\n * 获取某年第几周的开始日期和结束日期\r\n * @param int $year\r\n * @param int $week 第几周;\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">function</span> weekday(<span style=\"color: #800080;\">$year</span>,<span style=\"color: #800080;\">$week</span>=1<span style=\"color: #000000;\">){\r\n    </span><span style=\"color: #800080;\">$year_start</span> = <span style=\"color: #008080;\">mktime</span>(0,0,0,1,1,<span style=\"color: #800080;\">$year</span><span style=\"color: #000000;\">);\r\n    </span><span style=\"color: #800080;\">$year_end</span> = <span style=\"color: #008080;\">mktime</span>(0,0,0,12,31,<span style=\"color: #800080;\">$year</span><span style=\"color: #000000;\">);\r\n\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 判断第一天是否为第一周的开始</span>\r\n    <span style=\"color: #0000ff;\">if</span> (<span style=\"color: #008080;\">intval</span>(<span style=\"color: #008080;\">date</span>(\'W\',<span style=\"color: #800080;\">$year_start</span>))===1<span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$start</span> = <span style=\"color: #800080;\">$year_start</span>;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">把第一天做为第一周的开始</span>\r\n    }<span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\">{\r\n        </span><span style=\"color: #800080;\">$week</span>++<span style=\"color: #000000;\">;\r\n        </span><span style=\"color: #800080;\">$start</span> = <span style=\"color: #008080;\">strtotime</span>(\'+1 monday\',<span style=\"color: #800080;\">$year_start</span>);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">把第一个周一作为开始</span>\r\n<span style=\"color: #000000;\">    }\r\n\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 第几周的开始时间</span>\r\n    <span style=\"color: #0000ff;\">if</span> (<span style=\"color: #800080;\">$week</span>===1<span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$weekday</span>[\'start\'] = <span style=\"color: #800080;\">$start</span><span style=\"color: #000000;\">;\r\n    }</span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\">{\r\n        </span><span style=\"color: #800080;\">$weekday</span>[\'start\'] = <span style=\"color: #008080;\">strtotime</span>(\'+\'.(<span style=\"color: #800080;\">$week</span>-0).\' monday\',<span style=\"color: #800080;\">$start</span><span style=\"color: #000000;\">);\r\n    }\r\n\r\n    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 第几周的结束时间</span>\r\n    <span style=\"color: #800080;\">$weekday</span>[\'end\'] = <span style=\"color: #008080;\">strtotime</span>(\'+1 sunday\',<span style=\"color: #800080;\">$weekday</span>[\'start\'<span style=\"color: #000000;\">]);\r\n    </span><span style=\"color: #0000ff;\">if</span> (<span style=\"color: #008080;\">date</span>(\'Y\',<span style=\"color: #800080;\">$weekday</span>[\'end\'])!=<span style=\"color: #800080;\">$year</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #800080;\">$weekday</span>[\'end\'] = <span style=\"color: #800080;\">$year_end</span><span style=\"color: #000000;\">;\r\n    }\r\n    </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">$weekday</span><span style=\"color: #000000;\">;\r\n}\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\r\n * 获取某年第几月的开始日期和结束日期\r\n * @param int $year\r\n * @param int $month 第几月;\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">function</span> monthday(<span style=\"color: #800080;\">$year</span>,<span style=\"color: #800080;\">$month</span><span style=\"color: #000000;\">){\r\n    </span><span style=\"color: #800080;\">$firstday</span> = <span style=\"color: #008080;\">date</span>(\'Y-m-01\', <span style=\"color: #008080;\">mktime</span>(0,0,0,<span style=\"color: #800080;\">$month</span>,1,<span style=\"color: #800080;\">$year</span>)); <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">月初</span>\r\n    <span style=\"color: #800080;\">$lastday</span> = <span style=\"color: #008080;\">date</span>(\'Y-m-d\', <span style=\"color: #008080;\">strtotime</span>(\"<span style=\"color: #800080;\">$firstday</span> +1 month -1 day\"));<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">月末</span>\r\n    <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> [\r\n        </span>\'firstday\' => <span style=\"color: #800080;\">$firstday</span>,\r\n        \'lastday\' =><span style=\"color: #800080;\">$lastday</span><span style=\"color: #000000;\">\r\n    ];\r\n}\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\r\n * 获取某年第几季度的开始日期和结束日期\r\n * @param int $year\r\n * @param int $season 第几季度;\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">function</span> seasonday(<span style=\"color: #800080;\">$year</span>,<span style=\"color: #800080;\">$season</span><span style=\"color: #000000;\">){\r\n    </span><span style=\"color: #800080;\">$firstday</span> = <span style=\"color: #008080;\">date</span>(\'Y-m-01\',<span style=\"color: #008080;\">mktime</span>(0,0,0,(<span style=\"color: #800080;\">$season</span> - 1) *3 +1,1,<span style=\"color: #800080;\">$year</span><span style=\"color: #000000;\">));\r\n    </span><span style=\"color: #800080;\">$lastday</span> = <span style=\"color: #008080;\">date</span>(\'Y-m-t\',<span style=\"color: #008080;\">mktime</span>(0,0,0,<span style=\"color: #800080;\">$season</span> * 3,1,<span style=\"color: #800080;\">$year</span><span style=\"color: #000000;\">));\r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> [\r\n        </span>\'firstday\' => <span style=\"color: #800080;\">$firstday</span>,\r\n        \'lastday\' =><span style=\"color: #800080;\">$lastday</span><span style=\"color: #000000;\">\r\n    ];\r\n}\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\r\n * 获取周几\r\n * @param int $date\r\n </span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #0000ff;\">function</span> getdateweek(<span style=\"color: #800080;\">$date</span><span style=\"color: #000000;\">){\r\n    </span><span style=\"color: #800080;\">$weekarray</span>=<span style=\"color: #0000ff;\">array</span>(\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\"<span style=\"color: #000000;\">);\r\n    </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">$weekarray</span>[<span style=\"color: #008080;\">date</span>(\"w\",<span style=\"color: #008080;\">strtotime</span>(<span style=\"color: #800080;\">$date</span><span style=\"color: #000000;\">))];\r\n}</span></pre>\r\n</div>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/04/9262588.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('50', '0', 'PHP单例模式', '', '', '', '<p>PHP单例模式，就是一个对象只被生成一次，但该对象可以被其它众多对象使用。单例模式使用最多的场景，是数据库连接操作。我们知道，生成一个对象的操作是用new函数来实现，但是new对象都会消耗内存，而且有时候对同一个对象，在不同文件中可能会生成多次，这就造成了系统资源的浪费。然而使用单例模式，则可以很好的避免这种情况。</p>\r\n<p>以数据库为例，假设我们有一个数据库的类，要实现数据库连接。如果不使用单例模式，那么在很多PHP文件中，我们可能到要创建这样的一个连接，这其实是对资源的很大浪费。那么下面介绍单例模式实现方法：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Database\r\n{\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #800080;\">$db</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> __construct()\r\n    {\r\n\r\n    }\r\n    </span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> getInstace(){\r\n        </span><span style=\"color: #0000ff;\">if</span>(self::<span style=\"color: #800080;\">$db</span><span style=\"color: #000000;\">){\r\n            </span><span style=\"color: #0000ff;\">return</span> self::<span style=\"color: #800080;\">$db</span><span style=\"color: #000000;\">;\r\n        }</span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\">{\r\n            self</span>::<span style=\"color: #800080;\">$db</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> self();\r\n            </span><span style=\"color: #0000ff;\">return</span> self::<span style=\"color: #800080;\">$db</span><span style=\"color: #000000;\">;\r\n        }\r\n    }\r\n}</span></pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">错误调用方法\r\n//用new实例化private标记构造函数的类会报错</span>\r\n<span style=\"color: #800080;\">$db</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Database();\r\n\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">正确获取实例方法</span>\r\n<span style=\"color: #800080;\">$db</span> = Database::getInstace();</pre>\r\n</div>\r\n<p>使用单例模式的好处是，当你在其他地方也要使用到这个类，比如上面的数据库类。那么你可以在其它地方直接调用&nbsp;<strong>Database::getInstace(）</strong>，而且该实例只会被生成一次，不会被重复生成，所以不会浪费系统资源。</p>\r\n<p>简单的说，单例模式生成的实例只被生成一次，而且只负责一个特定的任务。</p>\r\n<p><strong>使用单例模式有下面几个要求：</strong></p>\r\n<p>1.构造函数需要标记为private（访问控制：防止外部代码使用new操作符创建对象），单例类不能在其他类中实例化，只能被其自身实例化;</p>\r\n<p>2.拥有一个保存类的实例的静态成员变量;</p>\r\n<p>3.拥有一个访问这个实例的公共的静态方法（常用getInstance()方法进行实例化单例类，通过instanceof操作符可以检测到类是否已经被实例化）;</p>\r\n<p>4.如果严谨的话，还需要创建__clone()方法防止对象被复制（克隆）。(我上面没创建)</p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/04/9262478.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('51', '0', 'PHP工厂模式', '', '', '', '<p>PHP工厂模式就是用一个工厂方法来替换掉直接new对象的操作。</p>\r\n<p>在传统习惯中，如果要生成一个类的话，在代码中直接new一个对象，比如：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Database\r\n{\r\n\r\n}\r\n</span><span style=\"color: #800080;\">$db</span> = <span style=\"color: #0000ff;\">new</span> Database();</pre>\r\n</div>\r\n<p>下面介绍工厂模式的操作方法：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Database\r\n{\r\n\r\n}\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Factory{\r\n    </span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> createDatabase(){\r\n        </span><span style=\"color: #800080;\">$db</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Database();\r\n        </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">$db</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>那么，当我们想创建一个数据库类的话，就可以使用这样的方法：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #800080;\">$db</span> = Factory::createDatabase();</pre>\r\n</div>\r\n<p>简单工厂模式比直接new一个对象的好处是，比如Database这个类在很多php文件中都有使用到，当Database这个类发生了某些变更，比如修改了类名、或者一些参数发生了变化，那这时候如果你使用的是$db = new Database这种传统方法生成对象，那么在所有包含这种生成对象的php文件代码中都要进行修改。而使用工厂模式，只要在工厂方法或类里面进行修改即可。而且工厂模式是其他设计模式的基础。</p>\r\n<p>对上面的简单工厂模式再进一步优化，比如：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Database\r\n{\r\n    </span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">function</span> Factory(<span style=\"color: #800080;\">$type</span><span style=\"color: #000000;\">){\r\n\r\n        </span><span style=\"color: #0000ff;\">if</span>(<span style=\"color: #0000ff;\">include_once</span> \'Drivers/\'.<span style=\"color: #800080;\">$type</span>.\'.php\'<span style=\"color: #000000;\">){\r\n            </span><span style=\"color: #800080;\">$classname</span> = \'Drivers_\'.<span style=\"color: #800080;\">$type</span><span style=\"color: #000000;\">;\r\n            </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">new</span> <span style=\"color: #800080;\">$classname</span><span style=\"color: #000000;\">;\r\n        }</span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\">{\r\n            </span><span style=\"color: #0000ff;\">throw</span> <span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">Exception</span>(\'Driver not found\'<span style=\"color: #000000;\">);\r\n        }\r\n    }\r\n}\r\n</span><span style=\"color: #800080;\">$mysql</span> = Database::Factory(\'MySQL\'<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$sqlite</span> = Database::Factory(\'SQLite\');</pre>\r\n</div>\r\n<p>简单工厂模式又称静态工厂方法模式。从命名上就可以看出这个模式一定很简单。它存在的目的很简单：定义一个用于创建对象的接口。</p>\r\n<p>要理解工厂模式这个概念，让我们最好谈一下许多开发人员从事大型系统的艰苦历程。在更改一个代码片段时，就会发生问题，系统其他部分 &mdash;&mdash; 您曾认为完全不相关的部分中也有可能出现级联破坏。</p>\r\n<p>该问题在于紧密耦合 。系统某个部分中的函数和类严重依赖于系统的其他部分中函数和类的行为和结构。您需要一组模式，使这些类能够相互通信，但不希望将它们紧密绑定在一起，以避免出现联锁。</p>\r\n<p>在大型系统中，许多代码依赖于少数几个关键类。需要更改这些类时，可能会出现困难。例如，假设您有一个从文件读取的 User 类。您希望将其更改为从数据库读取的其他类，但是，所有的代码都引用从文件读取的原始类。这时候，使用工厂模式会很方便。</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">interface</span><span style=\"color: #000000;\"> IUser{\r\n    </span><span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> getName();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span> User <span style=\"color: #0000ff;\">implements</span><span style=\"color: #000000;\"> IUser{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #800080;\">$id</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> __construct(<span style=\"color: #800080;\">$id</span><span style=\"color: #000000;\">){\r\n\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> getName()\r\n    {\r\n        </span><span style=\"color: #0000ff;\">return</span> \"Jack\"<span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>传统方法使用 User 类，一般都是这样：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #800080;\">$obj1</span> = <span style=\"color: #0000ff;\">new</span>  User(1<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$obj2</span> = <span style=\"color: #0000ff;\">new</span>  User(2<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$obj3</span> = <span style=\"color: #0000ff;\">new</span>  User(3);</pre>\r\n</div>\r\n<p>这时候，由于新的需求，使得User类要新增个参数或者User类名称发生变化，User 类代码发生变动（因为某个奇葩需要改动类名，虽然可能概率很小，这里只是为了举例。），即：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">interface</span><span style=\"color: #000000;\"> IUser{\r\n    </span><span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> getName();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span> UserObj <span style=\"color: #0000ff;\">implements</span><span style=\"color: #000000;\"> IUser{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #800080;\">$id</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #800080;\">$pre</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> __construct(<span style=\"color: #800080;\">$id</span><span style=\"color: #000000;\">){\r\n\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> getName()\r\n    {\r\n        </span><span style=\"color: #0000ff;\">return</span> \"Jack\"<span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>接着，恐怖的事情发生了，假设之前有 100 个页面引用了之前的 User 类，那么这 100 个页面都要发生相应的改动</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #800080;\">$obj1</span> = <span style=\"color: #0000ff;\">new</span>  UserObj(1<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$obj2</span> = <span style=\"color: #0000ff;\">new</span>  UserObj(2<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$obj3</span> = <span style=\"color: #0000ff;\">new</span>  UserObj(3<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$obj4</span> = <span style=\"color: #0000ff;\">new</span>  UserObj(4<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$obj5</span> = <span style=\"color: #0000ff;\">new</span>  UserObj(5);</pre>\r\n</div>\r\n<p>本来是一个小小的改动，但因紧密耦合的原因使得改动大吐血。而使用工厂模式则可以避免发生这种情况：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">interface</span><span style=\"color: #000000;\"> IUser{\r\n    </span><span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> getName();\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">class</span> UserObj <span style=\"color: #0000ff;\">implements</span><span style=\"color: #000000;\"> IUser{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #800080;\">$id</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #800080;\">$pre</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> __construct(<span style=\"color: #800080;\">$id</span><span style=\"color: #000000;\">){\r\n\r\n    }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> getName()\r\n    {\r\n        </span><span style=\"color: #0000ff;\">return</span> \"Jack\"<span style=\"color: #000000;\">;\r\n    }\r\n}\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> UserFactory{\r\n    </span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span> create(<span style=\"color: #800080;\">$id</span><span style=\"color: #000000;\">){\r\n        </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">new</span> UserObj(<span style=\"color: #800080;\">$id</span><span style=\"color: #000000;\">);\r\n    }\r\n}\r\nUserFactory</span>::create(1<span style=\"color: #000000;\">);\r\nUserFactory</span>::create(2);</pre>\r\n</div>\r\n<p> </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/04/9262431.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('52', '0', 'PHP的命名空间', '', '', '', '<h3>什么是PHP命名空间?</h3>\r\n<p class=\"verinfo\">(PHP 5 >= 5.3.0, PHP 7)</p>\r\n<p class=\"simpara\">什么是命名空间？从广义上来说，命名空间是一种封装事物的方法。在很多地方都可以见到这种抽象概念。例如，在操作系统中目录用来将相关文件分组，对于目录中的文件来说，它就扮演了命名空间的角色。具体举个例子，文件 <em>foo.txt</em> 可以同时在目录<em>/home/greg</em> 和&nbsp;<em>/home/other</em> 中存在，但在同一个目录中不能存在两个 <em>foo.txt</em> 文件。另外，在目录&nbsp;<em>/home/greg</em> 外访问&nbsp;<em>foo.txt</em> 文件时，我们必须将目录名以及目录分隔符放在文件名之前得到 <em>/home/greg/foo.txt</em>。这个原理应用到程序设计领域就是命名空间的概念。</p>\r\n<p class=\"simpara\">在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：</p>\r\n<ol type=\"1\">\r\n<li class=\"listitem\"><span class=\"simpara\">用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</span></li>\r\n<li class=\"listitem\"><span class=\"simpara\">为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</span></li>\r\n</ol>\r\n<p class=\"para\">虽然任意合法的PHP代码都可以包含在命名空间中，但只有以下类型的代码受命名空间的影响，它们是：类（包括抽象类和traits）、接口、函数和常量。</p>\r\n<p class=\"para\">命名空间通过关键字<em>namespace</em> 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间，除了一个以外：declare关键字。</p>\r\n<p class=\"para\">在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的 <em>declare</em> 语句。另外，所有非 PHP 代码包括空白符都不能出现在命名空间的声明之前：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><html>\r\n<?<span style=\"color: #000000;\">php\r\nnamespace MyProject; </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\"> 致命错误 -　命名空间必须是程序脚本的第一条语句</span>\r\n?></pre>\r\n</div>\r\n<p>另外，与PHP其它的语言特征不同，同一个命名空间可以定义在多个文件中，即允许将同一个命名空间的内容分割存放在不同的文件中。</p>\r\n<p> <strong>1.</strong> 例一 <br />首先我们先建立两个类文件 </p>\r\n<p><strong>a.php</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Test\r\n{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> ceshi(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #ff00ff;\">__FILE__</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p><strong>b.php</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Test\r\n{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> ceshi(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #ff00ff;\">__FILE__</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p><strong>index.php</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"a.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"b.php\");</pre>\r\n</div>\r\n<p><strong>现在运行index.php文件</strong></p>\r\n<p><strong>你会发现有一个致命错误： Fatal error: Cannot redeclare class Test in。。。很显然，无法重新声明Test类，因为你引入了两次，而且两个文件中的类名称相同，冲突了。这个时候就需要命名空间来解决这个问题，并且很容易。</strong></p>\r\n<p><strong><strong>2.</strong> </strong>例二 <strong><br /></strong>我们现在把两个类文件稍作修改。&nbsp;</p>\r\n<p><strong>a.php</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\nnamespace demo1\\a\\Test;\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Test\r\n{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> ceshi(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #ff00ff;\">__FILE__</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p><strong>b.php</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\nnamespace demo1\\b\\Test;\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Test\r\n{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> ceshi(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #ff00ff;\">__FILE__</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p><strong>namespace关键字是用来声明命名空间的。现在运行index.php发现没有错误，修改index.php进行方法调用测试</strong> </p>\r\n<p><strong>index.php</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"a.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"b.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$a1</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> demo1\\a\\Test\\Test();\r\n</span><span style=\"color: #800080;\">$a1</span>->ceshi();</pre>\r\n</div>\r\n<p><strong>现在运行index.php文件</strong></p>\r\n<p>D:\\phpStudy\\WWW\\demo\\demo1\\a.php </p>\r\n<p><strong>3.</strong> 例三 </p>\r\n<p>现在有另外一种情况，比如我需要实例化a.php中的Test类多次，那么每次我们都需要命名空间信息完整写的话比较麻烦怎么办呢？比如：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"a.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"b.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$a1</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> demo1\\a\\Test\\Test();\r\n</span><span style=\"color: #800080;\">$a2</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> demo1\\a\\Test\\Test();\r\n</span><span style=\"color: #800080;\">$a1</span>-><span style=\"color: #000000;\">ceshi();\r\n</span><span style=\"color: #0000ff;\">echo</span> \'<br/>\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #800080;\">$a2</span>->ceshi();</pre>\r\n</div>\r\n<p>虽然也没有错误，但是你会发现比较麻烦，每次都需要全写命名空间名称，虽然不报错并且可以ctrl+c，ctrl+v，但是不太美观（^_^）。</p>\r\n<p>你可以这样做</p>\r\n<p><strong>index.php</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"a.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"b.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> demo1\\a\\Test\\Test;\r\n</span><span style=\"color: #800080;\">$a1</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Test();\r\n</span><span style=\"color: #800080;\">$a2</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Test();\r\n</span><span style=\"color: #800080;\">$a1</span>-><span style=\"color: #000000;\">ceshi();\r\n</span><span style=\"color: #0000ff;\">echo</span> \'<br />\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #800080;\">$a2</span>->ceshi();</pre>\r\n</div>\r\n<p><strong>use关键字是用来引入类，用命名空间的方式表示使用了某个类。后面就可以直接实例化操作</strong> </p>\r\n<p><strong>4.</strong> 例五 </p>\r\n<p>接下来另一个问题又来了，如下： </p>\r\n<p><strong>index.php</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"a.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"b.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> demo1\\a\\Test\\Test;\r\n</span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> demo1\\b\\Test\\Test;\r\n</span><span style=\"color: #800080;\">$a</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Test();\r\n</span><span style=\"color: #800080;\">$b</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Test();\r\n</span><span style=\"color: #800080;\">$a</span>-><span style=\"color: #000000;\">ceshi();\r\n</span><span style=\"color: #0000ff;\">echo</span> \'<br />\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #800080;\">$b</span>->ceshi();</pre>\r\n</div>\r\n<p><strong>现在运行index.php文件</strong></p>\r\n<p><strong> Fatal error: Cannot use demo1\\b\\Test\\Test as Test because the name is already in use in D:\\phpStudy\\WWW\\demo\\demo1\\index.php on line <em>5</em></strong></p>\r\n<p> </p>\r\n<p><strong>因为虽然使用了命名空间，但是两个类名称相同，都是Test，程序不知道第二个Test类是b.php中的Test类，这时候你就用到了as关键字</strong> </p>\r\n<p><strong>index.php</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"a.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"b.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> demo1\\a\\Test\\Test;\r\n</span><span style=\"color: #0000ff;\">use</span> demo1\\b\\Test\\Test <span style=\"color: #0000ff;\">as</span><span style=\"color: #000000;\"> bTest;\r\n</span><span style=\"color: #800080;\">$a</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Test();\r\n</span><span style=\"color: #800080;\">$b</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> bTest();\r\n</span><span style=\"color: #800080;\">$a</span>-><span style=\"color: #000000;\">ceshi();\r\n</span><span style=\"color: #0000ff;\">echo</span> \'<br />\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #800080;\">$b</span>->ceshi();</pre>\r\n</div>\r\n<p><strong>as关键字是对类名称定义别名，可以有效防止类名称相同冲突</strong> </p>\r\n<p><strong>5.</strong> 例六</p>\r\n<p>比如我们在a.php同级再建立一个全局类文件：c.php：</p>\r\n<p><strong>c.php</strong></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Test{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> ceshi(){\r\n        </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #ff00ff;\">__FILE__</span><span style=\"color: #000000;\">;\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>在index.php文件中这样做即可调用c.php中的test方法</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><?<span style=\"color: #000000;\">php\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"a.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"b.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">require_once</span>(\"c.php\"<span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">use</span><span style=\"color: #000000;\"> demo1\\a\\Test\\Test;\r\n</span><span style=\"color: #0000ff;\">use</span> demo1\\b\\Test\\Test <span style=\"color: #0000ff;\">as</span><span style=\"color: #000000;\"> bTest;\r\n</span><span style=\"color: #800080;\">$a</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Test();\r\n</span><span style=\"color: #800080;\">$a</span>-><span style=\"color: #000000;\">ceshi();\r\n</span><span style=\"color: #0000ff;\">echo</span> \'<br />\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #800080;\">$b</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> bTest();\r\n</span><span style=\"color: #800080;\">$b</span>-><span style=\"color: #000000;\">ceshi();\r\n</span><span style=\"color: #0000ff;\">echo</span> \'<br />\'<span style=\"color: #000000;\">;\r\n</span><span style=\"color: #800080;\">$c</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> \\Test();\r\n</span><span style=\"color: #800080;\">$c</span>-><span style=\"color: #000000;\">ceshi();\r\n</span><span style=\"color: #0000ff;\">echo</span> \'<br />\';</pre>\r\n</div>\r\n<p>我们将这种类叫做全局类，如果要使用需要类前面加入反斜杠&rdquo;\\&rdquo; </p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/07/04/9261560.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');
INSERT INTO `zgw_blog` VALUES ('53', '0', 'RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L] 是什么意思？', '', '', '', '<pre class=\"hljs apache\"><code><span class=\"hljs-section\"><IfModule mod_rewrite.c>\r\n<span class=\"hljs-attribute\"><span class=\"hljs-nomarkup\">Options +FollowSymlinks\r\n<span class=\"hljs-attribute\"><span class=\"hljs-nomarkup\">RewriteEngine <span class=\"hljs-literal\">On\r\n<span class=\"hljs-attribute\"><span class=\"hljs-nomarkup\">RewriteCond <span class=\"hljs-variable\">%{REQUEST_FILENAME} !-d\r\n<span class=\"hljs-attribute\"><span class=\"hljs-nomarkup\">RewriteCond <span class=\"hljs-variable\">%{REQUEST_FILENAME} !-f\r\n<span class=\"hljs-attribute\"><span class=\"hljs-nomarkup\">RewriteRule ^(.*)$ index.php/<span class=\"hljs-number\">$1<span class=\"hljs-meta\"> [QSA,PT,L]\r\n<span class=\"hljs-section\"></IfModule>\r\n</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>\r\n<p><strong>1、</strong>排除一些条件，必须两个条件都满足后才重定向到index.php<br />//如果你访问的文件<code>不等于目录</code></p>\r\n<pre class=\"hljs apache\"><code><span class=\"hljs-attribute\"><span class=\"hljs-nomarkup\">RewriteCond <span class=\"hljs-variable\">%{REQUEST_FILENAME} !-d\r\n</span></span></span></code></pre>\r\n<p>//如果你访问不是文件，比如你可能访问的JPEG等图片文件</p>\r\n<pre class=\"hljs apache\"><code><span class=\"hljs-attribute\"><span class=\"hljs-nomarkup\">RewriteCond <span class=\"hljs-variable\">%{REQUEST_FILENAME} !-f\r\n\r\n</span></span></span></code></pre>\r\n<p><strong>2、</strong><code>^(.*)$</code> 匹配所有的路径映射到入口文件&nbsp;<code>index.php/$1</code></p>\r\n<p><strong>3、</strong>标签 <code>[QSA,PT,L]</code> QSA：表示保留参数如get传值?xxx==xx...； PT：再把这个URL交给Apache处理；L：作为最后一条；<br />PT和L可加可不加。</p>\r\n<p><span class=\"img-wrap\"><img title=\"clipboard.png\" src=\"https://segmentfault.com/img/bVNCLA?w=894&h=347\" alt=\"clipboard.png\" data-src=\"/img/bVNCLA?w=894&h=347\" /></span></p>', '0', '1', 'http://www.cnblogs.com/zhouguowei/archive/2018/06/28/9240079.html', '0', '0', '0', '0', '0', '1', '1', '', '0', '0');

-- ----------------------------
-- Table structure for `zgw_blog_category`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_blog_category`;
CREATE TABLE `zgw_blog_category` (
  `category_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `category_name` varchar(60) NOT NULL COMMENT '分类名称',
  `level` tinyint(1) NOT NULL DEFAULT '1' COMMENT '级别',
  `pid` int(10) NOT NULL DEFAULT '0' COMMENT '父级id',
  `list_order` smallint(5) NOT NULL DEFAULT '0' COMMENT '排序',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1启用 0禁用',
  `create_time` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(11) NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COMMENT='博客分类';

-- ----------------------------
-- Records of zgw_blog_category
-- ----------------------------
INSERT INTO `zgw_blog_category` VALUES ('1', 'PHP', '1', '0', '0', '1', '1543196155', '1543226156');
INSERT INTO `zgw_blog_category` VALUES ('2', '前端', '1', '0', '0', '1', '1543196230', '1543196230');
INSERT INTO `zgw_blog_category` VALUES ('3', 'Html5+CSS3', '2', '2', '0', '1', '1543196249', '1543196249');
INSERT INTO `zgw_blog_category` VALUES ('4', 'jquery+javascript', '2', '2', '0', '1', '1543196261', '1543196261');
INSERT INTO `zgw_blog_category` VALUES ('5', 'Web', '2', '2', '0', '1', '1543196277', '1543196277');
INSERT INTO `zgw_blog_category` VALUES ('6', '服务器', '1', '0', '0', '1', '1543196290', '1543196290');
INSERT INTO `zgw_blog_category` VALUES ('7', 'Shell', '2', '6', '0', '1', '1543196305', '1543196305');
INSERT INTO `zgw_blog_category` VALUES ('8', 'Linux', '2', '6', '0', '1', '1543196317', '1543196317');
INSERT INTO `zgw_blog_category` VALUES ('9', '数据库', '1', '0', '0', '1', '1543196333', '1543196333');
INSERT INTO `zgw_blog_category` VALUES ('10', 'MySQL', '2', '9', '0', '1', '1543196347', '1543196347');
INSERT INTO `zgw_blog_category` VALUES ('11', 'Nginx', '2', '6', '0', '1', '1543196391', '1543196391');
INSERT INTO `zgw_blog_category` VALUES ('12', 'Apache', '2', '6', '0', '1', '1543196399', '1543196399');
INSERT INTO `zgw_blog_category` VALUES ('14', 'NoSql', '2', '9', '0', '1', '1543196958', '1543196958');

-- ----------------------------
-- Table structure for `zgw_blog_comment`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_blog_comment`;
CREATE TABLE `zgw_blog_comment` (
  `comment_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `blog_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '博客id',
  `pid` int(10) unsigned NOT NULL DEFAULT '0',
  `comment_poster` varchar(60) NOT NULL COMMENT '评论者昵称',
  `comment_detail` text NOT NULL COMMENT '评论内容',
  `comment_mail` varchar(255) NOT NULL COMMENT '评论者邮箱',
  `comment_url` varchar(255) NOT NULL COMMENT '评论者个人域名',
  `comment_ip` int(11) NOT NULL COMMENT '评论ip',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1显示 0隐藏',
  `create_time` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(11) NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`comment_id`),
  KEY `gid` (`blog_id`),
  KEY `hide` (`status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='博客评论';

-- ----------------------------
-- Records of zgw_blog_comment
-- ----------------------------

-- ----------------------------
-- Table structure for `zgw_blog_link`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_blog_link`;
CREATE TABLE `zgw_blog_link` (
  `link_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `link_sitename` varchar(60) NOT NULL COMMENT '站点名称',
  `link_siteurl` varchar(255) NOT NULL COMMENT '站点网址',
  `link_description` varchar(255) NOT NULL,
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1启用 0禁用',
  `create_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(11) NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`link_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='博客友情链接';

-- ----------------------------
-- Records of zgw_blog_link
-- ----------------------------

-- ----------------------------
-- Table structure for `zgw_blog_nav`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_blog_nav`;
CREATE TABLE `zgw_blog_nav` (
  `nav_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `nav_name` varchar(30) NOT NULL COMMENT '导航名称',
  `level` tinyint(1) NOT NULL DEFAULT '1' COMMENT '级别',
  `nav_url` varchar(255) NOT NULL COMMENT '导航url',
  `pid` int(10) unsigned NOT NULL DEFAULT '0',
  `list_order` smallint(5) NOT NULL DEFAULT '0' COMMENT '排序',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1启用 0禁用',
  `create_time` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(11) NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`nav_id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 COMMENT='博客菜单';

-- ----------------------------
-- Records of zgw_blog_nav
-- ----------------------------
INSERT INTO `zgw_blog_nav` VALUES ('1', '网站首页', '1', 'http://www.myblog.com/blog/index/index.html', '0', '1', '1', '1542965009', '1542966765');
INSERT INTO `zgw_blog_nav` VALUES ('2', '关于我', '1', 'http://www.myblog.com/blog/index/about.html', '0', '2', '1', '1542965482', '1542966773');
INSERT INTO `zgw_blog_nav` VALUES ('3', '模板分享', '1', 'http://www.myblog.com/blog/index/share.html', '0', '3', '1', '1542965503', '1542966785');
INSERT INTO `zgw_blog_nav` VALUES ('4', '博客日志', '1', 'http://www.myblog.com/blog/index/lists.html', '0', '4', '1', '1542965528', '1542966791');
INSERT INTO `zgw_blog_nav` VALUES ('5', '学无止境', '1', 'http://www.myblog.com/blog/index/knowledge.html', '0', '5', '1', '1542965550', '1542966797');
INSERT INTO `zgw_blog_nav` VALUES ('6', '慢生活', '2', 'http://www.myblog.com/blog/index/infos.html', '5', '1', '1', '1542965570', '1542966815');
INSERT INTO `zgw_blog_nav` VALUES ('7', '美文欣赏', '2', 'http://www.myblog.com/blog/index/knowledge.html', '5', '2', '1', '1542965586', '1542966821');
INSERT INTO `zgw_blog_nav` VALUES ('9', '时间轴', '1', 'http://www.myblog.com/blog/index/times.html', '0', '6', '1', '1542966049', '1542966806');

-- ----------------------------
-- Table structure for `zgw_blog_system`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_blog_system`;
CREATE TABLE `zgw_blog_system` (
  `system_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `system_name` varchar(60) NOT NULL COMMENT '设置项名称',
  `system_value` varchar(255) NOT NULL COMMENT '设置项值',
  `create_time` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(11) NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`system_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='博客设置';

-- ----------------------------
-- Records of zgw_blog_system
-- ----------------------------
INSERT INTO `zgw_blog_system` VALUES ('1', 'blog_name', '周国伟博客,技术博客,个人博客模板,php博客系统,设计模式', '1542960731', '1542962234');
INSERT INTO `zgw_blog_system` VALUES ('2', 'blog_keywords', '个人博客模板,博客模板,博客系统,技术博客,个人博客,设计模式,laravel博客,php博客', '1542960731', '1542962234');
INSERT INTO `zgw_blog_system` VALUES ('3', 'blog_description', '周国伟的php博客,个人技术博客,分享免费个人博客模板,开源一些thinkphp,laravel相关的博客系统项目,bjy,blog和bjy,admin官网,写一些技术文章设计模式.', '1542960731', '1542962234');

-- ----------------------------
-- Table structure for `zgw_blog_tag`
-- ----------------------------
DROP TABLE IF EXISTS `zgw_blog_tag`;
CREATE TABLE `zgw_blog_tag` (
  `tag_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(60) NOT NULL COMMENT '标签名称',
  `tag_note` varchar(255) NOT NULL COMMENT '标签描述',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1启用 0禁用',
  `create_time` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(11) NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='博客标签库';

-- ----------------------------
-- Records of zgw_blog_tag
-- ----------------------------
